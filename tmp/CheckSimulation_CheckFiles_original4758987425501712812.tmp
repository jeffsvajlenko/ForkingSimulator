package X.X.X.X;

import X.X.*;

import X.X.*;

import X.X.*;

import X.X.X.*;

import X.X.*;

import X.X.*;

import X.X.*;

import X.X.*;

import X.X.*;

import X.X.X.*;

import X.X.X.X.*;

import X.X.*;

import X.X.X.*;

import X.X.*;

import X.X.X.X.*;

public class X extends X {
    static final X X = new X (0, 0, 0, 0);
    private static final X X = new X ();
    private static final X X = new X (0);
    private static final X X = new X (0);
    private static X X;
    private static X X;
    private X X;
    private X X;
    private X X;

    static X X () {
        return (X) X.X ().X (X);
    }

    static X X (X X, X X, X X, X X, X X) {
        X X = 0;
        if (X) {
            X = X.X;
            if (X) {
                X |= X.X;
            }
        } else if (X && X) {
            X |= X.X | X.X;
            if (X) {
                X |= X.X;
            }
        } else {
            if (X) {
                X |= X.X;
                if (X) {
                    X |= X.X;
                }
            } else {
                X |= X.X;
            }
        }

        X X = X.X ();
        X.X (X, X);
        X.X (X, X.X (X));
    }

    static X X () {
        X X = (X) X.X ().X (X);
        return X == 0 ? 0 : X.X ();
    }

    static X X () {
        X.X ().X (X);
    }

    public static X X (X X) {
        synchronized (X.class) {
            X X = X.X ();
            X = X;
            X = X;
            X.X (X, X);
        }
    }

    public static X X () {
        synchronized (X.class) {
            X X = X.X ();
            if (X == X) {
                return X;
            }
            X = X;
            X = (X) X.X (X);
            return X;
        }
    }

    static X X (X X) {
        if (X.X ()) {
            if (X.X ()) {
                return X.X | X.X;
            }
            return X.X;
        }
        return X.X;
    }

    public static X X (X X, X X) {
        return X ().X (X, X);
    }

    static X X (X X) {
        X X = X.X ();
        if (0 == X) {
            return 0;
        } else if (0 == X) {
            return 0;
        } else if (0 == X && X.X () != 0) {
            X X = X.X ();
            return (X instanceof X && ((X) X).X ());
        } else if (0 == X) {
            return 0;
        } else if (0 == X) {
            return 0;
        } else if (0 == X) {
            return 0;
        }

        return 0;
    }

    static X X (X X, X X) {
        X X = X (X.X (), X.X ());
        X X = X.X ();
        if (X != X) {
            if (X != 0) {
                X.X (X);
            }
            X.X (X);
            X.X (X, X);
        }
        return X;
    }

    public static X X (X X) {
        X (X);
        X.X ();
    }

    private static X X (X X) {
        if (X instanceof X) {
            X X = X.X ();
            X.X (0);
            if (X != 0) {
                X.X (X);
            }
            ((X) X).X ();
        }
        X [] X = 0;
        if (X instanceof X) {
            X = ((X) X).X ();
        } else if (X instanceof X) {
            X = ((X) X).X ();
        }

        if (X != 0) {
            for (X X = 0;
            X < X.X; X ++) {
                X (X [X]);
            }
        }
    }

    public static X X (X X) {
        return X.X (X);
    }

    static X X (X X, X X) {
        if (X.X ()) {
            X = X.X ().X (X, X);
        } else {
            X = X.X ().X (X);
        }
        return X;
    }

    static X X (X X, X X) {
        X (X, X, 0);
    }

    static X X (X X, X X, X X) {
        X (X, X, X);
    }

    private static X X (X X, X X, X X) {
        X X = X.X ();
        X X = X.X ();
        X X, X, X, X;
        if (X == 0) {
            X = 0;
            X = 0;
            X = X.X ();
            X = X.X ();
        } else {
            X = X.X;
            X = X.X;
            X = X.X;
            X = X.X;
        }
        X X = X.X ();
        if ((X && X.X (X)) || (! X && X.X ())) {
            X.X (X.X (X, X.X));
            X.X (X, X, X, X);
        }
    }

    static X X (X X) {
        return X.X ().X ();
    }

    static X X (X X, X X) {
        if (X.X (X)) {
            return X;
        }
        return 0;
    }

    public static X X (X X) {
        X X = X.X ().X ();
        if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        } else if (X == 0) {
            return X.X (X);
        }

        return 0;
    }

    public X () {
        X = new X ();
        X = new X ();
    }

    public X X (X X, X < ? > X) throws X {
        if (X == 0) {
            throw new X (0);
        }
        if (X == 0) {
            X = new X ();
        }
        new X ().X (X, (X) X, 0, X, X);
    }

    public X X (X X) throws X, X {
        if (X == 0) {
            throw new X (0);
        }
        if (X == 0) {
            X = new X ();
        }
        X X = X.X ();
        new X ().X (X, (X) X, X, 0, X);
    }

    @X
    public X X () {
        X.X ();
        X.X (new X ());
        X (X);
        X.X ().X (X);
    }

    @X
    public X X () {
        X.X ().X (X);
        X.X ();
    }

    @X
    public X X () {
        X X = new X (0, 0);
        X.X (X);
        X.X (X.X ());
        X.X (0);
        X.X (0);
        X.X (0, X.X);
        X.X (0, new X (0, 0));
        X.X (0, X.X);
        X.X (0, new X (0, 0));
        X.X (0, X.X (X (), X.class, 0));
        X.X (0, X.X (X (), X.class, 0));
        X.X (0, new X [] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0});
        X.X (0, new X [] {0, 0, 0, 0, 0, 0, 0, 0,});
        X ();
        X X = X ();
        X.X (X.X, X);
        new X (X);
        if (X != 0) {
            X.X (X);
        }
        return X;
    }

    @X
    public X X () {
        return 0;
    }

    @X
    public X X () {
        return 0;
    }

    @X
    public X X () {
        return 0;
    }

    @X
    public X X () {
        return 0;
    }

    @X
    public X X () {
        return 0;
    }

    public X X () {
        return 0;
    }

    private static X X () {
        X X = X.X ().X ();
        X X = (X) X.X (new X (0));
        X X = (X.X.X ().X (X) || X.X.X ().X (X) || X.X.X ().X (X));
        X X = 0.X (X);
        X X = X.X ();
        X X = X && (! X || ! X);
        X X = X.X.X (X);
        return X;
    }

    private static X X = new X ();

    private static X X () {
        X X;
        while ((X = (X) X.X ()) != 0) {
            X.X ();
        }
    }

    private static class X extends X implements X {
        private X X = X.X;

        X (X X) {
            X (X, X);
            X X = X.X ();
            X.X (X, X);
        }

        @X
        public X X (X X) {
            X X = X.X ();
            if (X.X (0)) {
                X ();
                return;
            }
            X X = (X) X ();
            if (X == 0 || X != X.X ()) {
                X ();
                return;
            }
            X X = X ();
            X.X (X.X, X);
            X ();
        }

        X X () {
            X X = X.X ();
            X.X (X, X);
        }

        private static X X (X X) {
            X (X);
            X X [] = X.X ();
            for (X X = 0;
            X < X.X; X ++) {
                X (X [X]);
            }
        }

        private static X X () {
            X X [] = X.X ();
            for (X X = 0;
            X < X.X; X ++) {
                X (X [X]);
            }
        }

        private static X X;

        private static synchronized X X (X X) {
            X = X;
        }

        private static synchronized X X () {
            return X;
        }

        protected X X () {
            if (! X ()) {
                X (0);
                X X = new X () {

                    @X
                    public X X () {
                        X ();
                        X (0);
                    }

                }

                ;
                X.X (X);
            }
        }

    }

    private X X (X.X.X X) throws X {
        throw new X (X.X ().X ());
    }

    private class X implements X {

        @X
        public X X (X X) {
            X X = X.X ();
            X X = X.X ();
            X X = X.X ();
            if (0 == X) {
                if (X instanceof X) {
                    X ((X) X);
                }
                if (X instanceof X) {
                    X ((X) X);
                }
            } else if (0 == X) {
                X X = (X) X.X ();
                if (((X) X).X (X.X)) {
                    X.X (X);
                } else {
                    X.X (X);
                }
            }

        }

        private X X (X X) {
            X X = (X) X.X (X.X);
            if (X instanceof X) {
                X X = (X) X;
                X X = X.X (X);
                X X = X.X ();
                X X = X.X ();
                X X = X.X (X, X.X);
                X ^= X.X;
                X.X (X);
                X X = X.X (X, X.X);
                X ^= X.X;
                X.X (X);
                if (X != 0 && ! X.X (X)) {
                    X.X ();
                }
                X.X ();
            }
        }

    }

}

