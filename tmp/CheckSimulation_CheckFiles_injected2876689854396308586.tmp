package X.X.X.X.X.X.X;

import X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

public class X extends X {
    protected static final X X = X.X + X.X;
    protected static final X X = X.X + X.X;
    private static final X [] X = {X};
    protected static final X X = X.X + X.X;
    protected static final X X = X.X + X.X;
    private static final X [] X = {X, X,};
    protected X X = 0;

    public X () {
        X (X);
    }

    public X () {
        X ();
    }

    public X () {
        X ();
    }

    public X () {
        X (new X ());
        X.X ();
        if (X != 0) {
            X.X (X);
        }
        if (X != 0) {
            X.X (X);
        }
        X.X (X);
    }

    public X X () throws X, X {
        X X = new X (X);
        try {
            X (X);
        } catch (X X) {
            X X = X.X ();
            if (X == 0) {
                X X = new X ();
                X.X ();
                X.X ();
                X.X ();
                X.X ();
                throw new X (X);
            }
            if (X instanceof X) {
                throw (X) X;
            }
            if (X instanceof X) {
                throw (X) X;
            }
            throw new X ();
        } catch (X X) {
            X.X ();
            X X = X.X ();
            if (X == 0) {
                throw new X ();
            }
            if (X instanceof X) {
                throw (X) X;
            }
            if (X instanceof X) {
                throw (X) X;
            }
            throw new X ();
        }
    }

    public X X (X X) throws X, X {
        try {
            X X = new X (X.X (), X.X (), 0);
            X.X ();
            X.X ();
            X.X ();
            X ();
        } catch (X X) {
            X X = X.X ();
            if (X == 0) {
                X X = new X ();
                X.X ();
                X.X ();
                X.X ();
                X.X ();
                throw new X (X);
            }
            if (X instanceof X) {
                throw (X) X;
            }
            if (X instanceof X) {
                throw (X) X;
            }
            throw new X ();
        } catch (X X) {
            X X = X.X ();
            if (X == 0) {
                throw new X ();
            }
            if (X instanceof X) {
                throw (X) X;
            }
            if (X instanceof X) {
                throw (X) X;
            }
            throw new X ();
        }
    }

    public X X () {
        try {
            X X = (X) X.X ();
            if (X && X instanceof X) {
                if (X instanceof X) {
                    X X = (X) X;
                    X.X ((X) X);
                } else {
                    X.X (X, new X ((X) X));
                }
            } else {
                if (X instanceof X) {
                    X X = (X) X;
                    X.X ();
                } else {
                    X.X (X, new X ());
                }
            }
        } catch (X X) {
        }
    }

    public X X () {
        X X = 0;
        try {
            X X = (X) X.X (X);
            if (X != 0) {
                if (X instanceof X) {
                    X = ((X) X).X ();
                } else if (X instanceof X) {
                    X = ((X) X).X ();
                }

            }
        } catch (X X) {
        }
        return X;
    }

    public X X () {
        try {
            X X = (X) X.X ();
            if (X instanceof X) {
                X X = (X) X;
                X.X ();
            } else {
                X.X (X, new X ());
            }
        } catch (X X) {
        }
    }

    public X X () {
        X X = 0;
        try {
            X X = (X) X.X ();
            if (X != 0 && X instanceof X) {
                X = ((X) X).X ();
            }
        } catch (X X) {
        }
        return X;
    }

    public X X () throws X, X {
        try {
            if (X.X ()) {
                if (X != X) {
                    X = X;
                    X ();
                }
                return;
            }
            X.X (X);
        } catch (X X) {
            X X = X.X ();
            if (X.X () == X.X) {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            } else {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            }
        }
    }

    public X X () throws X, X {
        try {
            if (X.X ()) {
                return X;
            }
            return X.X ();
        } catch (X X) {
            X X = X.X ();
            if (X.X () == X.X) {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            } else {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            }
        }
    }

    public X X (X X) throws X, X {
        try {
            X.X ();
        } catch (X X) {
            X X = X.X ();
            if (X.X () == X.X) {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            } else {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            }
        }
    }

    public X X () throws X, X {
        if (X.X (X)) {
            X X = 0;
            try {
                X = X (X);
            } catch (X X) {
            }
            if (X) {
                throw new X (0);
            }
            return (X != 0 && X.X () == X.X) ? X : 0;
        }
        try {
            return X.X ();
        } catch (X X) {
            X X = X.X ();
            if (X.X () == X.X) {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            } else {
                throw new X (X.X (X.X (), 0, new X [] {X}));
            }
        }
    }

    public X X () {
        return X;
    }

}

