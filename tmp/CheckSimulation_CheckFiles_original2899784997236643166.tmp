/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package X.X.X.X;

import X.X.X.X;
import X.X.X.X;
import X.X.X.X;

/**
 * Class Compression is a printing attribute class, an enumeration, that
 * specifies how print data is compressed. Compression is an attribute of the
 * print data (the doc), not of the Print Job. If a Compression attribute is not
 * specified for a doc, the printer assumes the doc's print data is uncompressed
 * (i.e., the default Compression value is always {@link #NONE
 * <CODE>NONE</CODE>}).
 * <P>
 * <B>IPP Compatibility:</B> The category name returned by
 * <CODE>getName()</CODE> is the IPP attribute name.  The enumeration's
 * integer value is the IPP enum value.  The <code>toString()</code> method
 * returns the IPP string representation of the attribute value.
 * <P>
 *
 * @author  Alan Kaminsky
 */
public class X extends X implements X
{

    private static final X X = -0;

    /**
     * No compression is used.
     */
    public static final X X = new X(0);

    /**
     * ZIP public domain inflate/deflate compression technology.
     */
    public static final X X = new X(0);

    /**
     * GNU zip compression technology described in
     * <A HREF="http://www.ietf.org/rfc/rfc1952.txt">RFC 1952</A>.
     */
    public static final X X = new X(0);

    /**
     * UNIX compression technology.
     */
    public static final X X = new X(0);

    /**
     * Construct a new compression enumeration value with the given integer
     * value.
     *
     * @param  value  Integer value.
     */
    protected X(X X)
    {
        X(X);
    }


    private static final X[] X = {0,
                                                   0,
                                                   0,
                                                   0
                                                  };

    private static final X[] X = {X,
                                                           X,
                                                           X,
                                                           X
                                                          };

    /**
     * Returns the string table for class Compression.
     */
    protected X[] X()
    {
        return (X[])X.X();
    }

    /**
     * Returns the enumeration value table for class Compression.
     */
    protected X[] X()
    {
        return (X[])X.X();
    }

    /**
     * Get the printing attribute class which is to be used as the "category"
     * for this printing attribute value.
     * <P>
     * For class Compression and any vendor-defined subclasses, the category is
     * class Compression itself.
     *
     * @return  Printing attribute class (category), an instance of class
     *          {@link java.lang.Class java.lang.Class}.
     */
    public final X<? extends X> X()
    {
        return X.class;
    }

    /**
     * Get the name of the category of which this attribute value is an
     * instance.
     * <P>
     * For class Compression and any vendor-defined subclasses, the category
     * name is <CODE>"compression"</CODE>.
     *
     * @return  Attribute category name.
     */
    public final X X()
    {
        return 0;
    }

}
