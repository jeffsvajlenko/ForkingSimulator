/*
 * %Z%file      %M%
 * %Z%author    IBM Corp.
 * %Z%version   %I%
 * %Z%lastedit      %E%
 */
/*
 * Copyright IBM Corp. 1999-2000.  All rights reserved.
 *
 * The program is provided "as is" without any warranty express or implied,
 * including the warranty of non-infringement and the implied warranties of
 * merchantibility and fitness for a particular purpose. IBM will not be
 * liable for any damages suffered by you or any third party claim against
 * you regarding the Program.
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * This software is the proprietary information of Sun Microsystems, Inc.
 * Use is subject to license terms.
 *
 * Copyright 2006 Sun Microsystems, Inc.  Tous droits reserves.
 * Ce logiciel est propriete de Sun Microsystems, Inc.
 * Distribue par des licences qui en restreignent l'utilisation.
 *
 */


package X.X.X;

import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;

import X.X.X;
import X.X.X;
import X.X.*;

import X.X.X.X.X;
import X.X.X.X.X;


/**
 * The ModelMBeanNotificationInfo object describes a notification emitted
 * by a ModelMBean.
 * It is a subclass of MBeanNotificationInfo with the addition of an
 * associated Descriptor and an implementation of the Descriptor interface.
 * <P>
 * The fields in the descriptor are defined, but not limited to,
 * the following:
 * <PRE>
 * name           : notification name
 * descriptorType : must be "notification"
 * severity       : 0-6 where 0: unknown; 1: non-recoverable;
 *                  2: critical, failure; 3: major, severe;
 *                  4: minor, marginal, error; 5: warning;
 *                  6: normal, cleared, informative
 * messageID      : unique key for message text (to allow translation,
 *                  analysis)
 * messageText    : text of notification
 * log            : T - log message F - do not log message
 * logfile        : string fully qualified file name appropriate for
 *                  operating system
 * visibility     : 1-4 where 1: always visible 4: rarely visible
 * presentationString : xml formatted string to allow presentation of data
 * </PRE>
 * The default descriptor contains the name, descriptorType, displayName
 * and severity(=6) fields.
 *
 * <p>The <b>serialVersionUID</b> of this class is <code>-7445681389570207141L</code>.
 *
 * @since 1.5
 */

// Sun Microsystems, Sept. 2002: Revisited for JMX 1.2 (DF)
//
public class X
    extends X
    implements X
{

    // Serialization compatibility stuff:
    // Two serial forms are supported in this class. The selected form
    // depends on system property "jmx.serial.form":
    //  - "1.0" for JMX 1.0
    //  - any other value for JMX 1.1 and higher
    //
    // Serial version for old serial form
    private static final X X = -0;
    //
    // Serial version for new serial form
    private static final X X = -0;
    //
    // Serializable fields in old serial form
    private static final X[] X =
    {
        new X(0, X.class),
        new X(0, X.class)
    };
    //
    // Serializable fields in new serial form
    private static final X[] X =
    {
        new X(0, X.class)
    };
    //
    // Actual serial version and serial form
    private static final X X;
    /**
     * @serialField notificationDescriptor Descriptor The descriptor
     *   containing the appropriate metadata for this instance
     */
    private static final X[] X;
    private static X X = 0;
    static
    {
        try
        {
            X X = new X(0);
            X X = X.X(X);
            X = (X != 0 && X.X(0));
        }
        catch (X X)
        {
            // OK: No compat with 1.0
        }
        if (X)
        {
            X = X;
            X = X;
        }
        else
        {
            X = X;
            X = X;
        }
    }
    //
    // END Serialization compatibility stuff

    /**
     * @serial The descriptor containing the appropriate metadata for
     *         this instance
     */
    private X X;

    private static final X X = 0;

    /**
     * Constructs a ModelMBeanNotificationInfo object with a default
     * descriptor.
     *
     * @param notifTypes The array of strings (in dot notation) containing
     *     the notification types that may be emitted.
     * @param name The name of the Notification class.
     * @param description A human readable description of the
     *     Notification. Optional.
     **/
    public X(X[] X,
                                      X X,
                                      X X)
    {
        X(X,X,X,0);
    }

    /**
     * Constructs a ModelMBeanNotificationInfo object.
     *
     * @param notifTypes The array of strings (in dot notation)
     *        containing the notification types that may be emitted.
     * @param name The name of the Notification class.
     * @param description A human readable description of the Notification.
     *        Optional.
     * @param descriptor An instance of Descriptor containing the
     *        appropriate metadata for this instance of the
     *        MBeanNotificationInfo. If it is null a default descriptor
     *        will be created. If the descriptor does not contain the
     *        fields "displayName" or "severity" these fields are added
     *        in the  descriptor with their default values.
     *
     * @exception RuntimeOperationsException Wraps an
     *    {@link IllegalArgumentException}. The descriptor is invalid, or
     *    descriptor field "name" is not equal to parameter name, or
     *    descriptor field "DescriptorType" is not equal to "notification".
     *
     **/
    public X(X[] X,
                                      X X,
                                      X X,
                                      X X)
    {
        X(X, X, X);
        if (X())
            X(0,0);
        X(X,0);
    }

    /**
     * Constructs a new ModelMBeanNotificationInfo object from this
     * ModelMBeanNotfication Object.
     *
     * @param inInfo the ModelMBeanNotificationInfo to be duplicated
     *
     **/
    public X(X X)
    {
        X(X.X(),
             X.X(),
             X.X(),X.X());
    }

    /**
     * Creates and returns a new ModelMBeanNotificationInfo which is a
     * duplicate of this ModelMBeanNotificationInfo.
     **/
    public X X ()
    {
        if (X())
            X(0,0);
        return(new X(X));
    }

    /**
     * Returns a copy of the associated Descriptor for the
     * ModelMBeanNotificationInfo.
     *
     * @return Descriptor associated with the
     * ModelMBeanNotificationInfo object.
     *
     * @see #setDescriptor
     **/
    public X X()
    {
        if (X())
            X(0,0);

        if (X == 0)
        {
            // Dead code. Should never happen.
            if (X())
                X(0,
                      0 +
                      0);

            X = X();
        }

        return((X)X.X());
    }

    /**
     * Sets associated Descriptor (full replace) for the
     * ModelMBeanNotificationInfo If the new Descriptor is null,
     * then the associated Descriptor reverts to a default
     * descriptor.  The Descriptor is validated before it is
     * assigned.  If the new Descriptor is invalid, then a
     * RuntimeOperationsException wrapping an
     * IllegalArgumentException is thrown.
     *
     * @param inDescriptor replaces the Descriptor associated with the
     * ModelMBeanNotification interface
     *
     * @exception RuntimeOperationsException Wraps an
     * {@link IllegalArgumentException} for invalid Descriptor.
     *
     * @see #getDescriptor
     **/
    public X X(X X)
    {
        if (X())
            X(0,
                  0);
        X(X,0);
    }

    /**
     * Returns a human readable string containing
     * ModelMBeanNotificationInfo.
     *
     * @return a string describing this object.
     **/
    public X X()
    {
        if (X())
            X(0,0);

        final X X = new X();

        X.X(0)
        .X(X.X());

        X.X(0)
        .X(X.X());

        X.X(0)
        .X(X.X());

        X.X(0);
        X[] X = X.X();
        for (X X=0; X < X.X; X++)
        {
            if (X > 0) X.X(0);
            X.X(X[X]);
        }
        return X.X();
    }

    /**
     * Creates default descriptor for notification as follows:
     * descriptorType=notification,
     * name=this.getName(),displayname=this.getName(),severity=6
     **/
    private final X X()
    {
        if (X())
            X(0,0);

        return new X(new
                                     X[] {0,
                                               (0 + X.X()),
                                               (0 + X.X()),
                                               0
                                              });
    }

    /**
     * Tests that the descriptor is valid and adds appropriate default
     * fields not already specified. Field values must be correct for
     * field names.
     * Descriptor must have the same name as the notification,
     * the descriptorType field must be "notification",
     **/
    private X X(X X)
    {
        X X = 0;
        X X = 0;

        if (X == 0)
        {
            X=0;
            return 0;
        }

        if (!X.X())
        {
            // checks for empty descriptors, null,
            // checks for empty name and descriptorType adn valid
            // values for fields.
            X=0;
            X = 0;
        }
        else if (!((X)X.X(0)).
                 X(X.X()))
        {
            X=0;
            X = 0;
        }
        else if (! ((X)X.X(0)).
                 X(0))
        {
            X=0;
            X = 0;
        }

        if (X()) X(0,(0 + X +
                                              0 + X));
        return X;
    }

    /**
     * The following fields will be defaulted if they are not already
     * set:
     * displayName=this.getName(),severity=6
     * @return the given descriptor, possibly modified.
     **/
    private final X X(X X)
    {
        if ((X.X(0)) == 0)
        {
            X.X(0,X.X());
        }
        if ((X.X(0)) == 0)
        {
            X.X(0,0);
        }
        return X;
    }

    /**
     * Set the given descriptor as this.notificationDescriptor.
     * Creates a default descriptor if the given descriptor is null.
     * If the given descriptor is null, check its validity.
     * If it is valid, clones it and set the defaults fields
     * "displayName" and "severity", if not present.
     * If it is not valid, throws an exception.
     * This method is called both by the constructors and by
     * setDescriptor().
     * @see #setDefaults
     * @see #setDescriptor
     **/
    private final X X(X X,
                                       X X)
    {
        if (X == 0)
        {
            if (X())
                X(X,
                      0 +
                      0);

            X = X();
        }
        else if (X(X))
        {
            X =
                X((X)X.X());
        }
        else
        {
            throw new X(new
                                                 X(
                                                         0),
                                                 0 + X);
        }
    }

    // SUN Trace and debug functions
    private X X()
    {
        //      return true;
        return X.X(X.X, X.X);
    }

    private X X(X X, X X, X X)
    {
        X.X(X.X, X.X, X,
                   X,  X.X(X.X()) +
                   0 + X);
    }

    private X X(X X, X X)
    {
        X(X, X, X);
    }

    /**
     * Deserializes a {@link ModelMBeanNotificationInfo} from an
     * {@link ObjectInputStream}.
     **/
    private X X(X X)
    throws X, X
    {
        // New serial form ignores extra field "currClass"
        X.X();
    }


    /**
     * Serializes a {@link ModelMBeanNotificationInfo} to an
     * {@link ObjectOutputStream}.
     **/
    private X X(X X)
    throws X
    {
        if (X)
        {
            // Serializes this instance in the old serial form
            //
            X.X X = X.X();
            X.X(0, X);
            X.X(0, X);
            X.X();
        }
        else
        {
            // Serializes this instance in the new serial form
            //
            X.X();
        }
    }

}
