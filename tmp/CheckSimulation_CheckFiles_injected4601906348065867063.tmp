package X.X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X.X;

import X.X.X.X.X.X;

public class X extends X implements X {
    public static final X X = 0;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X;
    public X [] X = 0;
    public X X;
    public X X;
    public X X;
    public X X;
    public X X = 0;

    public X () {
        X (0, X, 0, 0, 0);
    }

    public X X () {
        return 0;
    }

    public X X (X X) {
        if (X.X (X)) {
            return X ();
        } else if (X.X (X, X.X)) {
            return X ();
        } else {
            throw new X (X.X (0));
        }

    }

    private X X (X [] X) {
        try {
            return new X (X, 0);
        } catch (X X) {
            return 0;
        }
    }

    private X X () {
        X X = new X (X);
        X (X, 0, X);
        X (X, 0, new X (X));
        X (X, 0, new X (X), X);
        X (X, 0, new X (X));
        X (X, 0, new X (X));
        X (X, 0, new X (X));
        X X = X (X, 0, 0);
        X (X, X, 0, new X (X));
        X (X, 0, new X (X));
        X (X, 0, new X (X), X, X);
        X (X, 0, new X (X));
        X X = 0;
        for (X X = 0;
        X < X.X (); X ++) if (X.X (X.X (X), X)) X = X.X (X) - 0;

        if (X >= 0) {
            X = X (X, 0, 0, X);
            X (X, 0, new X (X), X);
            X (X, 0, new X (X));
            X (X, 0, new X (X));
            X (X, 0, new X (X));
            X (X, X, 0, new X (X));
            X = X (X, 0, 0);
            X (X, 0, X, X, X);
            X (X, 0, X, X, X);
            X (X, 0, X, X, X, X);
            X = X (X, 0, new X (X));
        }
        if ((X != 0) && (X > 0)) {
            X = X (X, X, 0, 0);
            X X = X.X / X;
            for (X X = 0, X = 0;
            X < X; X ++) {
                X X = X (X, 0, 0);
                X = X [X ++] & 0;
                X = X [X ++] & 0;
                X = X [X ++] & 0;
                X (X, 0, new X ((X) X));
                X (X, 0, new X ((X) X));
                X (X, 0, new X ((X) X));
                if (X == 0) X (X, 0, new X ((X) (X [X ++] & 0)));

            }
        }
        return X;
    }

    protected X X () {
        if ((X != 0) && (X > 0)) {
            X X = new X (0);
            X X = new X (0);
            X X = X.X / X;
            X.X (0, 0 + X);
            for (X X = 0, X = 0;
            X < X; X ++) {
                X X = new X (0, X);
                X.X (0, 0 + X);
                X.X (0, 0 + X [X ++]);
                X.X (0, 0 + X [X ++]);
                X.X (0, 0 + X [X ++]);
                if (X == 0 && X [X] != 0) X.X (0, 0 + X [X ++]);

                X.X (X);
            }
            X.X (X);
            return X;
        }
        return 0;
    }

    protected X X () {
        X X = new X (0);
        X X = new X (0);
        X.X (0, X [X]);
        X.X (X);
        return X;
    }

    protected X X () {
        X X = new X (0, X);
        X X = 0;
        if (X == 0) X = 0;
        else if (X == 0 || X == 0) {
            X = 0 + X (X) + 0 + X (X) + X (X) + 0 + X (X);
        }

        X X = new X (0);
        X.X (0, X);
        X.X (X);
        return X;
    }

    protected X X () {
        if (X > 0 && X > 0) {
            X X = new X (0);
            X X = X / X;
            X X = new X (0);
            X.X (0, 0 + X);
            X.X (X);
            X = new X (X, 0);
            X.X (0, 0 + (0 / X * 0));
            X.X (X);
            X = new X (0);
            X.X (0, 0 + (0 / X * 0));
            X.X (X);
            return X;
        }
        return 0;
    }

    public X X (X X, X X) {
        throw new X (X.X (0));
    }

    public X X (X X, X X) {
        throw new X (X.X (0));
    }

    public X X () {
        throw new X (X.X (0));
    }

    private X X (X X) {
        X X = 0;
        while (X > 0) {
            if ((X & 0) == 0) X ++;

            X>>>= 0;
        }
        return X == 0 ? 0 : 0 + X;
    }

    private X X (X X, X X, X X, X X, X X) {
        X X = X (X, X, 0);
        X (X, 0, new X (X, X));
        X (X, X, 0, new X (X));
        X (X, 0, new X (X));
    }

    private X X (X X, X X, X X) {
        X X = new X (X);
        if (X != 0) {
            X.X (X);
            X.X (X.X (X));
        }
        X.X (X);
        return X;
    }

}

