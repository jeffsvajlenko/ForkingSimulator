package X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.*;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.*;

import X.X.X.X.X;

import X.X.X.X.X;

public class X extends X implements X {
    private static final X X = 0;
    private static final X X = 0;
    private static final X [] X = {new X (0), new X (0, X.class)};
    private static final X [] X = {new X ()};
    private static final X X;
    private static final X [] X;
    private static X X = 0;

    static {
        try {
            X X = new X (0);
            X X = X.X (X);
            X = (X != 0 && X.X ());
        } catch (X X) {
        }
        if (X) {
            X = X;
            X = X;
        } else {
            X = X;
            X = X;
        }
    }

    private X X = X ();
    private final static X X = 0;

    public X (X X, X X, X X, X X) throws X.X.X {
        X (X, X, X, X);
        if (X ()) {
            X (0);
        }
        X = X ();
    }

    public X (X X, X X, X X, X X, X X) throws X.X.X {
        X (X, X, X, X);
        if (X ()) {
            X (0 + X + 0);
        }
        if (X == 0) {
            X = X ();
        } else {
            if (X ()) {
                X = (X) X.X ();
            } else {
                throw new X (new X (), (0));
            }
        }
    }

    public X (X X, X X, X X, X X, X X, X X) {
        X (X, X, X, X, X, X);
        if (X ()) {
            X ();
        }
        X = X ();
    }

    public X (X X, X X, X X, X X, X X, X X, X X) {
        X (X, X, X, X, X, X);
        if (X ()) {
            X ();
        }
        if (X == 0) {
            X = X ();
        } else {
            if (X (X)) {
                X = (X) X.X ();
            } else {
                throw new X ();
            }
        }
    }

    public X () {
        X (X.X (), X.X (), X.X (), X.X (), X.X (), X.X ());
        if (X ()) {
            X ();
        }
        X X = X.X ();
        if ((X != 0) && (X ())) {
            X = X;
        } else {
            X = X ();
        }
    }

    public X X () {
        if (X ()) {
            X ();
        }
        if (X == 0) {
            X = X ();
        }
        return ((X) X.X ());
    }

    public X X () {
        if (X != 0) {
            if (X ()) {
                X ();
            }
        }
        if (X == 0) {
            if (X ()) {
                X (0, 0);
            }
            X = X ();
        } else {
            if (X ()) {
                X = (X) X.X ();
            } else {
                throw new X (new X (0), (0));
            }
        }
    }

    public X X () {
        if (X ()) {
            X (0);
        }
        return (new X ());
    }

    public X X () {
        return 0 + X.X () + 0 + X.X () + 0 + X.X () + 0 + X.X () + 0 + X.X () + 0 + X.X ();
    }

    private X X () {
        if (X ()) {
            X (0);
        }
        return new X (new X [] {0, (0 + X.X ()), (0 + X.X ())});
    }

    private X X () {
        X X = 0;
        X X = 0;
        if (X == 0) {
            X = 0;
            X = 0;
        } else if (! X.X ()) {
            X = 0;
            X = 0;
        } else if (! ((X) X.X ()).X ()) {
            X = 0;
            X = 0;
        } else {
            if (! ((X) X.X (0)).X ()) {
                X = 0;
                X = 0;
            } else if ((X.X ()) == 0) {
                X.X (X.X ());
            }

        }

        if (X ()) X (0, (0 + X + 0 + X));

        return X;
    }

    private X X () {
        return X.X ();
    }

    private X X (X X) {
        X.X (X.X, X.X, X, X, X.X (X.X ()) + 0 + X);
    }

    private X X () {
        X ();
    }

    private X X () throws X, X {
        X.X ();
    }

    private X X () throws X {
        if (X) {
            X.X X = X.X ();
            X.X ();
            X.X ();
            X.X ();
        } else {
            X.X ();
        }
    }

}

