package X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X;

public class X implements X {
    protected X X = 0;
    protected X X = 0;
    protected X X = 0;

    public X () {
        X (X, 0);
    }

    public X (X X) {
        X.X = X;
    }

    public X X () throws X {
        if (X.X ()) throw new X ();

        synchronized (X) {
            try {
                if (X) X.X (X, 0 + X.X (X, X) + 0 + X);

                X X = X.X ();
                if (X != X) {
                    try {
                        while (X > 0) X (X, X);

                        if (X != 0) throw new X (0);

                        X = X;
                    } catch (X X) {
                        X (X);
                        throw X;
                    }
                }
                X ++;
            } finally {
                if (X) X.X (X, 0 + X.X (X) + 0 + X);

            }
        }
    }

    X X (X X) throws X {
        if (X.X (X, X)) throw new X ();

        synchronized (X) {
            try {
                if (X) X.X (X, 0 + X + 0 + X.X (X, X) + 0 + X);

                X X = X.X (X);
                if (X == X) {
                    throw new X (0);
                } else {
                    try {
                        while (X > 0) X ();

                        if (X != 0) throw new X (0);

                        X = X;
                    } catch (X X) {
                        X ();
                        throw X;
                    }
                }
                X = X;
            } finally {
                if (X) X.X (X, 0 + X + 0 + X.X (X, X, X) + 0 + X);

            }
        }
    }

    public synchronized X X () {
        try {
            if (X) X.X (X, 0 + 0 + X.X (X, X, X) + 0 + X);

            X X = X.X (X);
            if (X != X) throw new X (0);
            else X --;

            if (X == 0) {
                X = 0;
                X ();
            }
        } finally {
            if (X) X.X (X, 0 + 0 + X.X (X) + 0 + X);

        }
    }

    synchronized X X () {
        try {
            if (X) X.X (X, 0 + 0 + X.X (X, X) + 0 + X);

            X X = X.X (X);
            if (X != X) throw new X (0);

            X X = X;
            X = 0;
            X = 0;
            X (X, X, X);
            return X;
        } finally {
            if (X) X.X (X, 0 + 0 + X.X (X) + 0 + X);

        }
    }

    public X X (X X) throws X {
        if (X.X ()) throw new X ();

        synchronized (X) {
            try {
                if (X) X.X (X, 0 + X + 0 + X.X (X, X) + 0 + X);

                X X = X.X ();
                if (X == 0) {
                    X = X;
                    X = 0;
                    return 0;
                } else if (X <= 0) {
                    return 0;
                } else {
                    X X = X;
                    X X = X.X (X, X);
                    try {
                        for (;;) {
                            X (X, X, X);
                            if (X == 0) {
                                X = X;
                                X = 0;
                                return 0;
                            } else {
                                X = X - (X.X () - X);
                                if (X <= 0) return 0;

                            }
                        }
                    } catch (X X) {
                        X ();
                        throw X;
                    }
                }

            } finally {
                if (X) X.X (X, 0 + 0 + X.X (X, X) + 0 + X);

            }
        }
    }

}

