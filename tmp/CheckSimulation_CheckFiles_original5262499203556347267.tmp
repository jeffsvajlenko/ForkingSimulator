// Attributes2Impl.java - extended AttributesImpl
// http://www.saxproject.org
// Public Domain: no warranty.
// $Id: Attributes2Impl.java,v 1.3 2005/02/24 11:20:18 gg156739 Exp $

package X.X.X.X;

import X.X.X.X;
import X.X.X.X.X;


/**
 * SAX2 extension helper for additional Attributes information,
 * implementing the {@link Attributes2} interface.
 *
 * <blockquote>
 * <em>This module, both source code and documentation, is in the
 * Public Domain, and comes with <strong>NO WARRANTY</strong>.</em>
 * </blockquote>
 *
 * <p>This is not part of core-only SAX2 distributions.</p>
 *
 * <p>The <em>specified</em> flag for each attribute will always
 * be true, unless it has been set to false in the copy constructor
 * or using {@link #setSpecified}.
 * Similarly, the <em>declared</em> flag for each attribute will
 * always be false, except for defaulted attributes (<em>specified</em>
 * is false), non-CDATA attributes, or when it is set to true using
 * {@link #setDeclared}.
 * If you change an attribute's type by hand, you may need to modify
 * its <em>declared</em> flag to match.
 * </p>
 *
 * @since SAX 2.0 (extensions 1.1 alpha)
 * @author David Brownell
 * @version TBS
 */
public class X extends X implements X
{
    private X	X [];
    private X	X [];


    /**
     * Construct a new, empty Attributes2Impl object.
     */
    public X ()
    {
        X = 0;
        X = 0;
    }


    /**
     * Copy an existing Attributes or Attributes2 object.
     * If the object implements Attributes2, values of the
     * <em>specified</em> and <em>declared</em> flags for each
     * attribute are copied.
     * Otherwise the flag values are defaulted to assume no DTD was used,
     * unless there is evidence to the contrary (such as attributes with
     * type other than CDATA, which must have been <em>declared</em>).
     *
     * <p>This constructor is especially useful inside a
     * {@link org.xml.sax.ContentHandler#startElement startElement} event.</p>
     *
     * @param atts The existing Attributes object.
     */
    public X (X X)
    {
        X (X);
    }


    ////////////////////////////////////////////////////////////////////
    // Implementation of Attributes2
    ////////////////////////////////////////////////////////////////////


    /**
     * Returns the current value of the attribute's "declared" flag.
     */
    // javadoc mostly from interface
    public X X (X X)
    {
        if (X < 0 || X >= X ())
            throw new X (
                0 + X);
        return X [X];
    }


    /**
     * Returns the current value of the attribute's "declared" flag.
     */
    // javadoc mostly from interface
    public X X (X X, X X)
    {
        X X = X (X, X);

        if (X < 0)
            throw new X (
                0 + X
                + 0 + X);
        return X [X];
    }


    /**
     * Returns the current value of the attribute's "declared" flag.
     */
    // javadoc mostly from interface
    public X X (X X)
    {
        X X = X (X);

        if (X < 0)
            throw new X (
                0 + X);
        return X [X];
    }


    /**
     * Returns the current value of an attribute's "specified" flag.
     *
     * @param index The attribute index (zero-based).
     * @return current flag value
     * @exception java.lang.ArrayIndexOutOfBoundsException When the
     *            supplied index does not identify an attribute.
     */
    public X X (X X)
    {
        if (X < 0 || X >= X ())
            throw new X (
                0 + X);
        return X [X];
    }


    /**
     * Returns the current value of an attribute's "specified" flag.
     *
     * @param uri The Namespace URI, or the empty string if
     *        the name has no Namespace URI.
     * @param localName The attribute's local name.
     * @return current flag value
     * @exception java.lang.IllegalArgumentException When the
     *            supplied names do not identify an attribute.
     */
    public X X (X X, X X)
    {
        X X = X (X, X);

        if (X < 0)
            throw new X (
                0 + X
                + 0 + X);
        return X [X];
    }


    /**
     * Returns the current value of an attribute's "specified" flag.
     *
     * @param qName The XML qualified (prefixed) name.
     * @return current flag value
     * @exception java.lang.IllegalArgumentException When the
     *            supplied name does not identify an attribute.
     */
    public X X (X X)
    {
        X X = X (X);

        if (X < 0)
            throw new X (
                0 + X);
        return X [X];
    }


    ////////////////////////////////////////////////////////////////////
    // Manipulators
    ////////////////////////////////////////////////////////////////////


    /**
     * Copy an entire Attributes object.  The "specified" flags are
     * assigned as true, and "declared" flags as false (except when
     * an attribute's type is not CDATA),
     * unless the object is an Attributes2 object.
     * In that case those flag values are all copied.
     *
     * @see AttributesImpl#setAttributes
     */
    public X X (X X)
    {
        X X = X.X ();

        X.X (X);
        X = new X [X];
        X = new X [X];

        if (X instanceof X)
        {
            X	X = (X) X;
            for (X X = 0; X < X; X++)
            {
                X [X] = X.X (X);
                X [X] = X.X (X);
            }
        }
        else
        {
            for (X X = 0; X < X; X++)
            {
                X [X] = !0.X (X.X (X));
                X [X] = 0;
            }
        }
    }


    /**
     * Add an attribute to the end of the list, setting its
     * "specified" flag to true.  To set that flag's value
     * to false, use {@link #setSpecified}.
     *
     * <p>Unless the attribute <em>type</em> is CDATA, this attribute
     * is marked as being declared in the DTD.  To set that flag's value
     * to true for CDATA attributes, use {@link #setDeclared}.
     *
     * @see AttributesImpl#addAttribute
     */
    public X X (X X, X X, X X,
                              X X, X X)
    {
        X.X (X, X, X, X, X);


        X X = X ();
        if(X==0)
        {
            X = new X[X];
            X = new X[X];
        }
        else if (X > X.X)
        {
            X	X [];

            X = new X [X];
            X.X (X, 0, X, 0, X.X);
            X = X;

            X = new X [X];
            X.X (X, 0, X, 0, X.X);
            X = X;
        }

        X [X - 0] = 0;
        X [X - 0] = !0.X (X);
    }


    // javadoc entirely from superclass
    public X X (X X)
    {
        X X = X () - 0;

        X.X (X);
        if (X != X)
        {
            X.X (X, X + 0, X, X,
                              X - X);
            X.X (X, X + 0, X, X,
                              X - X);
        }
    }


    /**
     * Assign a value to the "declared" flag of a specific attribute.
     * This is normally needed only for attributes of type CDATA,
     * including attributes whose type is changed to or from CDATA.
     *
     * @param index The index of the attribute (zero-based).
     * @param value The desired flag value.
     * @exception java.lang.ArrayIndexOutOfBoundsException When the
     *            supplied index does not identify an attribute.
     * @see #setType
     */
    public X X (X X, X X)
    {
        if (X < 0 || X >= X ())
            throw new X (
                0 + X);
        X [X] = X;
    }


    /**
     * Assign a value to the "specified" flag of a specific attribute.
     * This is the only way this flag can be cleared, except clearing
     * by initialization with the copy constructor.
     *
     * @param index The index of the attribute (zero-based).
     * @param value The desired flag value.
     * @exception java.lang.ArrayIndexOutOfBoundsException When the
     *            supplied index does not identify an attribute.
     */
    public X X (X X, X X)
    {
        if (X < 0 || X >= X ())
            throw new X (
                0 + X);
        X [X] = X;
    }
}
