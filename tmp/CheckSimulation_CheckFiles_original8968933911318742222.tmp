// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package X.X.X.X;

public final class X
    extends X.X.X.X
    implements X.X.X.X.X
{
    private static final X X = 0;

    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;
    private static X.X.X.X X;

    static
    {
        try
        {
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X[].class, X.X.X[].class, X.X.X.X[].class});
            X = X.X.X.class.X(0, new X.X.X[] {});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.class, X.X.X[].class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.class, X.X.X.class, X.X.X[].class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.class, X.class, X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X[].class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.class, X.X.X[].class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X[].class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.class, X.X.X.X.class});
            X = X.X.X.X.X.class.X(0, new X.X.X[] {X.X.X.class, X.X.X.X.class});
        }
        catch (X.X.X X)
        {
            throw new X.X.X(
                0);
        }
    }

    // constructors
    public X(X.X.X.X X)
    {
        X(X);
    }

    // methods from remote interfaces

    // implementation of addNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)
    public X X(X.X.X X, X.X.X X, X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X
    {
        try
        {
            X.X(X, X, new X.X.X[] {X, X, X, X, X}, -0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])
    public X.X.X[] X(X.X.X[] X, X.X.X[] X, X.X.X.X[] X)
    throws X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, -0);
            return ((X.X.X[]) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of close()
    public X X()
    throws X.X.X
    {
        try
        {
            X.X(X, X, 0, -0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of createMBean(String, ObjectName, MarshalledObject, String[], Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X X, X.X.X[] X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X, X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of createMBean(String, ObjectName, ObjectName, MarshalledObject, String[], Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X X, X.X.X X, X.X.X[] X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X, X, X, X}, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of createMBean(String, ObjectName, ObjectName, Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X, X}, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of createMBean(String, ObjectName, Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of fetchNotifications(long, int, long)
    public X.X.X.X X(X X, X X, X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {new X.X.X(X), new X.X.X(X), new X.X.X(X)}, -0);
            return ((X.X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getAttribute(ObjectName, String, Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getAttributes(ObjectName, String[], Subject)
    public X.X.X X(X.X.X X, X.X.X[] X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getConnectionId()
    public X.X.X X()
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, 0, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getDefaultDomain(Subject)
    public X.X.X X(X.X.X.X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getDomains(Subject)
    public X.X.X[] X(X.X.X.X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X}, -0);
            return ((X.X.X[]) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getMBeanCount(Subject)
    public X.X.X X(X.X.X.X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X}, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getMBeanInfo(ObjectName, Subject)
    public X.X.X X(X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X}, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of getObjectInstance(ObjectName, Subject)
    public X.X.X X(X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of invoke(ObjectName, String, MarshalledObject, String[], Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X X, X.X.X[] X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X, X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of isInstanceOf(ObjectName, String, Subject)
    public X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, -0);
            return ((X.X.X) X).X();
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of isRegistered(ObjectName, Subject)
    public X X(X.X.X X, X.X.X.X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X}, 0);
            return ((X.X.X) X).X();
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of queryMBeans(ObjectName, MarshalledObject, Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of queryNames(ObjectName, MarshalledObject, Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, 0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of removeNotificationListener(ObjectName, ObjectName, MarshalledObject, MarshalledObject, Subject)
    public X X(X.X.X X, X.X.X X, X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X
    {
        try
        {
            X.X(X, X, new X.X.X[] {X, X, X, X, X}, 0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of removeNotificationListener(ObjectName, ObjectName, Subject)
    public X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X
    {
        try
        {
            X.X(X, X, new X.X.X[] {X, X, X}, 0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of removeNotificationListeners(ObjectName, Integer[], Subject)
    public X X(X.X.X X, X.X.X[] X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X
    {
        try
        {
            X.X(X, X, new X.X.X[] {X, X, X}, 0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of setAttribute(ObjectName, MarshalledObject, Subject)
    public X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X, X.X.X, X.X.X, X.X.X
    {
        try
        {
            X.X(X, X, new X.X.X[] {X, X, X}, 0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of setAttributes(ObjectName, MarshalledObject, Subject)
    public X.X.X X(X.X.X X, X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X
    {
        try
        {
            X X = X.X(X, X, new X.X.X[] {X, X, X}, -0);
            return ((X.X.X) X);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }

    // implementation of unregisterMBean(ObjectName, Subject)
    public X X(X.X.X X, X.X.X.X X)
    throws X.X.X, X.X.X, X.X.X
    {
        try
        {
            X.X(X, X, new X.X.X[] {X, X}, -0);
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw X;
        }
        catch (X.X.X X)
        {
            throw new X.X.X(0, X);
        }
    }
}
