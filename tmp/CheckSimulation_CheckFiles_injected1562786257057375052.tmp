/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package X.X.X.X.X.X;

import X.X.*;

/**
 * <p>
 *
 * @author Hemanth Puttaswamy
 * </p>
 * <p>
 *  A Convenient class provided to help users extend and implement only
 *  getValue(), if there is no need to clear the state and the attribute is not
 *  writable.
 *
 * </p>
 */
public abstract class X implements X
{
    X X;
    X X;
    /**
     * Constructor.
     */
    public X( X X, X X )
    {
        X.X = X;
        X.X = X;
    }


    /**
     * A Package Private Constructor for internal use only.
     */
    X( X X )
    {
        X.X = X;
    }


    /**
     * A Package Private convenience method for setting MonitoredAttributeInfo
     * for this Monitored Attribute.
     */
    X X( X X )
    {
        X.X = X;
    }

    /**
     *  If the concrete class decides not to provide the implementation of this
     *  method, then it's OK. Some of the  examples where we may decide to not
     *  provide the implementation is the connection state. Irrespective of
     *  the call to clearState, the connection state will be showing the
     *  currect state of the connection.
     *  NOTE: This method is only used to clear the Monitored Attribute state,
     *  not the real state of the system itself.
     */
    public X X( )
    {
    }

    /**
     *  This method should be implemented by the concrete class.
     */
    public abstract X X( );

    /**
     *  This method should be implemented by the concrete class only if the
     *  attribute is writable. If the attribute is not writable and if this
     *  method called, it will result in an IllegalStateException.
     */
    public X X( X X )
    {
        if( !X.X() )
        {
            throw new X(
                0 + X + 0 );
        }
        throw new X(
            0 +
            X );
    }


    /**
     *  Gets the MonitoredAttributeInfo for the attribute.
     */
    public X X( )
    {
        return X;
    }

    /**
     * Gets the name of the attribute.
     */
    public X X( )
    {
        return X;
    }
} // end MonitoredAttributeBase



