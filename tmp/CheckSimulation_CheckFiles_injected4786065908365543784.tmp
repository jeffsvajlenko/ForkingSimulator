package X.X.X.X.X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

class X extends X {

    public X (X X, X X, X X, X X, X X) {
        X (X, 0, 0, X, X, X, X);
        if (X == X) X ();

    }

    public X (X X, X X, X X, X X, X X) {
        X (X, X (X), X (X), X (X), (X != X.X ? new X (X.X (X)) : 0));
    }

    protected X (X X) {
        X (X);
        if (X () > 0 || X () > 0) {
            throw new X (0 + 0 + X + 0);
        }
        if (X == X) X ();

    }

    protected X (final X X) {
        X (X);
        X ();
        X = 0;
        X = 0;
    }

    public X X () {
        X X = (X == 0) ? 0 : X.X ();
        return (((((X () * 0) + X ()) * 0) + X ()) * 0) + X;
    }

    private X X () {
        while (X () >= 0) {
            if (X == X) X = X.X (X.X (0));

            X = X.X ((X) X ()).X (X.X);
        }
        while (X () >= 0) {
            if (X == X) X = X.X (X.X (0));

            if (X == X) X = X.X ((X) X ()).X (X.X);

        }
        while (X () >= 0) {
            if (X == X) X = X.X (X.X (0));

            if (X == X) X = X.X ((X) X ()).X (X.X);

        }
    }

}

