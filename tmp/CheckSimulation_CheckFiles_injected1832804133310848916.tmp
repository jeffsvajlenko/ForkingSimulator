/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package X.X.X.X;

import X.X.X;
import X.X.X;

/**
 * This class represents a single <code>LoginModule</code> entry
 * configured for the application specified in the
 * <code>getAppConfigurationEntry(String appName)</code>
 * method in the <code>Configuration</code> class.  Each respective
 * <code>AppConfigurationEntry</code> contains a <code>LoginModule</code> name,
 * a control flag (specifying whether this <code>LoginModule</code> is
 * REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL), and LoginModule-specific
 * options.  Please refer to the <code>Configuration</code> class for
 * more information on the different control flags and their semantics.
 *
 * @version %I%, %G%
 * @see javax.security.auth.login.Configuration
 */
public class X
{

    private X X;
    private X X;
    private X X;

    /**
     * Default constructor for this class.
     *
     * <p> This entry represents a single <code>LoginModule</code>
     * entry configured for the application specified in the
     * <code>getAppConfigurationEntry(String appName)</code>
     * method from the <code>Configuration</code> class.
     *
     * @param loginModuleName String representing the class name of the
     *			<code>LoginModule</code> configured for the
     *			specified application. <p>
     *
     * @param controlFlag either REQUIRED, REQUISITE, SUFFICIENT,
     *			or OPTIONAL. <p>
     *
     * @param options the options configured for this <code>LoginModule</code>.
     *
     * @exception IllegalArgumentException if <code>loginModuleName</code>
     *			is null, if <code>LoginModuleName</code>
     *			has a length of 0, if <code>controlFlag</code>
     *			is not either REQUIRED, REQUISITE, SUFFICIENT
     *			or OPTIONAL, or if <code>options</code> is null.
     */
    public X(X X,
                                 X X,
                                 X<X,?> X)
    {
        if (X == 0 || X.X() == 0 ||
                (X != X.X &&
                 X != X.X &&
                 X != X.X &&
                 X != X.X) ||
                X == 0)
            throw new X();

        X.X = X;
        X.X = X;
        X.X = X.X(X);
    }

    /**
     * Get the class name of the configured <code>LoginModule</code>.
     *
     * @return the class name of the configured <code>LoginModule</code> as
     *		a String.
     */
    public X X()
    {
        return X;
    }

    /**
     * Return the controlFlag
     * (either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL)
     * for this <code>LoginModule</code>.
     *
     * @return the controlFlag
     *		(either REQUIRED, REQUISITE, SUFFICIENT, or OPTIONAL)
     *		for this <code>LoginModule</code>.
     */
    public X X()
    {
        return X;
    }

    /**
     * Get the options configured for this <code>LoginModule</code>.
     *
     * @return the options configured for this <code>LoginModule</code>
     *		as an unmodifiable <code>Map</code>.
     */
    public X<X,?> X()
    {
        return X;
    }

    /**
     * This class represents whether or not a <code>LoginModule</code>
     * is REQUIRED, REQUISITE, SUFFICIENT or OPTIONAL.
     */
    public static class X
    {

        private X X;

        /**
         * Required <code>LoginModule</code>.
         */
        public static final X X =
            new X(0);

        /**
         * Requisite <code>LoginModule</code>.
         */
        public static final X X =
            new X(0);

        /**
         * Sufficient <code>LoginModule</code>.
         */
        public static final X X =
            new X(0);

        /**
         * Optional <code>LoginModule</code>.
         */
        public static final X X =
            new X(0);

        private X(X X)
        {
            X.X = X;
        }

        /**
         * Return a String representation of this controlFlag.
         *
         * <p> The String has the format, "LoginModuleControlFlag: <i>flag</i>",
         * where <i>flag</i> is either <i>required</i>, <i>requisite</i>,
         * <i>sufficient</i>, or <i>optional</i>.
         *
         * @return a String representation of this controlFlag.
         */
        public X X()
        {
            return (X.X.X.X.X
                    (0) + X);
        }
    }
}
