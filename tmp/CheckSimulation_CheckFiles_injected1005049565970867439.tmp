package org.apache.commons.io.filefilter;

import java.io.File;

import java.io.Serializable;

import java.util.ArrayList;

import java.util.Collections;

import java.util.List;

public class AndFileFilter extends AbstractFileFilter implements ConditionalFileFilter, Serializable {
    private final List < IOFileFilter > fileFilters;

    public AndFileFilter () {
        this.fileFilters = new ArrayList < IOFileFilter > ();
    }

    public AndFileFilter (final List < IOFileFilter > fileFilters) {
        if (fileFilters == null) {
            this.fileFilters = new ArrayList < IOFileFilter > ();
        } else {
            this.fileFilters = new ArrayList < IOFileFilter > (fileFilters);
        }
    }

    public AndFileFilter (IOFileFilter filter1, IOFileFilter filter2) {
        if (filter1 == null || filter2 == null) {
            throw new IllegalArgumentException ("The filters must not be null");
        }
        this.fileFilters = new ArrayList < IOFileFilter > (2);
        addFileFilter (filter1);
        addFileFilter (filter2);
    }

    public void addFileFilter (final IOFileFilter ioFileFilter) {
        this.fileFilters.add (ioFileFilter);
    }

    public List < IOFileFilter > getFileFilters () {
        return Collections.unmodifiableList (this.fileFilters);
    }

    public boolean removeFileFilter (final IOFileFilter ioFileFilter) {
        return this.fileFilters.remove (ioFileFilter);
    }

    public void setFileFilters (final List < IOFileFilter > fileFilters) {
        this.fileFilters.clear ();
        this.fileFilters.addAll (fileFilters);
    }

    @Override
    public boolean accept (final File file) {
        if (this.fileFilters.isEmpty ()) {
            return false;
        }
        for (IOFileFilter fileFilter : fileFilters) {
            if (! fileFilter.accept (file)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public boolean accept (final File file, final String name) {
        if (this.fileFilters.isEmpty ()) {
            return false;
        }
        for (IOFileFilter fileFilter : fileFilters) {
            if (! fileFilter.accept (file, name)) {
                return false;
            }
        }
        return true;
    }

    @Override
    public String toString () {
        StringBuilder buffer = new StringBuilder ();
        buffer.append (super.toString ());
        buffer.append ("(");
        if (fileFilters != null) {
            for (int i = 0;
            i < fileFilters.size (); i ++) {
                if (i > 0) {
                    buffer.append (",");
                }
                Object filter = fileFilters.get (i);
                buffer.append (filter == null ? "null" : filter.toString ());
            }
        }
        buffer.append (")");
        return buffer.toString ();
    }

}

