package X.X.X.X.X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

public class X implements X.X.X.X {
    private static X X = 0;
    private static X X = new X ();
    private static final X X = X.X ().X ();
    private X X = X.X (X.X);
    private static X X = 0;

    public X () {
        X (X, X);
    }

    private static X X (X X) {
        assert X == 0 : 0;
        X = X;
    }

    public static X X () {
        return X;
    }

    public static X X () {
        return X != 0;
    }

    public X X (X.X.X.X X) {
        for (X X = X.X ();
        X.X ();) {
            X.X.X X = X.X ();
            X X = (X) (X instanceof X ? ((X) X).X () : X);
            try {
                if (X == X (X).X ()) {
                    try {
                        X (X, X);
                    } catch (X.X.X X) {
                    }
                }
            } catch (X X) {
            }
        }
    }

    public X X (X X) {
        if (X instanceof X) {
            X X = ((X) X).X;
            if (X instanceof X) {
                return new X (0, (X) X);
            } else if (X instanceof X) {
                return new X (0, (X) X);
            } else if (X instanceof X) {
                throw (X) X;
            }

        }
        X X = X.X ().X ();
        X X = X.X (X.X (0) + 0);
        X X;
        switch (X.X.X ()) {
            case X.X :
                X = 0;
                break;
            case X.X :
                X = 0;
                break;
            case X.X :
            default :
                X = 0;
                break;
        }
        X X = 0 + X + 0 + X.X + 0 + X;
        if (X instanceof X) {
            return new X (X, X, X, X);
        } else if (X instanceof X) {
            X X = new X (X, X);
            X.X = X;
            return X;
        } else if (X instanceof X) {
            return new X (X, X);
        } else if (X instanceof X) {
            return new X (X, X);
        } else if (X instanceof X) {
            X X = new X (X);
            X.X = X;
            return X;
        } else if (X instanceof X) {
            X X = new X (X);
            X.X = X;
            return X;
        } else if (X instanceof X) {
            X X = new X (X);
            X.X = X;
            return X;
        } else if (X instanceof X) {
            X X = new X (X);
            X.X = X;
            return X;
        } else if (X instanceof X) {
            X X = X;
            if (X.X == X.X || X.X == X.X) {
                if (X.X () != 0) X = new X (X.X ());
                else X = new X ();

                X.X (X);
            }
            return new X (X, X);
        } else if (X instanceof X) {
            try {
                X X = X.X (0);
                X [] X = new X [0];
                X [0] = X.X.X.class;
                X [0] = X.X.X.class;
                X X = X.X (X);
                X [] X = new X [0];
                X [0] = X;
                X [0] = X;
                return (X) X.X (X, X, X, X);
            } catch (X X) {
                X.X (X, 0);
            }
        } else if (X instanceof X) {
            try {
                X X = X.X (0);
                X [] X = new X [0];
                X [0] = X.X.X.class;
                X [0] = X.X.X.class;
                X X = X.X (X);
                X [] X = new X [0];
                X [0] = X;
                X [0] = X;
                return (X) X.X (X, X, X);
            } catch (X X) {
                X.X (X, 0);
            }
        } else if (X instanceof X) {
            try {
                X X = X.X (0);
                X [] X = new X [0];
                X [0] = X.X.X.class;
                X [0] = X.X.X.class;
                X X = X.X (X);
                X [] X = new X [0];
                X [0] = X;
                X [0] = X;
                return (X) X.X (X);
            } catch (X X) {
                X.X (X, 0);
            }
        }

        return new X (X, X);
    }

    public X X (X.X.X.X.X X, X.X.X X) {
        X.X.X.X X = X.X (X);
        X X = X.X ();
        X.X.X X = X.X (X, X, 0, X);
        if (X instanceof X.X.X.X) {
            X.X ((X.X.X.X) X);
        } else {
            if (X == 0) {
                X.X (0, X (X, X));
            } else {
                if (X instanceof X) {
                    X X = X ((X) X, X, X);
                    if (X == 0) X.X ((X) X);
                    else X.X (X, X, X, (X) X, X, X);

                } else if (X instanceof X) {
                    X.X (X, X.X ().X (), X);
                } else {
                    X.X (X.X ().X (), X);
                }

            }
        }
        X.X (X);
    }

    private X X (X X, X.X.X.X X, X.X.X.X X) {
        if (X instanceof X.X.X.X.X.X.X && X instanceof X) {
            X.X.X.X.X.X.X X = (X.X.X.X.X.X.X) X;
            X X = (X) X;
            return X.X (X.X (), X);
        } else return 0;

    }

    private X X (X.X.X.X X) {
        if (X instanceof X) {
            X X = (X) X;
            if (! X.X ().X (X.X ()) && X.X ().X (X.X ()) > 0) {
                return X.X (X.X);
            }
        }
        X X = 0;
        return X.X (X, X, 0);
    }

    public X X (X X) {
        X X = X.X ();
        if (X.X (X).X ().X () == X.X) return X.X ();
        else return X.X ();

    }

    public X X (X X, X.X.X X) {
        X X = X.X (X, X.X (), X, X, 0, X, X);
        X.X ((X.X.X.X) X);
    }

    public X X (X X, X.X.X X) {
        X X = X.X (X, X.X (), 0);
        ((X.X.X.X.X) X).X (X);
    }

    public X X (X.X.X.X X, X.X.X X) {
        synchronized (X) {
            if (X (X) == 0) {
                X.X (X, X);
                X.X (X);
                if (X == 0) {
                    X = (X) X.X (new X () {

                        public X.X.X X () {
                            return new X ();
                        }

                    }

                    );
                    X.X ();
                }
            }
        }
    }

    public X X (X.X.X X) throws X.X.X {
        synchronized (X) {
            X X = X (X);
            if (X != 0) {
                X.X (X, X);
                X.X (X);
                X.X (X, X);
                try {
                    X (X);
                } catch (X X) {
                } catch (X.X.X.X X) {
                }
                if (X.X ()) {
                    X.X ();
                    X = 0;
                }
            } else {
                throw new X.X.X (0);
            }
        }
    }

    protected X X (X X) throws X.X.X {
        X.X (0);
        X.X ();
    }

    public X X (X X) {
        synchronized (X) {
            return X (X);
        }
    }

    private static X X (X X) {
        X X = (X) X.X (X);
        if (X == 0 && X instanceof X) {
            if (X.X (X)) {
                X = (X) X;
            }
        }
        return X;
    }

    public X X () {
        return X;
    }

    public X X (X.X.X X) {
        return X.X (X);
    }

    public X X (X X, X X, X X) throws X {
        return X.X (X, X, X, X, X);
    }

    public X X (X.X.X.X X) throws X {
        X X = 0;
        try {
            X.X.X.X.X X = X.X ();
            if (X instanceof X) {
                X X = (X) X;
                X X = X.X ();
                if (X instanceof X) {
                    X X = (X) X;
                    X X = X.X ();
                    X = X.X (0);
                }
            } else {
                X = X.X (X, X, X);
            }
        } catch (X X) {
            throw X.X.X.X.X (X);
        }
        return X;
    }

    public X X (X X) {
        if (X instanceof X) {
            return X ((X) X);
        }
        if (X instanceof X) {
            return new X (0, (X) X);
        } else if (X instanceof X) {
            return new X (0, (X) X);
        } else if (X instanceof X) {
            throw (X) X;
        }

        if (X instanceof X) return new X (X.X (), X, (X) X);
        else return new X (X.X (X));

    }

    public X [] X (X [] X, X.X.X.X X) throws X {
        if (X == 0) throw new X ();

        X X = X.X ().X ();
        if (X.class.X (X, X) && ! X.X ()) {
            X [] X = new X [X.X];
            X.X ((X) X, 0, X, (X) X, 0, X.X, X);
            return (X []) X (X, X, X);
        } else return (X []) X (X, X);

    }

    public X X (X X, X.X.X.X X) throws X {
        if (X instanceof X) {
            X X = (X) X;
            try {
                try {
                    return X.X ().X ().X ().X (X);
                } catch (X.X.X X) {
                    X X = X.X ();
                    X X = X.X ().X ();
                    return X.X (X);
                }
            } catch (X X) {
                X X = new X ();
                X.X (X);
                throw X;
            }
        } else {
            X.X.X.X.X X = (X.X.X.X.X) X.X ();
            X.X ((X) X);
            X.X.X.X.X X = (X.X.X.X.X) X.X ();
            return X.X (X);
        }
    }

}

class X extends X {
    X X = 0;

    public X () {
        X (0, X);
    }

    public synchronized X X () {
        while (! X) {
            try {
                X ();
            } catch (X X) {
            }
        }
    }

    public synchronized X X () {
        X = 0;
        X (X);
    }

}

