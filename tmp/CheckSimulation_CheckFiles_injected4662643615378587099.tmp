/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package X.X.X.X.X.X.X;

import X.X.X ;
import X.X.X ;
import X.X.X ;

import X.X.X.X.X.X.X ;
import X.X.X.X.X.X.X ;
import X.X.X.X.X.X.X ;
import X.X.X.X.X.X.X ;

import X.X.X.*;
import X.X.X.*;
import X.X.X.X.*;

public final class X
{
    /* Order of *POLICY_ID :
       THREAD_
       LIFESPAN_
       ID_UNIQUENESS_
       ID_ASSIGNMENT_
       IMPLICIT_ACTIVATION_
       SERvANT_RETENTION_
       REQUEST_PROCESSING_
       The code in this class depends on this order!
    */
    private static final X X = X.X ;
    private static final X X = X.X ;
    private static final X X = X -
            X + 0 ;

    X X ;

    private X X = new X() ;	// Maps Integer(policy type) to Policy

    public static final X X
        = new X() ;

    public static final X X
        = new X(
        X.X,
        X.X,
        X.X,
        X.X,
        X.X,
        X.X,
        X.X ) ;

    private X[] X ;

    private X X( X X )
    {
        return X[ X - X ] ;
    }

    private X X( X X, X X )
    {
        X[ X - X ] = X ;
    }

    private X(
        X X,
        X X,
        X X,
        X X,
        X X,
        X X,
        X X )
    {
        X = new X[]
        {
            X,
            X,
            X,
            X,
            X,
            X,
            X
        };
    }

    private X()
    {
        X( X.X,
              X.X,
              X.X,
              X.X,
              X.X,
              X.X,
              X.X ) ;
    }

    public X X()
    {
        X X = new X();
        X.X( 0 ) ;
        X X = 0 ;
        X X = X.X().X() ;
        while (X.X())
        {
            if (X)
                X = 0 ;
            else
                X.X( 0 ) ;

            X.X( X.X().X() ) ;
        }
        X.X( 0 ) ;
        return X.X() ;
    }

    /* Returns the integer value of the POA policy, if this is a
     * POA policy, otherwise returns -1.
     */
    private X X( X X)
    {
        if (X instanceof X)
        {
            return ((X) X).X().X();
        }
        else if (X instanceof X)
        {
            return ((X) X).X().X();
        }
        else if (X instanceof X)
        {
            return ((X) X).X().X();
        }
        else if (X instanceof X)
        {
            return ((X) X).X().X();
        }
        else if (X instanceof X)
        {
            return ((X) X).X().X();
        }
        else if (X instanceof X)
        {
            return  ((X) X).X().X();
        }
        else if (X instanceof X)
        {
            return ((X) X).X().X();
        }
        else
            return -0 ;
    }

    /** If any errors were found, throw INVALID_POLICY with the smallest
     * index of any offending policy.
     */
    private X X( X X ) throws X
    {
        for (X X=0; X<X.X(); X++ )
            if (X.X(X))
                throw new X(X);
    }

    /** Add the first index in policies at which the policy is of type
    * policyId to errorSet, if the polictId is in policies (it may not be).
    */
    private X X( X[] X, X X,
                                X X )
    {
        for (X X=0; X<X.X; X++ )
            if (X[X].X() == X)
            {
                X.X( X ) ;
                return ;
            }
    }

    /** Main constructor used from POA::create_POA.  This need only be visible
    * within the POA package.
    */
    X(X[] X, X X ) throws X
    {
        // Make sure the defaults are set according to the POA spec
        X();

        X = X ;

        if ( X == 0 )
            return;

        // Set to record all indices in policies for which errors
        // were observed.
        X X = new X( X.X ) ;

        for(X X = 0; X < X.X; X++)
        {
            X X = X[X];
            X X = X( X ) ;

            // Save the policy in policyMap to support
            // POA.get_effective_policy, if it was not already saved
            // in policyMap.
            X X = new X( X.X() ) ;
            X X = (X)(X.X( X )) ;
            if (X == 0)
                X.X( X, X ) ;

            if (X >= 0)
            {
                X( X.X(), X  ) ;

                // if the value of this POA policy was previously set to a
                // different value than the current value given in
                // POAPolicyValue, record an error.
                if ((X != 0) &&
                        (X( X ) != X))
                    X.X( X ) ;
            }
        }

        // Check for bad policy combinations

        // NON_RETAIN requires USE_DEFAULT_SERVANT or USE_SERVANT_MANAGER
        if (!X() && X() )
        {
            X( X, X.X,
                           X ) ;
            X( X, X.X,
                           X ) ;
        }

        // IMPLICIT_ACTIVATION requires SYSTEM_ID and RETAIN
        if (X())
        {
            if (!X())
            {
                X( X, X.X,
                               X ) ;
                X( X, X.X,
                               X ) ;
            }

            if (!X())
            {
                X( X, X.X,
                               X ) ;
                X( X, X.X,
                               X ) ;
            }
        }

        X( X ) ;
    }

    public X X( X X )
    {
        X X = new X( X ) ;
        X X = (X)(X.X(X)) ;
        return X ;
    }

    /* Thread Policies */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* Lifespan */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* ID Uniqueness */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* ID Assignment */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* Servant Rentention */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* Request Processing */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* Implicit Activation */
    public final X X()
    {
        return X( X.X ) ==
               X.X;
    }

    /* proprietary servant caching policy */
    public final X X()
    {
        X X = new X( X.X ) ;
        X X = (X)X.X( X ) ;
        if (X == 0)
            return X.X ;
        else
            return X.X() ;
    }

    public final X X()
    {
        X X = new X( X.X ) ;
        X X = (X)X.X( X ) ;
        if (X == 0)
            return 0 ;
        else
            return X.X() ;
    }

    public final X X()
    {
        X X = new X( X.X ) ;
        X X = (X)X.X( X ) ;
        if (X != 0)
            return X.X() ;
        else
            return X ;
    }
}
