/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package X.X.X.X;

import X.X.*;
import X.X.X.*;
import X.X.X.*;
import X.X.X.*;
import X.X.X.X.*;
import X.X.X.X;

import X.X.*;
import X.X.X.*;
import X.X.X.X;
import X.X.X.*;

import X.X.X;
import X.X.X;

import X.X.X;
import X.X.X;
import X.X.X.X.X;

/**
 * Synth's ListUI.
 *
 * @version %I%, %G%
 * @author Scott Violet
 */
class X extends X implements X,
    X
{
    private X X;
    private X X;
    private X X;

    public static X X(X X)
    {
        return new X();
    }

    public X X(X X, X X)
    {
        X X = X(X);

        X.X(X, X);
        X.X().X(X,
                X, 0, 0, X.X(), X.X());
        X.X();
        X(X, X);
    }

    public X X(X X, X X, X X,
                            X X, X X, X X)
    {
        X.X().X(X, X, X, X, X, X);
    }

    protected X X()
    {
        X.X();
        X.X(X);
    }

    public X X(X X)
    {
        if (X.X(X))
        {
            X((X)X.X());
        }
    }

    protected X X()
    {
        X.X();
        X.X(X);
    }

    protected X X()
    {
        if (X.X() == 0 ||
                (X.X() instanceof X))
        {
            X.X(new X());
        }
        X(X);
    }

    private X X(X X)
    {
        X X = X(X, X);
        X X = X;

        X = X.X(X, X);

        if (X != X)
        {
            X.X(X);
            X X = X.X();
            if (X == 0 || X instanceof X)
            {
                X.X(X.X(
                                                X, X.X));
            }

            X X = X.X();
            if (X == 0 || X instanceof X)
            {
                X.X(X.X(
                                                X, X.X));
            }

            X = X.X(X,
                                             0, 0);
            X = X.X(X,
                                           0, 0);

            X X = X.X(X, 0, -0);
            if (X != -0)
            {
                X.X(X);
            }
            if (X != 0)
            {
                X();
                X();
            }
        }
        X.X();
    }

    protected X X()
    {
        X.X();

        X X = X(X, X);

        X.X(X);
        X.X();
        X = 0;
    }

    public X X(X X)
    {
        return X(X, X(X));
    }

    private X X(X X, X X)
    {
        return X.X(X.class, X,
                                       X.X(X), X, X);
    }

    private X X(X X)
    {
        return X.X(X);
    }

    private X X(X X)
    {
        return X.X(X);
    }


    private class X extends X.X
    {
        public X X()
        {
            return 0;
        }

        public X X(X X)
        {
            if (X || X instanceof X)
            {
                X.X(X);
            }
        }

        public X X(X X, X X,
                X X, X X, X X)
        {
            if (!X && (X || X))
            {
                X.X((X)X.
                                               X(X(), X.class),
                                               X, X, X.X(), 0);
            }
            else
            {
                X.X();
            }

            X.X(X, X, X,
                                               X, X);
            return X;
        }

        public X X(X X)
        {
            X.X(X);
            X.X();
        }
    }
}
