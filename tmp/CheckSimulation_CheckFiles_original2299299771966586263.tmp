/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/*
 * Licensed Materials - Property of IBM
 * RMI-IIOP v1.0
 * Copyright IBM Corp. 1998 1999  All Rights Reserved
 *
 * US Government Users Restricted Rights - Use, duplication or
 * disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
 */

package X.X.X;

import X.X.X.X;
import X.X.X.X;
import X.X.X.X.X;

import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X ;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X.X;

import X.X.X.X.X.X.X;


/**
 * Base class from which all RMI-IIOP stubs must inherit.
 */
public abstract class X extends X
    implements X.X.X
{

    private static final X X = 0;

    // This can only be set at object construction time (no sync necessary).
    private transient X X = 0;
    private static X X = 0;
    private static final X X = 0;
    private static final X X = 0;

    static
    {
        X X = (X) X(X, X);
        if (X != 0)
            X = X.X();

    }


    /**
     * Returns a hash code value for the object which is the same for all stubs
     * that represent the same remote object.
     * @return the hash code value.
     */
    public X X()
    {

        if (X == 0)
        {
            X();
        }

        if (X != 0)
        {
            return X.X(X);
        }

        return 0;
    }

    /**
     * Compares two stubs for equality. Returns <code>true</code> when used to compare stubs
     * that represent the same remote object, and <code>false</code> otherwise.
     * @param obj the reference object with which to compare.
     * @return <code>true</code> if this object is the same as the <code>obj</code>
     *          argument; <code>false</code> otherwise.
     */
    public X X(X.X.X X)
    {

        if (X == 0)
        {
            X();
        }

        if (X != 0)
        {
            return X.X(X, X);
        }

        return 0;
    }

    /**
     * Returns a string representation of this stub. Returns the same string
     * for all stubs that represent the same remote object.
     * @return a string representation of this stub.
     */
    public X X()
    {


        if (X == 0)
        {
            X();
        }

        X X;
        if (X != 0)
        {
            X = X.X(X);
            if (X == 0)
            {
                return X.X();
            }
            else
            {
                return X;
            }
        }
        return X.X();
    }

    /**
     * Connects this stub to an ORB. Required after the stub is deserialized
     * but not after it is demarshalled by an ORB stream. If an unconnected
     * stub is passed to an ORB stream for marshalling, it is implicitly
     * connected to that ORB. Application code should not call this method
     * directly, but should call the portable wrapper method
     * {@link javax.rmi.PortableRemoteObject#connect}.
     * @param orb the ORB to connect to.
     * @exception RemoteException if the stub is already connected to a different
     * ORB, or if the stub does not represent an exported remote or local object.
     */
    public X X(X X) throws X
    {

        if (X == 0)
        {
            X();
        }

        if (X != 0)
        {
            X.X(X, X);
        }

    }

    /**
     * Serialization method to restore the IOR state.
     */
    private X X(X.X.X X)
    throws X, X
    {

        if (X == 0)
        {
            X();
        }

        if (X != 0)
        {
            X.X(X, X);
        }

    }

    /**
     * Serialization method to save the IOR state.
     * @serialData The length of the IOR type ID (int), followed by the IOR type ID
     * (byte array encoded using ISO8859-1), followed by the number of IOR profiles
     * (int), followed by the IOR profiles.  Each IOR profile is written as a
     * profile tag (int), followed by the length of the profile data (int), followed
     * by the profile data (byte array).
     */
    private X X(X.X.X X) throws X
    {

        if (X == 0)
        {
            X();
        }

        if (X != 0)
        {
            X.X(X, X);
        }
    }

    private X X()
    {
        if (X != 0)
        {
            try
            {
                X = (X.X.X.X) X.X();
            }
            catch (X X)
            {
                // what kind of exception to throw
                // delegate not set therefore it is null and will return default
                // values
            }
        }
    }

    // Same code as in PortableRemoteObject. Can not be shared because they
    // are in different packages and the visibility needs to be package for
    // security reasons. If you know a better solution how to share this code
    // then remove it from PortableRemoteObject. Also in Util.java
    private static X X(X X, X X)
    {
        X X = (X)
                           X.X(new X(X));
        if (X == 0)
        {
            X X = X();
            if (X != 0)
            {
                X = X.X(X);
            }
        }

        if (X == 0)
        {
            X = X;
        }

        try
        {
            return X(X).X();
        }
        catch (X X)
        {
            X X = new X( 0 + X);
            X.X( X ) ;
            throw X ;
        }
        catch (X X)
        {
            X X = new X( 0 + X);
            X.X( X ) ;
            throw X ;
        }

    }

    private static X X( X X )  throws X
    {
        try
        {
            X X = X.X().X();
            return X.X(X, 0, X);
        }
        catch (X X)
        {
            // ignore, then try RMIClassLoader
        }

        try
        {
            return X.X(X);
        }
        catch (X X)
        {
            X X = 0 + X + 0 + X.X();
            X X = new X( X ) ;
            throw X ;
        }
    }

    /**
     * Load the orb.properties file.
     */
    private static X X ()
    {
        return (X) X.X(new X());
    }

}
