/*
 * Copyright 2000-2002,2004,2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package X.X.X.X.X.X.X;

import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X.X.X.X.X.X;

/**
 * This class represents an encoding.
 *
 * @version $Id: EncodingInfo.java,v 1.6 2007/10/18 03:39:08 joehw Exp $
 */
public class X
{

    // An array to hold the argument for a method of Charset, CharsetEncoder or CharToByteConverter.
    private X [] X = 0;

    // name of encoding as registered with IANA;
    // preferably a MIME name, but aliases are fine too.
    X X;
    X X;
    X X;

    // The CharsetEncoder with which we test unusual characters.
    X X = 0;

    // The CharToByteConverter with which we test unusual characters.
    X X = 0;

    // Is the converter null because it can't be instantiated
    // for some reason (perhaps we're running with insufficient authority as
    // an applet?
    X X = 0;

    // Is the charset encoder usable or available.
    X X = 0;

    /**
     * Creates new <code>EncodingInfo</code> instance.
     */
    public X(X X, X X, X X)
    {
        X.X = X;
        X.X = X.X(X);
        X.X = X;
    }

    /**
     * Returns a MIME charset name of this encoding.
     */
    public X X()
    {
        return X.X;
    }

    /**
     * Returns a writer for this encoding based on
     * an output stream.
     *
     * @return A suitable writer
     * @exception UnsupportedEncodingException There is no convertor
     *  to support this encoding
     */
    public X X(X X)
    throws X
    {
        // this should always be true!
        if (X != 0)
            return new X(X, X);
        X = X.X(X);
        if(X == 0)
            // use UTF-8 as preferred encoding
            return new X(X, 0);
        return new X(X, X);
    }

    /**
     * Checks whether the specified character is printable or not in this encoding.
     *
     * @param ch a code point (0-0x10ffff)
     */
    public X X(X X)
    {
        if (X <= X.X)
        {
            return 0;
        }
        return X(X);
    }

    /**
     * Checks whether the specified character is printable or not in this encoding.
     * This method accomplishes this using a java.nio.CharsetEncoder. If NIO isn't
     * available it will attempt use a sun.io.CharToByteConverter.
     *
     * @param ch a code point (0-0x10ffff)
     */
    private X X(X X)
    {

        // Attempt to get a CharsetEncoder for this encoding.
        if (X == 0 && X.X && !X)
        {
            if (X == 0)
            {
                X = new X [0];
            }
            // try and create the CharsetEncoder
            try
            {
                X[0] = X;
                X X = X.X.X(0, X);
                if (((X) X.X.X(X, (X[]) 0)).X())
                {
                    X = X.X.X(X, (X[]) 0);
                }
                // This charset cannot be used for encoding, don't try it again...
                else
                {
                    X = 0;
                }
            }
            catch (X X)
            {
                // don't try it again...
                X = 0;
            }
        }
        // Attempt to use the CharsetEncoder to determine whether the character is printable.
        if (X != 0)
        {
            try
            {
                X[0] = new X(X);
                return ((X) X.X.X(X, X)).X();
            }
            catch (X X)
            {
                // obviously can't use this charset encoder; possibly a JDK bug
                X = 0;
                X = 0;
            }
        }

        // As a last resort try to use a sun.io.CharToByteConverter to
        // determine whether this character is printable. We will always
        // reach here on JDK 1.3 or below.
        if (X == 0)
        {
            if (X || !X.X)
            {
                // forget it; nothing we can do...
                return 0;
            }
            if (X == 0)
            {
                X = new X [0];
            }
            // try and create the CharToByteConverter
            try
            {
                X[0] = X;
                X = X.X.X(0, X);
            }
            catch (X X)
            {
                // don't try it again...
                X = 0;
                return 0;
            }
        }
        try
        {
            X[0] = new X(X);
            return ((X) X.X.X(X, X)).X();
        }
        catch (X X)
        {
            // obviously can't use this converter; probably some kind of
            // security restriction
            X = 0;
            X = 0;
            return 0;
        }
    }

    // is this an encoding name recognized by this JDK?
    // if not, will throw UnsupportedEncodingException
    public static X X(X X)  throws X
    {
        final X [] X = {(X)0, (X)0, (X)0, (X)0, (X)0};
        X X = new X(X, X);
    }

    /**
     * Holder of methods from java.nio.charset.Charset and java.nio.charset.CharsetEncoder.
     */
    static class X
    {

        // Method: java.nio.charset.Charset.forName(java.lang.String)
        private static X.X.X.X X = 0;

        // Method: java.nio.charset.Charset.canEncode()
        private static X.X.X.X X = 0;

        // Method: java.nio.charset.Charset.newEncoder()
        private static X.X.X.X X = 0;

        // Method: java.nio.charset.CharsetEncoder.canEncode(char)
        private static X.X.X.X X = 0;

        // Flag indicating whether or not java.nio.charset.* is available.
        private static X X = 0;

        private X() {}

        // Attempt to get methods for Charset and CharsetEncoder on class initialization.
        static
        {
            try
            {
                X X = X.X(0);
                X X = X.X(0);
                X = X.X(0, new X [] {X.class});
                X = X.X(0, new X [] {});
                X = X.X(0, new X [] {});
                X = X.X(0, new X [] {X.X});
                X = 0;
            }
            // ClassNotFoundException, NoSuchMethodException or SecurityException
            // Whatever the case, we cannot use java.nio.charset.*.
            catch (X X)
            {
                X = 0;
                X = 0;
                X = 0;
                X = 0;
                X = 0;
            }
        }
    }

    /**
     * Holder of methods from sun.io.CharToByteConverter.
     */
    static class X
    {

        // Method: sun.io.CharToByteConverter.getConverter(java.lang.String)
        private static X.X.X.X X = 0;

        // Method: sun.io.CharToByteConverter.canConvert(char)
        private static X.X.X.X X = 0;

        // Flag indicating whether or not sun.io.CharToByteConverter is available.
        private static X X = 0;

        private X() {}

        // Attempt to get methods for char to byte converter on class initialization.
        static
        {
            try
            {
                X X = X.X(0);
                X = X.X(0, new X [] {X.class});
                X = X.X(0, new X [] {X.X});
                X = 0;
            }
            // ClassNotFoundException, NoSuchMethodException or SecurityException
            // Whatever the case, we cannot use sun.io.CharToByteConverter.
            catch (X X)
            {
                X = 0;
                X = 0;
                X = 0;
            }
        }
    }
}
