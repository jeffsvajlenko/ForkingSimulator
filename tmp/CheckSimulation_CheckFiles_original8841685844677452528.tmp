package X.X.X.X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

public class X implements X {
    private X X = new X ();
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X = 0;

    public X X () {
        return X;
    }

    public X () {
        X = X.X (new X (0));
        X = 0;
        X = 0;
        X = 0;
        X = 0;
        X = 0;
    }

    public synchronized X X (X X) {
        return (X) X.X (X);
    }

    public synchronized X X (X X, X X) {
        X.X (X, X);
    }

    public synchronized X X (X X, X X) {
        X.X (X);
    }

    public X X (X X) {
        X.X = X;
        X = X.X (X, X.X);
        X = X.X (X, X.X);
        X = new X (X, X);
        X ();
        X X = new X (X);
        X.X ().X (X.X, X.X (X));
    }

    public X X (X X) {
        X X = 0;
        try {
            X X = 0;
            X X = X.X ();
            X = X ();
            while (X.X ()) {
                X X = (X) (X.X ());
                if (X) {
                    if (! X.X (X.X)) throw X.X (X);

                    X = 0;
                } else {
                    X = X.X (X, 0);
                }
            }
        } catch (X.X.X.X.X X) {
            throw X.X (X);
        } catch (X X) {
            throw X;
        } catch (X X) {
            throw X;
        } catch (X X) {
            throw X.X (X);
        }
        if (X == 0) throw X.X ();

        return (X) X;
    }

    public X X (X X) {
        X X = 0;
        synchronized (X) {
            X = 0;
            X = (new X (X)).X ();
        }
        while (X.X ()) {
            try {
                ((X) X.X ()).X (0, X);
            } catch (X.X.X.X.X X) {
            }
        }
    }

    public synchronized X X (X X) {
        X.X (X);
    }

    public synchronized X X (X X) {
        X.X (X);
    }

    synchronized public X X () {
        return X ++;
    }

    public X X () {
        X X = new X () {

            public X X () {
                return X.X (X);
            }

        }

        ;
        X.X ().X (X.X, X.X (X));
    }

    public synchronized X X () {
        if (X == 0) {
            if (X) {
                throw X.X ();
            }
            try {
                X X = X.X (X.X);
                X = (X) X;
            } catch (X X) {
                throw X.X (X);
            }
        }
        return X;
    }

    public X.X.X.X.X X () {
        return X;
    }

    synchronized public X X () {
        return X ++;
    }

    public X X () {
        return X;
    }

}

