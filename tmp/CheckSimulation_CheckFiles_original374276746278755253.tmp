package javax.management.modelmbean;

import java.io.IOException;

import java.io.ObjectInputStream;

import java.io.ObjectOutputStream;

import java.io.ObjectStreamField;

import java.lang.reflect.*;

import java.security.AccessController;

import java.security.PrivilegedAction;

import javax.management.Descriptor;

import javax.management.DescriptorAccess;

import javax.management.*;

import com.sun.jmx.mbeanserver.GetPropertyAction;

import com.sun.jmx.trace.Trace;

public class ModelMBeanAttributeInfo extends MBeanAttributeInfo implements DescriptorAccess {
    private static final long oldSerialVersionUID = 7098036920755973145L;
    private static final long newSerialVersionUID = 6181543027787327345L;
    private static final ObjectStreamField [] oldSerialPersistentFields = {new ObjectStreamField ("attrDescriptor", Descriptor.class), new ObjectStreamField ("currClass", String.class)};
    private static final ObjectStreamField [] newSerialPersistentFields = {new ObjectStreamField ("attrDescriptor", Descriptor.class)};
    private static final long serialVersionUID;
    private static final ObjectStreamField [] serialPersistentFields;
    private static boolean compat = false;

    static {
        try {
            GetPropertyAction act = new GetPropertyAction ("jmx.serial.form");
            String form = AccessController.doPrivileged (act);
            compat = (form != null && form.equals ("1.0"));
        } catch (Exception e) {
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }

    private Descriptor attrDescriptor = createDefaultDescriptor ();
    private final static String currClass = "ModelMBeanAttributeInfo";

    public ModelMBeanAttributeInfo (String name, String description, Method getter, Method setter) throws javax.management.IntrospectionException {
        super (name, description, getter, setter);
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo(" + name + ",String,Method,Method)", "Entry");
        }
        attrDescriptor = createDefaultDescriptor ();
    }

    public ModelMBeanAttributeInfo (String name, String description, Method getter, Method setter, Descriptor descriptor) throws javax.management.IntrospectionException {
        super (name, description, getter, setter);
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo(" + name + ", String, Method, Method, Descriptor)", "Entry");
        }
        if (descriptor == null) {
            attrDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (descriptor)) {
                attrDescriptor = (Descriptor) descriptor.clone ();
            } else {
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanAttributeInfo constructor"));
            }
        }
    }

    public ModelMBeanAttributeInfo (String name, String type, String description, boolean isReadable, boolean isWritable, boolean isIs) {
        super (name, type, description, isReadable, isWritable, isIs);
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo(" + name + ",String,String,boolean,boolean)", "Entry");
        }
        attrDescriptor = createDefaultDescriptor ();
    }

    public ModelMBeanAttributeInfo (String name, String type, String description, boolean isReadable, boolean isWritable, boolean isIs, Descriptor descriptor) {
        super (name, type, description, isReadable, isWritable, isIs);
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo(" + name + ",String,String,boolean,boolean,Descriptor)", "Entry");
        }
        if (descriptor == null) {
            attrDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (descriptor)) {
                attrDescriptor = (Descriptor) descriptor.clone ();
            } else {
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanAttributeInfo constructor"));
            }
        }
    }

    public ModelMBeanAttributeInfo (ModelMBeanAttributeInfo inInfo) {
        super (inInfo.getName (), inInfo.getType (), inInfo.getDescription (), inInfo.isReadable (), inInfo.isWritable (), inInfo.isIs ());
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo(ModelMBeanAttributeInfo)", "Entry");
        }
        Descriptor newDesc = inInfo.getDescriptor ();
        if ((newDesc != null) && (isValid (newDesc))) {
            attrDescriptor = newDesc;
        } else {
            attrDescriptor = createDefaultDescriptor ();
        }
    }

    public Descriptor getDescriptor () {
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo.getDescriptor()", "Entry");
        }
        if (attrDescriptor == null) {
            attrDescriptor = createDefaultDescriptor ();
        }
        return ((Descriptor) attrDescriptor.clone ());
    }

    public void setDescriptor (Descriptor inDescriptor) {
        if (inDescriptor != null) {
            if (tracing ()) {
                trace ("ModelMBeanAttributeInfo.setDescriptor()", "Executed for " + inDescriptor.toString ());
            }
        }
        if (inDescriptor == null) {
            if (tracing ()) {
                trace ("ModelMBeanAttributeInfo.setDescriptor()", "Received null for new descriptor value, setting descriptor to default values");
            }
            attrDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (inDescriptor)) {
                attrDescriptor = (Descriptor) inDescriptor.clone ();
            } else {
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanAttributeInfo setDescriptor"));
            }
        }
    }

    public Object clone () {
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo.clone()", "Entry");
        }
        return (new ModelMBeanAttributeInfo (this));
    }

    public String toString () {
        return "ModelMBeanAttributeInfo: " + this.getName () + " ; Description: " + this.getDescription () + " ; Types: " + this.getType () + " ; isReadable: " + this.isReadable () + " ; isWritable: " + this.isWritable () + " ; Descriptor: " + this.getDescriptor ();
    }

    private Descriptor createDefaultDescriptor () {
        if (tracing ()) {
            trace ("ModelMBeanAttributeInfo.createDefaultDescriptor()", "Entry");
        }
        return new DescriptorSupport (new String [] {"descriptorType=attribute", ("name=" + this.getName ()), ("displayName=" + this.getName ())});
    }

    private boolean isValid (Descriptor inDesc) {
        boolean results = true;
        String badField = "none";
        if (inDesc == null) {
            badField = "nullDescriptor";
            results = false;
        } else if (! inDesc.isValid ()) {
            badField = "inValidDescriptor";
            results = false;
        } else if (! ((String) inDesc.getFieldValue ("name")).equalsIgnoreCase (this.getName ())) {
            badField = "name";
            results = false;
        } else {
            if (! ((String) inDesc.getFieldValue ("descriptorType")).equalsIgnoreCase ("attribute")) {
                badField = "desriptorType";
                results = false;
            } else if ((inDesc.getFieldValue ("displayName")) == null) {
                inDesc.setField ("displayName", this.getName ());
            }

        }

        if (tracing ()) trace ("isValid()", ("Returning " + results + ": Invalid field is " + badField));

        return results;
    }

    private boolean tracing () {
        return Trace.isSelected (Trace.LEVEL_TRACE, Trace.INFO_MODELMBEAN);
    }

    private void trace (String inClass, String inMethod, String inText) {
        Trace.send (Trace.LEVEL_TRACE, Trace.INFO_MODELMBEAN, inClass, inMethod, Integer.toHexString (this.hashCode ()) + " " + inText);
    }

    private void trace (String inMethod, String inText) {
        trace (currClass, inMethod, inText);
    }

    private void readObject (ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject ();
    }

    private void writeObject (ObjectOutputStream out) throws IOException {
        if (compat) {
            ObjectOutputStream.PutField fields = out.putFields ();
            fields.put ("attrDescriptor", attrDescriptor);
            fields.put ("currClass", currClass);
            out.writeFields ();
        } else {
            out.defaultWriteObject ();
        }
    }

}

