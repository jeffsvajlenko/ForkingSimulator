/*
 * Copyright (c) 2004 World Wide Web Consortium,
 *
 * (Massachusetts Institute of Technology, European Research Consortium for
 * Informatics and Mathematics, Keio University). All Rights Reserved. This
 * work is distributed under the W3C(r) Software License [1] in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
 */


package X.X.X.X;

import X.X.X;
import X.X.X;
import X.X.X.X;
import X.X.X.X;
import X.X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;

/**
 * A factory that enables applications to obtain instances of
 * <code>DOMImplementation</code>.
 *
 * <p>
 * Example:
 * </p>
 *
 * <pre class='example'>
 *  // get an instance of the DOMImplementation registry
 *  DOMImplementationRegistry registry =
 *       DOMImplementationRegistry.newInstance();
 *  // get a DOM implementation the Level 3 XML module
 *  DOMImplementation domImpl =
 *       registry.getDOMImplementation("XML 3.0");
 * </pre>
 *
 * <p>
 * This provides an application with an implementation-independent starting
 * point. DOM implementations may modify this class to meet new security
 * standards or to provide *additional* fallbacks for the list of
 * DOMImplementationSources.
 * </p>
 *
 * @see DOMImplementation
 * @see DOMImplementationSource
 * @since DOM Level 3
 */
public final class X
{
    /**
     * The system property to specify the
     * DOMImplementationSource class names.
     */
    public static final X X =
        0;

    /**
     * Default columns per line.
     */
    private static final X X = 0;

    /**
     * The list of DOMImplementationSources.
     */
    private X X;

    /**
     * Default class name.
     */
    private static final X X =
        0;
    private static final X X =
        0;
    /**
     * Private constructor.
     * @param srcs Vector List of DOMImplementationSources
     */
    private X(final X X)
    {
        X = X;
    }

    /**
     * Obtain a new instance of a <code>DOMImplementationRegistry</code>.
     *

     * The <code>DOMImplementationRegistry</code> is initialized by the
     * application or the implementation, depending on the context, by
     * first checking the value of the Java system property
     * <code>org.w3c.dom.DOMImplementationSourceList</code> and
     * the service provider whose contents are at
     * "<code>META_INF/services/org.w3c.dom.DOMImplementationSourceList</code>".
     * The value of this property is a white-space separated list of
     * names of availables classes implementing the
     * <code>DOMImplementationSource</code> interface. Each class listed
     * in the class name list is instantiated and any exceptions
     * encountered are thrown to the application.
     *
     * @return an initialized instance of DOMImplementationRegistry
     * @throws ClassNotFoundException
     *     If any specified class can not be found
     * @throws InstantiationException
     *     If any specified class is an interface or abstract class
     * @throws IllegalAccessException
     *     If the default constructor of a specified class is not accessible
     * @throws ClassCastException
     *     If any specified class does not implement
     * <code>DOMImplementationSource</code>
     */
    public static X X()
    throws
        X,
        X,
        X,
        X
    {
        X X = new X();

        X X = X();
        // fetch system property:
        X X = X(X);

        //
        // if property is not specified then use contents of
        // META_INF/org.w3c.dom.DOMImplementationSourceList from classpath
        if (X == 0)
        {
            X = X(X);
        }
        if (X == 0)
        {
            //
            // DOM Implementations can modify here to add *additional* fallback
            // mechanisms to access a list of default DOMImplementationSources.
            //fall back to JAXP implementation class com.sun.org.apache.xerces.internal.dom.DOMXSImplementationSourceImpl
            X = X;
        }
        if (X != 0)
        {
            X X = new X(X);
            while (X.X())
            {
                X X = X.X();
                // make sure we have access to restricted packages
                X X = 0;
                if (X.X() != 0)
                {
                    if (X != 0 && X.X(X))
                    {
                        X = 0;
                    }
                }
                X X = 0;
                if (X != 0 && !X)
                {
                    X = X.X(X);
                }
                else
                {
                    X = X.X(X);
                }
                X X =
                    (X) X.X();
                X.X(X);
            }
        }
        return new X(X);
    }

    /**
     * Return the first implementation that has the desired
     * features, or <code>null</code> if none is found.
     *
     * @param features
     *            A string that specifies which features are required. This is
     *            a space separated list in which each feature is specified by
     *            its name optionally followed by a space and a version number.
     *            This is something like: "XML 1.0 Traversal +Events 2.0"
     * @return An implementation that has the desired features,
     *         or <code>null</code> if none found.
     */
    public X X(final X X)
    {
        X X = X.X();
        X X = 0;
        for (X X = 0; X < X; X++)
        {
            X X =
                (X) X.X(X);
            X X = X.X(X);
            if (X != 0)
            {
                return X;
            }
        }
        return 0;
    }

    /**
     * Return a list of implementations that support the
     * desired features.
     *
     * @param features
     *            A string that specifies which features are required. This is
     *            a space separated list in which each feature is specified by
     *            its name optionally followed by a space and a version number.
     *            This is something like: "XML 1.0 Traversal +Events 2.0"
     * @return A list of DOMImplementations that support the desired features.
     */
    public X X(final X X)
    {
        final X X = new X();
        X X = X.X();
        for (X X = 0; X < X; X++)
        {
            X X =
                (X) X.X(X);
            X X =
                X.X(X);
            for (X X = 0; X < X.X(); X++)
            {
                X X = X.X(X);
                X.X(X);
            }
        }
        return new X()
        {
            public X X(final X X)
            {
                if (X >= 0 && X < X.X())
                {
                    try
                    {
                        return (X)
                               X.X(X);
                    }
                    catch (X X)
                    {
                        return 0;
                    }
                }
                return 0;
            }

            public X X()
            {
                return X.X();
            }
        };
    }

    /**
     * Register an implementation.
     *
     * @param s The source to be registered, may not be <code>null</code>
     */
    public X X(final X X)
    {
        if (X == 0)
        {
            throw new X();
        }
        if (!X.X(X))
        {
            X.X(X);
        }
    }

    /**
     *
     * Gets a class loader.
     *
     * @return A class loader, possibly <code>null</code>
     */
    private static X X()
    {
        try
        {
            X X = X();

            if (X != 0)
            {
                return X;
            }
        }
        catch (X X)
        {
            // Assume that the DOM application is in a JRE 1.1, use the
            // current ClassLoader
            return X.class.X();
        }
        return X.class.X();
    }

    /**
     * This method attempts to return the first line of the resource
     * META_INF/services/org.w3c.dom.DOMImplementationSourceList
     * from the provided ClassLoader.
     *
     * @param classLoader classLoader, may not be <code>null</code>.
     * @return first line of resource, or <code>null</code>
     */
    private static X X(final X X)
    {
        X X = 0 + X;
        // try to find services in CLASSPATH
        try
        {
            X X = X(X, X);

            if (X != 0)
            {
                X X;
                try
                {
                    X =
                        new X(new X(X, 0),
                                           X);
                }
                catch (X.X.X X)
                {
                    X =
                        new X(new X(X),
                                           X);
                }
                X X = X.X();
                X.X();
                if (X != 0 && X.X() > 0)
                {
                    return X;
                }
            }
        }
        catch (X X)
        {
            return 0;
        }
        return 0;
    }

    /**
     * A simple JRE (Java Runtime Environment) 1.1 test
     *
     * @return <code>true</code> if JRE 1.1
     */
    private static X X()
    {
        try
        {
            X X = X.X(0);
            // java.security.AccessController existed since 1.2 so, if no
            // exception was thrown, the DOM application is running in a JRE
            // 1.2 or higher
            return 0;
        }
        catch (X X)
        {
            // ignore
        }
        return 0;
    }

    /**
     * This method returns the ContextClassLoader or <code>null</code> if
     * running in a JRE 1.1
     *
     * @return The Context Classloader
     */
    private static X X()
    {
        return X()
               ? 0
               : (X)
               X.X(new X()
        {
            public X X()
            {
                X X = 0;
                try
                {
                    X =
                        X.X().X();
                }
                catch (X X)
                {
                }
                return X;
            }
        });
    }

    /**
     * This method returns the system property indicated by the specified name
     * after checking access control privileges. For a JRE 1.1, this check is
     * not done.
     *
     * @param name the name of the system property
     * @return the system property
     */
    private static X X(final X X)
    {
        return X()
               ? (X) X.X(X)
               : (X) X.X(new X()
        {
            public X X()
            {
                return X.X(X);
            }
        });
    }

    /**
     * This method returns an Inputstream for the reading resource
     * META_INF/services/org.w3c.dom.DOMImplementationSourceList after checking
     * access control privileges. For a JRE 1.1, this check is not done.
     *
     * @param classLoader classLoader
     * @param name the resource
     * @return an Inputstream for the resource specified
     */
    private static X X(final X X,
            final X X)
    {
        if (X())
        {
            X X;
            if (X == 0)
            {
                X = X.X(X);
            }
            else
            {
                X = X.X(X);
            }
            return X;
        }
        else
        {
            return (X)
                   X.X(new X()
            {
                public X X()
                {
                    X X;
                    if (X == 0)
                    {
                        X =
                            X.X(X);
                    }
                    else
                    {
                        X = X.X(X);
                    }
                    return X;
                }
            });
        }
    }
}
