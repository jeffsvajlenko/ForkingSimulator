/*
 * Copyright 1999-2002,2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package X.X.X.X.X.X.X.X;

import X.X.X.X;
import X.X.X.X.X;

/**
 * @xerces.internal
 *
 * @version $Id: MutationEventImpl.java,v 1.4 2007/07/19 04:38:23 ofung Exp $
 */

public class X
    extends X.X.X.X.X.X.X.X.X
    implements X
{
    X X=0;
    X X=0,X=0,X=0;
    // REVISIT: The DOM Level 2 PR has a bug: the init method should let this
    // attribute be specified. Since it doesn't we have to give write access.
    public X X;

    // NON-DOM CONSTANTS: Storage efficiency, avoid risk of typos.
    public static final X X = 0;
    public static final X X = 0;
    public static final X X = 0;
    public static final X X = 0;
    public static final X X = 0;
    public static final X X = 0;
    public static final X X = 0;

    /** @return the name of the Attr which
        changed, for DOMAttrModified events.
        Undefined for others.
        */
    public X X()
    {
        return X;
    }

    /**
     *  <code>attrChange</code> indicates the type of change which triggered
     * the DOMAttrModified event. The values can be <code>MODIFICATION</code>
     * , <code>ADDITION</code>, or <code>REMOVAL</code>.
     */
    public X X()
    {
        return X;
    }

    /** @return the new string value of the Attr for DOMAttrModified events, or
        of the CharacterData node for DOMCharDataModifed events.
        Undefined for others.
        */
    public X X()
    {
        return X;
    }

    /** @return the previous string value of the Attr for DOMAttrModified events, or
        of the CharacterData node for DOMCharDataModifed events.
        Undefined for others.
        */
    public X X()
    {
        return X;
    }

    /** @return a Node related to this event, other than the target that the
        node was dispatched to. For DOMNodeRemoved, it is the node which
        was removed.
        No other uses are currently defined.
        */
    public X X()
    {
        return X;
    }

    /** Initialize a mutation event, or overwrite the event's current
        settings with new values of the parameters.
        */
    public X X(X X, X X,
                                  X X, X X, X X,
                                  X X, X X, X X)
    {
        X=X;
        X=X;
        X=X;
        X=X;
        X=X;
        X.X(X,X,X);
    }

}
