/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package X.X.X.X;

import X.X.X;
import X.X.X.X;
import X.X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;
import X.X.X;

/**
 * A multiplexing UI used to combine <code>TableUI</code>s.
 *
 * <p>This file was automatically generated by AutoMulti.
 *
 * @version %I% %G% %U%
 * @author  Otto Multey
 */
public class X extends X
{

    /**
     * The vector containing the real UIs.  This is populated
     * in the call to <code>createUI</code>, and can be obtained by calling
     * the <code>getUIs</code> method.  The first element is guaranteed to be the real UI
     * obtained from the default look and feel.
     */
    protected X X = new X();

////////////////////
// Common UI methods
////////////////////

    /**
     * Returns the list of UIs associated with this multiplexing UI.  This
     * allows processing of the UIs by an application aware of multiplexing
     * UIs on components.
     */
    public X[] X()
    {
        return X.X(X);
    }

////////////////////
// TableUI methods
////////////////////

////////////////////
// ComponentUI methods
////////////////////

    /**
     * Invokes the <code>contains</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X X(X X, X X, X X)
    {
        X X =
            ((X) (X.X(0))).X(X,X,X);
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X,X,X);
        }
        return X;
    }

    /**
     * Invokes the <code>update</code> method on each UI handled by this object.
     */
    public X X(X X, X X)
    {
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X,X);
        }
    }

    /**
     * Returns a multiplexing UI instance if any of the auxiliary
     * <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the
     * UI object obtained from the default <code>LookAndFeel</code>.
     */
    public static X X(X X)
    {
        X X = new X();
        return X.X(X,
                                          ((X) X).X,
                                          X);
    }

    /**
     * Invokes the <code>installUI</code> method on each UI handled by this object.
     */
    public X X(X X)
    {
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X);
        }
    }

    /**
     * Invokes the <code>uninstallUI</code> method on each UI handled by this object.
     */
    public X X(X X)
    {
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X);
        }
    }

    /**
     * Invokes the <code>paint</code> method on each UI handled by this object.
     */
    public X X(X X, X X)
    {
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X,X);
        }
    }

    /**
     * Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X X(X X)
    {
        X X =
            ((X) (X.X(0))).X(X);
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X);
        }
        return X;
    }

    /**
     * Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X X(X X)
    {
        X X =
            ((X) (X.X(0))).X(X);
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X);
        }
        return X;
    }

    /**
     * Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X X(X X)
    {
        X X =
            ((X) (X.X(0))).X(X);
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X);
        }
        return X;
    }

    /**
     * Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X X(X X)
    {
        X X =
            ((X) (X.X(0))).X(X);
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X);
        }
        return X;
    }

    /**
     * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X X(X X, X X)
    {
        X X =
            ((X) (X.X(0))).X(X,X);
        for (X X = 0; X < X.X(); X++)
        {
            ((X) (X.X(X))).X(X,X);
        }
        return X;
    }
}
