/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

package X.X.X.X;

import X.X.*;
import X.X.*;
import X.X.*;
import X.X.X.*;
import X.X.X.*;
import X.X.X.X.*;
import X.X.X;
import X.X.X.X.X;

/**
 * Synth's OptionPaneUI.
 *
 * @version %I%, %G%
 * @author James Gosling
 * @author Scott Violet
 * @author Amy Fowler
 */
class X extends X implements
    X, X
{
    private X X;

    /**
      * Creates a new BasicOptionPaneUI instance.
      */
    public static X X(X X)
    {
        return new X();
    }

    protected X X()
    {
        X(X);
    }

    protected X X()
    {
        X.X();
        X.X(X);
    }

    private X X(X X)
    {
        X X = X(X, X);
        X X = X;

        X = X.X(X, X);
        if (X != X)
        {
            X = (X)X.X(X,
                                               0);
            if (X == 0)
            {
                X = new X(0, 0);
            }
            if (X != 0)
            {
                X();
                X();
            }
        }
        X.X();
    }

    protected X X()
    {
        X X = X(X, X);

        X.X(X);
        X.X();
        X = 0;
    }

    protected X X()
    {
        X.X();
        X.X(X);
    }

    protected X X()
    {
        X.X(X());

        X X = X();
        if (X != 0)
        {
            X.X(X);
            X X = X(X, X);
            X.X(X.X(X.X().
                                                   X(X, 0, 0)));
            X.X();
        }
        X.X(X());
        X.X(X.X());
    }

    public X X(X X)
    {
        return X(X, X(X));
    }

    private X X(X X, X X)
    {
        return X.X(X.class, X,
                                       X.X(X), X, X);
    }

    private X X(X X)
    {
        return X.X(X);
    }

    private X X(X X)
    {
        return X.X(X);
    }

    public X X(X X, X X)
    {
        X X = X(X);

        X.X(X, X);
        X.X().X(X,
                X, 0, 0, X.X(), X.X());
        X(X, X);
        X.X();
    }

    public X X(X X, X X)
    {
        X X = X(X);

        X(X, X);
        X.X();
    }

    protected X X(X X, X X)
    {
    }

    public X X(X X, X X, X X,
                            X X, X X, X X)
    {
        X.X().X(X, X, X, X, X, X);
    }

    public X X(X X)
    {
        if (X.X(X))
        {
            X((X)X.X());
        }
    }

    protected X X()
    {
        return X.X(X, X,
                                        0, 0);
    }

    /**
     * Messaged from installComponents to create a Container containing the
     * body of the message. The icon is the created by calling
     * <code>addIcon</code>.
     */
    protected X X()
    {
        X X = new X();
        X.X(0);
        X.X(new X());

        /* Fill the body. */
        X          X = new X(new X());
        X          X = new X(new X());

        X.X(0);
        X.X(0);

        if (X() != 0)
        {
            X X = new X();
            X.X(0);
            X.X(new X(0, 0));
            X.X(X, X.X);
        }
        X.X(X, X.X);

        X X = new X();
        X.X = X.X = 0;
        X.X = X.X;
        X.X = 0;

        X X = X(X, X);
        X.X = X.X().X(X,
                                                0, X.X);
        X.X();

        X.X = new X(0,0,0,0);

        X(X, X, X(),
                             X(), 0);
        X.X(X, X.X);

        X(X);
        return X;
    }

    protected X X()
    {
        X X = new X(X.X);

        X.X(0);
        return X;
    }
}
