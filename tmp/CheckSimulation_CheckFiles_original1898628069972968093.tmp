package X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

class X extends X {
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private X X;
    private X X;
    private X X;
    private X.X.X X;
    private X X;
    private X.X X;
    private X.X.X X;
    private X X;
    private X < X, X > X;
    private X X;
    private X < ? > X;
    private X.X.X X;
    private X X;
    private X.X.X X;
    private X.X.X X;

    X () {
        X = new X < X, X > ();
        X = new X ();
        X = new X ();
        X = new X ();
        X = new X ();
        X = new X ();
    }

    public X X (X X, X X, X X, X < ? > X, X X) throws X, X {
        if (X == 0 || X == 0 || (X == 0 && X == 0)) {
            throw new X (0);
        }
        assert (! (X != 0 && X != 0));
        X = X;
        X = X;
        X = X;
        X = X;
        try {
            try {
                X X = X.X ().X ();
                X.X (new X (X), X);
            } catch (X X) {
                throw new X (0 + X, 0);
            } catch (X X) {
                throw new X (0 + X + 0 + X.X (), 0);
            } catch (X X) {
                throw new X (0 + X, 0);
            }
        } finally {
            X ();
        }
    }

    private X X (X X) {
        if (X != 0) {
            return X.X (X);
        } else {
            try {
                return new X (X, X);
            } catch (X X) {
                return 0;
            }
        }
    }

    private X X () {
        X = 0;
        X = 0;
        X.X ();
        X.X ();
        X.X ();
        X.X ();
        X.X ();
    }

    private X X () {
        return (X > 0);
    }

    private X X () {
        if (X == 0) {
            if (X != 0) {
                X [] X = new X [] {X (0)};
                X X = X.X ().X ();
                X X = new X (X, X);
                X = new X (0, X);
            } else {
                X = new X (0, X.X ());
            }
            for (X X : X.X ()) {
                X.X (X, X.X (X));
            }
        }
        return X;
    }

    private X X (X X, X X) throws X {
        if (! X.X (X)) {
            throw new X (0 + X + 0 + X.X ());
        }
        return X;
    }

    private X X (X X, X X) throws X {
        X X = 0;
        if (X != 0) {
            if ((X = X.X (X)) != 0) {
                return X (X, X);
            }
        }
        X = X.X (X);
        if (X == 0) {
            throw new X (0 + X + 0);
        }
        return X (X, X);
    }

    private X X (X X, X X) throws X {
        if (X != 0) {
            if (X.X (X) != 0 || (X != 0 && X.X (X) != 0)) {
                throw new X (0 + X + 0);
            }
            if (X != 0) {
                X.X (X, X);
            } else {
                X.X (X, X);
            }
        }
    }

    private X X (X X, X X) throws X {
        if (! X.X ()) {
            throw new X (X);
        }
        try {
            return X.X (X.X ());
        } catch (X X) {
            throw new X (X);
        }
    }

    private X X (X X, X X) throws X {
        X X = new X (X);
        return new X (X (X, X), X (X, X), X (X, X), X (X, X));
    }

    private X X (X X) throws X {
        X X = 0;
        X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = (X) ((X) X (X.X (X), X.class)).X ();
            } else if (X.X (X)) {
                X = X.X (X);
            }

        }
        if (X == 0) {
            X = new X ();
        }
        X (X, X);
    }

    private X X () throws X {
        X X = X.X ();
        if (X > 0) {
            X.X ((X.X []) X.X (new X.X [X]));
            X.X ();
        }
        X = X.X ();
        if (X > 0) {
            X.X ((X.X []) X.X (new X.X [X]));
            X.X ();
        }
        X = 0;
    }

    private X X (X X) throws X {
        X.X X = 0;
        X X = 0;
        X X = 0;
        X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = X.X (X);
            } else if (X.X (X)) {
                X = (X.X) X (X.X (X), X.X.class);
            } else if (X.X (X)) {
                X = (X.X) ((X.X) X (X.X (X), X.X.class)).X ();
            } else if (X.X (X)) {
                X X = new X (X.X (X));
                while (X.X ()) {
                    X X = X.X ().X ().X ();
                    if (X == 0) {
                        X |= X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    } else if (X != 0) {
                        throw new X (0 + X);
                    }

                }
            }

        }
        if (X == 0) {
            X = new X.X ();
        }
        X.X (X);
        X (X, X);
        X.X (X);
    }

    private X X () throws X {
        X X = X.X ();
        if (X > 0) {
            X.X ((X.X []) X.X (new X.X [X]));
            X.X ();
        }
        X = 0;
    }

    private X X (X X) throws X {
        X X = 0;
        X X = X.X;
        X X = 0;
        X X = 0;
        X X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = X.X (X);
            } else if (X.X (X)) {
                X = (X) X (X.X (X), X.class);
            } else if (X.X (X)) {
                X = X.X (X);
            } else if (X.X (X)) {
                try {
                    X = X.X (X.X (X));
                } catch (X X) {
                    throw new X (0 + X.X (X));
                }
            } else if (X.X (X)) {
                X X = new X (X.X (X));
                while (X.X ()) {
                    X X = X.X ().X ();
                    if (X == 0) {
                        X = ((X | X.X) ^ X.X) | X.X;
                    } else if (X == 0) {
                        X |= X.X;
                    }

                }
            }

        }
        if (X == 0) {
            if (X == 0) {
                throw new X (0);
            }
            if (X == 0) {
                throw new X (0);
            }
            X = new X (X, X, X);
        } else if (X != 0 || X != 0 || X != X.X) {
            throw new X (0 + 0);
        }

        X (X, X);
        if (X != 0) {
            X.X (X);
        } else if (X != 0) {
            X.X (X);
        }

    }

    private X X (X X) throws X {
        X X = 0;
        X X = 0;
        X.X ();
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = X.X (X);
            } else if (X.X (X)) {
                X = (X) X (X.X (X), X.class);
            } else if (X.X (X)) {
            } else if (X.X (X)) {
                X X = X.X (X);
                if (X.X (0)) {
                    try {
                        X X;
                        X X;
                        X X = X.X ();
                        if (X < 0) {
                            X = X.X (X);
                            X = 0;
                        } else if (X == 0) {
                            X = X.X (X);
                            X = 0;
                        } else if (X == 0) {
                            X X = X.X (0 + X.X (0, 0));
                            X X = X.X (X.X (0, 0));
                            X = (X << 0) | X;
                            X = 0;
                        } else {
                            throw new X (0 + X);
                        }

                        X = new X (new X (X, X));
                    } catch (X X) {
                        throw new X (0 + X);
                    }
                } else {
                    try {
                        X = new X ((X) X.class.X (X.X ()).X (X.class));
                    } catch (X X) {
                        throw new X (0 + X);
                    } catch (X X) {
                        throw new X (0 + X);
                    }
                }
            } else if (X.X (X)) {
                X X = new X (X.X (X));
                while (X.X ()) {
                    X X = X.X ();
                    X X = X.X (0);
                    X X;
                    if (X == - 0) {
                        X = X.class;
                        X = 0;
                    } else {
                        try {
                            X = X.X (X.X (0, X));
                        } catch (X X) {
                            throw new X (0 + X.X (0, X));
                        }
                        X ++;
                    }
                    try {
                        X.X ((X) X (X.X (X.X (X)).X (X), X.class));
                    } catch (X X) {
                        throw new X (0 + X);
                    } catch (X X) {
                        throw new X (0 + X);
                    }
                }
            }

        }
        if (X == 0) {
            throw new X (0);
        }
        X (X, X);
        if (X != 0 && X.X () > 0) {
            X [] X = X.X ();
            X X = 0;
            for (X X = X.X () - 0;
            X >= 0; X --) {
                X = X.X (X, ((X) X.X (X)).X ());
            }
            if (X == 0 || X.X <= X) {
                X [] X = new X [X + 0];
                if (X != 0) {
                    X.X (X, 0, X, 0, X.X);
                }
                X = X;
            }
            for (X X = X.X () - 0;
            X >= 0; X --) {
                X [((X) X.X (X)).X ()] = X;
            }
            X.X (X);
        }
    }

    private X X (X X, X X) throws X {
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X X = X.X (X).X ();
                if (X.X (0)) {
                    X = 0;
                } else if (X.X (0)) {
                    X = 0;
                } else if (X.X (0)) {
                    X = 0;
                } else if (X.X (0)) {
                    X = 0;
                } else if (X.X (0)) {
                    X = 0;
                } else if (X.X (0)) {
                    X = 0;
                } else {
                    throw new X (X + 0 + 0);
                }

            } else if (X.X (X)) {
                X = X.X (X);
            } else if (X.X (X)) {
                X = X.X (X);
            }

        }
        if (X != 0) {
            switch (X) {
                case 0 :
                    X = X (X, X.class);
                    break;
                case 0 :
                    if (X.X ().X (0)) {
                        X = X.X;
                    } else {
                        X = X.X;
                    }
                    break;
                case 0 :
                    X X = new X (X);
                    X = new X (X (X, 0), X (X, 0));
                    break;
                case 0 :
                    X = X (X, X + 0);
                    break;
                case 0 :
                    try {
                        X = new X (X.X (X));
                    } catch (X X) {
                        throw new X (X + 0);
                    }
                    break;
                case 0 :
                    X = X;
                    break;
            }
        }
        if (X == 0 || X == 0) {
            throw new X (X + 0 + 0);
        }
        if (X == X) {
            X.X (X, X);
        } else if (X != 0) {
            if (X.X () == 0) {
                X.X (new X ());
            }
            X.X ().X (X, X);
        } else if (X != 0) {
            if (X.X () == 0) {
                X.X (new X ());
            }
            X.X ().X (X, X);
        }

    }

    private X X (X X) throws X {
        X X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = (X) X (X.X (X), X.class);
            }
        }
        if (X == 0) {
            throw new X (0);
        }
        if (X != 0) {
            X.X (X);
        }
    }

    private X X (X X) throws X {
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            try {
                if (X.X (X)) {
                    X = (X) X (X.X (X), X.class);
                } else if (X.X (X)) {
                    X = X.X (X);
                } else if (X.X (X)) {
                    X = X.X (X.X (X));
                } else if (X.X (X)) {
                    X = X.X (X.X (X));
                } else if (X.X (X)) {
                    X = X.X (X.X (X));
                } else if (X.X (X)) {
                    X = X.X (X.X (X));
                }

            } catch (X X) {
                throw new X (0 + X.X (X));
            }
        }
        if (X == 0) {
            X = new X (X, X, X, X);
        }
        X (X, X);
        if (X != 0) {
            X.X (X);
        }
    }

    private X X (X X) throws X {
        X X = 0;
        X X = 0;
        X X = - 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = (X) X (X.X (X), X.class);
            } else if (X.X (X)) {
                X X = X.X (X).X ();
                if (X.X (0)) {
                    X = X.X;
                } else if (X.X (0)) {
                    X = X.X;
                } else {
                    throw new X (0 + X);
                }

            } else if (X.X (X)) {
                X = X.X (X);
            }

        }
        if (X == 0 || X == 0 || X == - 0) {
            throw new X (0 + 0);
        }
        try {
            X.X (X, X, X);
        } catch (X X) {
            throw new X (0 + X + 0 + 0);
        }
    }

    private X X (X X, X X) throws X {
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = 0;
        X X = - 0;
        X X = 0;
        X X = 0;
        X X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            X X = X.X (X);
            if (X.X (X)) {
                X = X;
            } else if (X.X (X)) {
                X = X.X (X.X);
            } else if (X.X (X)) {
                X = (X) X (X, X.class);
            } else if (X.X (X)) {
                X = X;
            } else if (X.X (X)) {
                X = X (X, X + 0);
            } else if (X.X (X)) {
                X = X (X, X + 0);
            } else if (X.X (X)) {
                X = X.X ().X (0);
                X = 0;
            } else if (X.X (X)) {
                X = X.X ().X (0);
                X = 0;
            } else if (X.X (X)) {
                X = X.X ().X ();
                if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else if (X == 0) {
                    X = X.X;
                } else {
                    throw new X (X + 0);
                }

            } else if (X.X (X)) {
                X = X.X ().X (0);
            }

        }
        if (X == 0) {
            if (X == X) {
                throw new X (X + 0);
            }
            if (X == 0 && ! X) {
                throw new X (0);
            }
            if (X == 0) {
                throw new X (0);
            }
            if (X && (X != 0 || X != 0 || X || X)) {
                throw new X (0 + 0 + 0);
            }
            X = new X (! X, X, X, X, X (X), X);
        }
        X (X, X);
        if (X != 0) {
            X (X, X, X, X);
        } else if (X != 0) {
            X (X, X, X, X);
        }

    }

    private X X (X.X.X X, X X, X X, X X) {
        X.X X;
        X = new X.X (X, X, X);
        for (X X : X) {
            X.X X;
            X = (X.X) X;
            if (X.X (X)) {
                X.X (X);
                return;
            }
        }
        X.X (X);
    }

    private X X (X X) throws X {
        X X = 0;
        X X = 0;
        for (X X = X.X () - 0;
        X >= 0; X --) {
            X X = X.X (X);
            if (X.X (X)) {
                X = X.X (X);
            } else if (X.X (X)) {
                X = X.X (X);
            }

        }
        if (X == 0) {
            throw new X (0);
        }
        X (X, new X (X (X)));
    }

    private X X (X X) throws X {
        if (X != 0) {
            X.X (0);
            for (X X = X.X () - 0;
            X >= 0; X --) {
                X X = X.X (X);
                if (X.X (X)) {
                    X.X (0.X (X.X (X).X ()));
                }
            }
        }
    }

    private X X (X X) throws X {
        X.X ();
        X = 0;
        if (X != 0) {
            for (X X = X.X () - 0;
            X >= 0; X --) {
                X X = X.X (X);
                if (X.X (X)) {
                    X = X.X (X);
                }
            }
        }
    }

    private X X () throws X {
        if (X != 0) {
            X (X, new X.X (X.X (new X [X.X ()])));
        }
        X.X ();
        X = 0;
    }

    private X X (X X) throws X {
        if (X == 0) {
            return;
        }
        if (X != 0) {
            X X = 0;
            X X = 0;
            for (X X = X.X () - 0;
            X >= 0; X --) {
                X X = X.X (X);
                if (X.X (X)) {
                    X = X.X (X);
                } else if (X.X (X)) {
                    X = X.X (X);
                }

            }
            if (X == 0 || X == 0) {
                throw new X (0);
            }
            X.X (X);
            X.X (X);
        }
    }

    public X X (X X, X X) throws X {
        if (X ()) {
            return X ().X (X, X);
        }
        return 0;
    }

    public X X (X X, X X, X X) {
        if (X ()) {
            X ().X (X, X, X);
        }
    }

    public X X (X X, X X, X X, X X) {
        if (X ()) {
            X ().X (X, X, X, X);
        }
    }

    public X X (X X) {
        if (X ()) {
            X ().X (X);
        }
    }

    public X X () throws X {
        if (X ()) {
            X ().X ();
        }
    }

    public X X () throws X {
        if (X ()) {
            X ().X ();
        }
    }

    public X X (X X, X X) throws X {
        X = X.X ();
        if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X, X);
        } else if (X == X) {
            X (X, X);
        } else if (X == X) {
            X (X, X);
        } else if (X == X) {
            X (X, X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X == X) {
            X (X);
        } else if (X != X) {
            if (X ++ == 0) {
                X ().X ();
            }
            X ().X (X, X);
        }

    }

    public X X (X X) throws X {
        if (X ()) {
            X ().X (X);
            X --;
            if (! X ()) {
                X ().X ();
            }
        } else {
            X = X.X ();
            if (X == X) {
                X ();
            } else if (X == X) {
                X ();
            } else if (X == X) {
                X ();
            }

        }
    }

    public X X (X X [], X X, X X) throws X {
        if (X ()) {
            X ().X (X, X, X);
        }
    }

    public X X (X X [], X X, X X) throws X {
        if (X ()) {
            X ().X (X, X, X);
        }
    }

    public X X (X X, X X) throws X {
        if (X ()) {
            X ().X (X, X);
        }
    }

    public X X (X X) throws X {
        if (X ()) {
            X ().X (X);
        }
    }

    public X X (X X) throws X {
        if (X ()) {
            X ().X (X);
        }
    }

    public X X (X X) throws X {
        if (X ()) {
            X ().X (X);
        }
        throw X;
    }

    private static class X extends X implements X {
        private X X;

        public X (X X) {
            X ();
            X.X = X;
        }

        public X X (X X, X X, X X, X X) {
            if (X () != 0) {
                X.X (X, X, X, X);
            }
        }

        public X X () {
            if (X () != 0) {
                return X.X ();
            }
            return 0;
        }

        public X X () {
            if (X () != 0) {
                return X.X ();
            }
            return 0;
        }

        public X X () {
            if (X != 0) {
                X (X.X ().X (X));
                X = 0;
            }
            return X.X ();
        }

    }

}

