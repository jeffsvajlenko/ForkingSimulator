package X.X.X.X;

import X.X.*;

import X.X.X.*;

import X.X.X.*;

import X.X.X.X.X;

import X.X.*;

import X.X.X.*;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.*;

import X.X.X;

import X.X.X.X.X;

class X extends X implements X, X {
    private X X;
    private X X;
    private X X;

    public static X X (X X) {
        return new X ();
    }

    protected X X () {
        X.X ();
        X.X (X);
        if (X != 0) {
            X.X (X);
            X.X (X);
        }
    }

    protected X X () {
        X (X);
        if (X.X (0)) {
            X = new X ();
            for (X X : X.X ()) {
                X.X X;
                if (X instanceof X.X) {
                    X = (X.X) X;
                } else if (X instanceof X) {
                    X = ((X) X).X ();
                } else {
                    continue;
                }

                if (X.X () == X) {
                    X.X (X);
                }
                if (X.X () != X) {
                    X.X (X);
                    X.X ().X (X);
                }
            }
            X.X (X.X ());
            X.X (X, new X (X.X.X () + 0));
            if (X.X ()) {
                X.X ();
            }
        }
    }

    private X X (X X) {
        X X = X;
        X X = X (X, X);
        X = X.X (X, X);
        if (X != 0) {
            X ();
            X ();
        }
        X.X ();
    }

    protected X X () {
        if (X != 0) {
            X.X (X);
            X.X (X);
        }
        X.X (X);
        X.X ();
    }

    protected X X () {
        X X = X (X, X);
        X.X (X);
        X.X ();
        X = 0;
        if (X != 0) {
            for (X X : X.X ()) {
                X.X X = (X.X) X;
                X.X (X);
                X.X (0);
                X X = X.X ();
                if (X.X ()) {
                    X.X (X);
                }
                X.X (X);
            }
            X.X (X);
            X = 0;
        }
    }

    protected X X () {
        if (X.X (0)) {
            X = X = X.X ();
            if (! (X instanceof X)) {
                X = new X ();
                X.X (X);
            }
        } else {
            X.X ();
        }
    }

    protected X X () {
        if (X != 0 && ! (X instanceof X)) {
            X = X.X ();
            if (X == 0 || X instanceof X) {
                X.X (X);
            }
        }
        X = 0;
        X.X ();
    }

    static class X extends X implements X, X {

        X () {
            X (0);
            X (new X (X.X, 0, 0) {

                public X X (X X) {
                    X [] X = X.X ();
                    X X = X.X;
                    if (X > 0) {
                        X X = 0;
                        for (X X : X) {
                            X.X (0);
                            X X = X.X ();
                            if (X.X > X) {
                                X = X.X;
                            }
                        }
                        X X = X.X ();
                        X X = X.X () - X.X - X.X;
                        X X = X.X (X, X.X (0, X / X));
                        for (X X : X) {
                            X X = X.X ();
                            X.X (new X (X, X.X));
                        }
                    }
                    X.X (X);
                }

            }

            );
            X (new X (X.X) {

                protected X X (X X, X X, X X, X X, X X, X X) {
                    X X = X.X ();
                    X.X (X, X);
                    X.X (X (X));
                    X.X (0, 0, 0, X - 0);
                    X.X (0, 0, X - 0, 0);
                    X.X (X (X));
                    X.X (0, X - 0, X - 0, X - 0);
                    X.X (X - 0, 0, X - 0, X - 0);
                    X.X (- X, - X);
                    X.X (X);
                }

            }

            );
        }

        X X () {
            X X = (X) X ();
            if (X != 0) {
                X X = X ().X;
                X X = X ();
                if (X == X.X + X.X) {
                    if (X () <= X) {
                        X += 0;
                    } else {
                        X = X ();
                    }
                }
                X (0, X.X () - X, X.X (), X);
                X ();
                X ();
            }
        }

        public X X (X X) {
            if (X.X () instanceof X) {
                X ();
            }
        }

        public X X (X X) {
        }

        public X X (X X) {
            if (X.X () instanceof X) {
                X ();
            }
        }

        public X X (X X) {
            if (X.X () instanceof X) {
                ((X) X.X ()).X ().X (0);
                X ();
            }
        }

        public X X (X X) {
            if (X.X () instanceof X) {
                X X = (X) X.X ();
                X X = (X) X.X ();
                X.X X = X.X ();
                for (X X : X ()) {
                    if (X == X) {
                        return;
                    }
                }
                X (X);
                X.X (X);
                if (X () == 0) {
                    X ();
                }
            }
        }

        public X X (X X) {
            if (X.X () instanceof X) {
                X X = (X) X.X ();
                if (! X.X ()) {
                    X (X.X ());
                    X.X (X);
                    X ();
                    X ();
                }
            }
        }

    }

    class X extends X implements X {

        public X X (X X) {
            if (X.X ()) {
                try {
                    X.X (0);
                } catch (X X) {
                }
            } else {
                X.X (X.X ());
                X X = X.X ();
                X (X, 0, 0, X.X (), X.X () - X.X ());
            }
            try {
                X.X (0);
            } catch (X X) {
            }
        }

        public X X (X X) {
            X.X X;
            X X = X.X ();
            X X = X.X ();
            X X = X.X ();
            if (X == 0) {
                return;
            }
            X = X.X ();
            if (! X.X ()) {
                X.X (X.X ());
            }
            X.X (X);
            X.X (X.X (), X.X (), X.X (), X.X ());
            try {
                X.X (0);
            } catch (X X) {
            }
            if (X) {
                for (X X : X.X ()) {
                    if (X instanceof X) {
                        try {
                            ((X) X).X (0);
                        } catch (X X) {
                        }
                        ((X) X).X ();
                        return;
                    }
                }
            }
        }

        public X X (X X) {
            X.X X = X.X ();
            X X = X.X ();
            if (X != 0) {
                X = X.X ();
                if (X != 0) {
                    X.X (X);
                    if (X.X ()) {
                        X X = X.X ();
                        X X = X.X () - X.X ();
                        if (X.X () != X || X.X () != X) {
                            X (X, 0, 0, X, X);
                        }
                    }
                    if (X.X ()) {
                        X.X ();
                    } else {
                        try {
                            X.X (0);
                        } catch (X X) {
                        }
                    }
                }
            }
        }

        protected X X (X X) {
            X.X (X);
            X.X ();
        }

        public X X (X X, X X, X X, X X, X X) {
            X.X (X, X, X, X, X);
            if (X != 0 && X >= X.X ()) {
                X.X (X.X (), X.X () - X.X ().X);
            }
        }

    }

    public X X (X X) {
        return X (X, X (X));
    }

    private X X (X X, X X) {
        return X.X (X.class, X, X.X (X), X, X);
    }

    private X X (X X) {
        return X.X (X);
    }

    private X X (X X) {
        return X.X (X);
    }

    public X X (X X, X X) {
        X X = X (X);
        X.X (X, X);
        X.X ().X (X, X, 0, 0, X.X (), X.X ());
        X (X, X);
        X.X ();
    }

    public X X (X X, X X) {
        X X = X (X);
        X (X, X);
        X.X ();
    }

    protected X X (X X, X X) {
    }

    public X X (X X, X X, X X, X X, X X, X X) {
        X.X ().X (X, X, X, X, X, X);
    }

    public X X (X X) {
        if (X.X (X)) {
            X ((X) X.X ());
        }
        if (X.X () == 0 && X != 0) {
            X.X ();
        }
    }

}

