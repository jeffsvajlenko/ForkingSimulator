package X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

class X extends X implements X, X {
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;
    private X X;

    public static X X (X X) {
        return new X ();
    }

    X () {
        X = new X ();
    }

    @X
    public X X () {
        return X;
    }

    @X
    protected X X () {
        X (X);
    }

    private X X (X X) {
        X X = X (X, X);
        X X = X;
        X = X.X (X, X);
        if (X != X) {
            X X;
            X (X.X (X, 0));
            X (X.X (X, 0));
            X (X.X (X, 0, 0));
            X (X.X (X, 0, 0));
            X = X.X (X, 0, 0);
            X = X.X (X, 0, 0);
            X = X.X (X, 0);
            X = X.X (X, 0);
            if (X != 0) {
                X.X (X, 0, X);
            }
            X = X.X (X, 0);
            X.X (X, 0, X != 0 ? X : X.X);
            X = X.X (X, 0, 0);
            X = (X.X () && X.X () > 0);
            X = X.X (X, 0, 0);
            X X = X.X (X, 0, X.X);
            X.X (X, X.X, X);
            if (X != 0) {
                X ();
                X ();
            }
        }
        X.X ();
        X = X (X, X.X, X);
        X = X.X (X, X);
        X.X ();
    }

    @X
    protected X X () {
        X.X ();
        X.X (X);
    }

    @X
    public X X (X X) {
        return X (X, X (X));
    }

    private X X (X X, X X) {
        return X.X (X.class, X, X.X (X), X, X);
    }

    private X X (X X) {
        return X.X (X);
    }

    private X X (X X) {
        return X.X (X);
    }

    private X X (X X, X X) {
        return X (X, X, X (X, X));
    }

    private X X (X X, X X, X X) {
        return X.X (X.class, X, X, X, X);
    }

    private X X (X X, X X) {
        return X | X;
    }

    @X
    protected X X () {
        X X = X.X ();
        X X;
        if (X != 0 && (X instanceof X)) {
            X = new X (X, (X) X);
        } else {
            X = new X (X, 0);
        }
        return X;
    }

    @X
    protected X X () {
        return new X ();
    }

    @X
    protected X X () {
        X X = X (X, X);
        X.X (X);
        X.X ();
        X = 0;
        X = X (X, X.X, X);
        X.X (X);
        X.X ();
        X = 0;
        if (X.X () instanceof X) {
            X.X (0);
        }
    }

    @X
    protected X X () {
        X.X ();
        X.X (X);
    }

    @X
    public X X (X X, X X) {
        X X = X (X);
        X.X (X, X);
        X.X ().X (X, X, 0, 0, X.X (), X.X ());
        X (X, X);
        X.X ();
    }

    public X X (X X, X X, X X, X X, X X, X X) {
        X.X ().X (X, X, X, X, X, X);
    }

    @X
    public X X (X X, X X) {
        X X = X (X);
        X (X, X);
        X.X ();
    }

    private X X () {
        X = X (X, X.X ());
    }

    protected X X (X X, X X) {
        X = X;
        X ();
        X X = X.X ();
        X X = X.X ();
        X X = X (X, 0, X.X);
        X X = X.X (X);
        X X = X.X (X);
        X X = X.X + X.X;
        X X = X.X ();
        X X = X (X, X.X);
        X.X ();
        X (X.X ().X (X, X.X));
        if (X != 0) {
            X X = 0;
            X X;
            X X;
            X X;
            X X = new X ();
            X X = new X (0, 0, X.X (), 0);
            X X;
            X X;
            X X = X.X ();
            X X = (X instanceof X) ? (X) X : 0;
            X (X);
            while (! X && X.X ()) {
                X = (X) X.X ();
                if (X != 0) {
                    X = X.X (X.X ());
                    if (X) {
                        X = X = 0;
                    } else {
                        X = X.X (X);
                        X = X.X (X);
                    }
                    X = X (X, X);
                    X.X = X.X;
                    X.X = X.X;
                    X (X, X, X, X, X, X, X, X, X, X, X, X, X, X);
                    if ((X.X + X.X) >= X) {
                        X = 0;
                    }
                } else {
                    X = 0;
                }
                X ++;
            }
            X X = X.X ();
            X X = X;
            X = X.X ();
            while (X != 0) {
                X (X, X, X, X);
                X.X (X, X.X);
                X = X.X ();
            }
            X = 0;
            X = X.X (X);
            while (! X && X.X ()) {
                X = (X) X.X ();
                if (X != 0) {
                    X = X.X (X.X ());
                    if (X) {
                        X = X = 0;
                    } else {
                        X = X.X (X);
                        X = X.X (X);
                    }
                    X = X (X, X);
                    X = X.X ();
                    if (X != 0) {
                        if (X.X (X) == 0) {
                            X (X, X, X, X);
                            X.X (X, X.X);
                        }
                        X (X, X, X, X, X, X, X, X, X);
                    } else if (X && X == 0) {
                        X (X, X, X, X, X, X, X, X, X);
                    }

                    if (X (X, X, X, X, X)) {
                        X (X, X, X, X, X, X, X, X, X);
                    }
                    if ((X.X + X.X) >= X) {
                        X = 0;
                    }
                } else {
                    X = 0;
                }
                X ++;
            }
        }
        X.X ();
        X (X);
        X.X ();
    }

    private X X (X.X X) {
        return X != 0 && X.X () != 0 && X.X () != - 0;
    }

    private X X (X X) {
        X.X X = X.X ();
        if (! X (X)) {
            return;
        }
        X X = (X) X.X (X, 0);
        if (X != 0) {
            X.X (X);
            X X = X (X);
            X.X (X.X, X.X, X.X, X.X);
        }
    }

    private X X (X.X X) {
        X X = 0;
        X X = X.X ();
        X X = X.X ();
        X X = X.X ().X ();
        X X = X.X ();
        if (X.X () == 0) {
            X = new X (X.X, X.X, X.X () - X.X - X.X, 0);
        } else {
            X X = X.X (X);
            X X = X ();
            X X = X.X ();
            if (X.X () == X && X >= X.X (X)) {
                X = X.X (X.X () - 0);
                X.X = X.X + X.X;
                X X;
                if (! X.X ()) {
                    X = X.X (0);
                } else if (X.X (X) == 0) {
                    X = X.X (0);
                    X.X += X;
                    X.X -= X + X;
                } else {
                    X X = X.X (X.X (X, X.X (X) - 0));
                    X = X.X (X);
                }

                X.X = X.X;
                X.X = X.X;
            } else {
                X = X.X (X.X (X.X (X.X (), X)));
            }
        }
        if (X.X != 0) {
            X.X --;
        }
        if (! X) {
            X.X = X.X + X.X - 0;
        }
        X.X = 0;
        X.X = 0;
        return X;
    }

    private X X (X X) {
        X X = X.X ();
        if (X instanceof X) {
            X X = (X) X;
            X X = X.X ();
            X.X (X | X);
            X X = X.X ();
            if (X == 0 || (X instanceof X)) {
                X.X (X.X (X, X.X));
            }
            X = X.X ();
            if (X == 0 || (X instanceof X)) {
                X.X (X.X (X, X.X));
            }
            X.X (X);
            X = X.X ();
            if (X == 0 || X instanceof X) {
                X.X (X.X (X, X.X));
            }
            X = X.X ();
            if (X == 0 || X instanceof X) {
                X.X (X.X (X, X.X));
            }
        }
    }

    @X
    protected X X (X X, X X, X X, X X, X X, X X, X X, X X, X X) {
        if (X) {
            X.X (X, X, X, X, X, X, X, X, X);
        }
    }

    @X
    protected X X (X X, X X, X X, X X, X X) {
        X.X ().X (X).X (X, 0, X, X, X, X, X, X);
    }

    @X
    protected X X (X X, X X, X X, X X) {
        if (X) {
            X.X (X, X, X, X);
        }
    }

    @X
    protected X X (X X, X X, X X, X X, X X) {
        X.X ().X (X).X (X, 0, X, X, X, X, X, X);
    }

    protected X X (X X, X X, X X, X X, X X, X X, X X, X X, X X, X X, X X, X X, X X, X X) {
        X X = X.X (X);
        X.X X = (X.X) X.X ();
        X X = X != 0 && X.X () == - 0 && X == X.X ();
        X X = X;
        if (X || X) {
            X |= X;
        }
        if (X.X () && X == X) {
            X |= X;
        }
        X.X (X);
        if (X != 0 && (X.X () instanceof X)) {
            X.X (X.X (X, X.X));
        }
        X.X (X, X, X);
        X.X ().X (X, X, X.X, X.X, X.X, X.X);
        X.X ().X (X, X, X.X, X.X, X.X, X.X);
        if (X != 0 && X == X) {
            return;
        }
        X X;
        if (X.X ()) {
            X = X;
        } else {
            X = - 0;
        }
        X X = X.X (X, X.X (), X, X, X, X, (X == X));
        X.X (X, X, X, X.X, X.X, X.X, X.X, 0);
    }

    private X X (X X, X X) {
        return X.X ().X () ? X - (X) X.X (X / 0) : X - (X) X.X (X / 0);
    }

    @X
    protected X X (X X, X X, X X, X X, X X, X X, X X, X X, X X) {
        X X = X.X ().X (X);
        X X = X.X ();
        if (X) {
            X.X (X | X.X);
        }
        X.X (X, X, X, X, X, X, X, X, X);
        X.X (X);
    }

    @X
    protected X X (X X, X X, X X, X X, X X) {
        X X = X.X (X, X);
        X X = X.X (X, X);
        X.X (X, X, X, X (X, X), X - X / 0, X, X);
    }

    public X X (X X) {
        if (X.X (X)) {
            X ((X) X.X ());
        }
        if (0 == X.X ()) {
            X.X X = (X.X) X.X ();
            X (X);
            X (X.X ());
        }
    }

    private X X (X.X X) {
        if (X == 0) {
            return;
        }
        X X;
        if (X (X)) {
            X = X (X);
        } else {
            X = X.X (X.X ());
            if (X != 0) {
                X.X = 0;
                X.X = X.X ();
            }
        }
        if (X != 0) {
            X.X (X);
        }
    }

    @X
    protected X X (X X, X X) {
        return X.X (X, X) + X;
    }

    private class X extends X implements X {

        X () {
        }

        @X
        public X X () {
            return 0;
        }

        @X
        public X X (X X, X X, X X, X X, X X, X X, X X) {
            if (! X && (X || X)) {
                X.X ((X) X.X (X (), X.class), X, X, X.X (), 0);
            } else {
                X.X ();
            }
            return X.X (X, X, X, X, X, X, X);
        }

        @X
        public X X (X X) {
            X (X);
            if (X) {
                X X = X (X, X.X);
                if (X.X () == 0) {
                    assert 0 : 0 + 0;
                    return;
                }
                X X = 0;
                X X = X ();
                if (X != 0 && X () != 0) {
                    X = X.X () + X.X (0, X () - 0);
                }
                if (X) {
                    X.X (X | X);
                } else {
                    X.X (X);
                }
                if (X ().X ()) {
                    X.X ().X (X, X, X, 0, X () - X, X ());
                } else {
                    X.X ().X (X, X, 0, 0, X () - X, X ());
                }
                X.X ();
            }
            X.X ();
        }

    }

    private static class X extends X {

        public X (X X, X X) {
            X (X, X);
            X (0);
        }

        @X
        protected X X () {
            X X = new X () {

                @X
                public X X () {
                    return 0;
                }

            }

            ;
            X X = new X (X);
            X.X (0);
            return X;
        }

    }

    private class X extends X {

        public X X (X X, X X, X X, X X, X X, X X) {
            if (X == 0) {
                X = X (X);
                X.X (X, X, X, X, X, X, X);
                X.X ();
            } else {
                X.X (X, X, X, X, X, X, X);
            }
        }

        public X X (X X) {
            X X;
            if (X == 0) {
                X = X (X);
                X = X.X (X, X);
                X.X ();
            } else {
                X = X.X (X, X);
            }
            return X;
        }

        public X X (X X) {
            X X;
            if (X == 0) {
                X = X (X);
                X = X.X (X, X);
                X.X ();
            } else {
                X = X.X (X, X);
            }
            return X;
        }

    }

}

