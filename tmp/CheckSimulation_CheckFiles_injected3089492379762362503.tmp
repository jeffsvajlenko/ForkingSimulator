package X.X.X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.*;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.*;

import X.X.X;

public class X implements X.X.X.X {
    private X X;
    private X X;
    private X X;
    private X X;
    private X X = 0;
    private X X;
    private X X = 0;
    private X X = 0;

    X (X X, X X) {
        X.X = X.X = X;
        X.X = X.X = X;
    }

    X (X X, X X, X X, X X) {
        X.X = X;
    }

    public X X (X X) {
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        X.X = X;
    }

    public X X () {
        return X;
    }

    public X X (X X) {
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        X.X = X;
    }

    public X X () {
        return X;
    }

    public X X (X X) {
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        X.X = X;
        X.X = new X (X);
    }

    public X X () {
        return X;
    }

    private static X X = 0;

    private X X () {
        try {
            X X = X.X (X);
            return X.X ();
        } catch (X X) {
            throw new X (X);
        }
    }

    private X X (X X, X X) throws X.X.X.X {
        X.X.X.X.X.X.X X = new X.X.X.X.X.X.X (X, 0, X, X.X.X.X.X.X.X.X);
        X.X.X.X.X.X.X X = 0;
        if (X != 0) {
            X X = new X (X, X);
            X = new X.X.X.X.X.X.X (X);
        } else {
            X = new X.X.X.X.X.X.X ();
        }
        X X = 0;
        X.X (new X (X));
        if (X instanceof X) {
            X = X.X (X, (X) X, X);
        } else {
        }
        return X;
    }

    public X X (X X, X X, X X) throws X {
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        if (! X (X)) {
            X X = X.X (X.X, new X [] {X.X ()});
            throw new X (X);
        }
        try {
            return X (X, X);
        } catch (X.X.X X) {
            throw new X (X);
        } catch (X.X.X.X X) {
            X X = X.X ();
            if (X instanceof X.X.X.X) {
                throw (X.X.X.X) X;
            } else {
                throw new X (X);
            }
        }
    }

    private X X (X X) {
        if ((X.X (X.X)) || (X.X (X.X)) || (X.X (X.X)) || (X.X (X.X)) || (X.X (X.X))) {
            return 0;
        }
        return 0;
    }

    private X X (X X, X X) throws X.X.X.X {
        if (X.X (X.X)) {
            return X.X ();
        }
        if (X.X (X.X)) {
            return new X (X.X ());
        }
        if (X.X (X.X)) {
            return new X (X.X ());
        }
        if (X.X (X.X)) {
            return X.X ();
        }
        if (X.X (X.X)) {
            return X.X ();
        }
        X X = X.X (X.X, new X [] {X.X ()});
        throw new X (X);
    }

    public X X (X X, X X) throws X {
        return (X) X.X (X, X, X.X);
    }

    public X X (X X) throws X {
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        try {
            X.X.X.X.X.X.X X = new X (X, 0, X, X.X.X.X.X.X.X.X);
            X X = new X (X, X, X, X, X, X);
            return X;
        } catch (X.X.X.X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X, X X) throws X {
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        if (X == 0) {
            X X = X.X (X.X, new X [] {0});
            throw new X (X);
        }
        if (! X (X)) {
            X X = X.X (X.X, new X [] {X.X ()});
            throw new X (X);
        }
        try {
            return X (X, X);
        } catch (X X) {
            throw new X (X);
        } catch (X X) {
            throw new X (X);
        } catch (X.X.X.X X) {
            X X = X.X ();
            if (X instanceof X.X.X.X) {
                throw (X.X.X.X) X;
            } else {
                throw new X (X);
            }
        }
    }

    public X X (X X, X X) throws X {
        return (X) X.X (X, X, X.X);
    }

    public X X () {
        X.X = X.X;
        X.X = X.X;
        X.X = 0;
    }

}

