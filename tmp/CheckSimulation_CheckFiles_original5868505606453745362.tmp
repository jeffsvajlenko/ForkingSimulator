package X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.*;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

public class X {
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private static final X X = 0;
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private X X;
    private X X = new X ();
    private X X;
    private X X = 0;
    private X X = 0;
    private X [] X;
    private X X = 0;
    private static final X [] X = {};
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private static final X.X.X.X X = X.X.X.X.X (0, 0);

    private X X (X X) throws X {
        X X = X.X ();
        if (X != 0 && ! X) {
            X.X (new X (0 + X));
        }
        if (X == 0) throw new X (X.X (0));

        if (X == 0) {
            X = (X) X.X.X.X (new X.X.X () {

                public X X () {
                    return X.X ();
                }

            }

            );
        }
        X [] X = X.X (X);
        if (X == 0) {
            if (X != 0 && ! X) {
                X.X (new X (0 + X));
            }
            X = X.X (X);
            if (X == 0) {
                X X = new X (X.X (0));
                X [] X = {X};
                throw new X (X.X (X));
            }
        }
        X = new X [X.X];
        for (X X = 0;
        X < X.X; X ++) {
            X [X] = new X (new X (X [X].X (), X [X].X (), X [X].X ()), 0);
        }
        X = (X) X.X.X.X (new X.X.X () {

            public X X () {
                return X.X ().X ();
            }

        }

        );
    }

    private X X () throws X {
        try {
            final X X = X;
            X.X = (X) X.X.X.X (new X.X.X () {

                public X X () throws X {
                    X X = X.X.X.X (X);
                    if (X == 0 || X.X () == 0) return 0;

                    X X = X.X (X, 0, X);
                    return X.X ();
                }

            }

            );
        } catch (X.X.X X) {
            throw new X (X.X ().X ());
        }
        if (X.X != 0 && ! X) {
            X.X = new X (X.X.X.X (), X.X);
        }
    }

    public X (X X) throws X {
        X (X);
        X ();
    }

    public X (X X, X X) throws X {
        X (X);
        if (X == 0) throw new X (X.X (0));

        X.X = X;
        X = 0;
        X ();
    }

    public X (X X, X X) throws X {
        X (X);
        if (X == 0) throw new X (X.X (0));

        X.X = new X (X.X.X.X (), X);
    }

    public X (X X, X X, X X) throws X {
        X (X, X);
        if (X == 0) throw new X (X.X (0));

        X.X = new X (X.X.X.X (), X);
    }

    public X (X X, X X, X X, X X) throws X {
        X.X = X;
        X = (X != 0) ? 0 : 0;
        if (X) {
            X = X.X.X.X ();
        }
        X (X);
        if (X != 0) {
            X.X = X;
            X = 0;
        }
        if (X == 0) {
            X ();
        } else if (! X) {
            X.X = new X (X.X.X.X (), X);
        } else {
            X.X = X;
        }

    }

    public X X () throws X {
        X = 0;
        if (X == 0) {
            X = new X ();
        }
        try {
            if (X) {
                X (X);
                X (X);
            } else {
                X (X);
                X (X);
            }
            X = 0;
        } catch (X X) {
            try {
                if (X) {
                    X (X);
                } else {
                    X (X);
                }
            } catch (X X) {
                throw X;
            }
            throw X;
        }
    }

    public X X () throws X {
        if (X == 0) {
            throw new X (X.X (0));
        }
        if (X) {
            X (X);
        } else {
            X (X);
        }
    }

    public X X () {
        if (! X && ! X) return 0;

        return X;
    }

    private X X () {
        X = 0;
        X = 0;
        X = 0;
        X = 0;
    }

    private X X (X X, X X) throws X {
        X ();
        X X = (X != 0) ? X : X;
        throw X;
    }

    private X X (final X X) throws X {
        try {
            X.X.X.X (new X.X.X () {

                public X X () throws X {
                    X (X);
                    return 0;
                }

            }

            );
        } catch (X.X.X X) {
            throw (X) X.X ();
        }
    }

    private X X (final X X) throws X {
        try {
            X.X.X.X (new X.X.X () {

                public X X () throws X {
                    X (X);
                    return 0;
                }

            }

            , X);
        } catch (X.X.X X) {
            throw (X) X.X ();
        }
    }

    private X X (X X) throws X {
        for (X X = X;
        X < X.X; X ++, X ++) {
            try {
                X X = 0;
                X [] X = 0;
                if (X [X].X != 0) {
                    X = X [X].X.X ().X ();
                } else {
                    X X = X.X (X [X].X.X (), 0, X);
                    X X = X.X (X);
                    X [] X = {};
                    X [X].X = X.X (X);
                    X = X [X].X.X ().X ();
                    for (X = 0; X < X.X; X ++) {
                        if (X [X].X ().X (X)) break;

                    }
                    X [] X = {X, X, X, X [X].X.X ()};
                    X [X].X (X [X].X, X);
                }
                for (X = 0; X < X.X; X ++) {
                    if (X [X].X ().X (X)) break;

                }
                X [] X = {};
                X X = ((X) X [X].X (X [X].X, X)).X ();
                if (X == 0) {
                    if (! X.X (X) && ! X.X (X) && X [X].X.X () == X.X.X && X == 0) {
                        X ();
                        if (X != 0) X.X (X + 0);

                        return;
                    }
                    if (X != 0) X.X (X + 0);

                    X = 0;
                } else {
                    if (X != 0) X.X (X + 0);

                }
            } catch (X X) {
                X X = new X (X.X (0 + 0));
                X [] X = {X [X].X.X ()};
                X (0, new X (X.X (X)));
            } catch (X X) {
                X (0, new X (X.X (0) + X.X ()));
            } catch (X X) {
                X (0, new X (X.X (0) + X.X ()));
            } catch (X X) {
                X (0, new X (X.X (0) + X.X ()));
            } catch (X X) {
                X X;
                if (X.X () instanceof X && X.X (X)) {
                    throw (X) X.X ();
                } else if (X.X () instanceof X) {
                    X = (X) X.X ();
                } else if (X.X () instanceof X) {
                    X = new X (0);
                    X.X (new X ());
                    if (X != 0) {
                        X.X (0 + 0);
                        X.X (0 + X.X ().X ());
                    }
                } else {
                    X.X.X X = new X.X.X ();
                    X.X ().X (new X.X.X (X));
                    X.X ();
                    X = new X (X.X ());
                }

                if (X [X].X.X () == X.X.X) {
                    if (X != 0) X.X (X + 0);

                    if (X.X (X) || X.X (X)) {
                        if (X == 0) X = X;

                    } else {
                        X (X, X);
                    }
                } else if (X [X].X.X () == X.X.X) {
                    if (X != 0) X.X (X + 0);

                    if (X == 0) X = X;

                } else {
                    if (X != 0) X.X (X + 0);

                    if (X == 0) X = X;

                }

            }
        }
        if (X != 0) {
            X (X, 0);
        } else if (X == 0 && X != 0) {
            X (X, 0);
        } else if (X == 0) {
            X (new X (X.X (0)), 0);
        } else {
            X ();
            return;
        }

    }

    private static class X implements X {
        private final X.X.X X;
        private final X X;

        X (X.X.X X, X X) {
            X.X = X;
            X.X = X;
        }

        public X X (final X [] X) throws X.X.X, X {
            try {
                X.X.X.X (new X.X.X () {

                    public X X () throws X.X.X, X {
                        X.X (X);
                        return 0;
                    }

                }

                , X);
            } catch (X.X.X X) {
                if (X.X () instanceof X.X.X) {
                    throw (X.X.X) X.X ();
                } else {
                    throw (X) X.X ();
                }
            }
        }

    }

    private static class X {
        X X;
        X X;

        X (X X, X X) {
            X.X = X;
            X.X = X;
        }

    }

}

