package X.X.X.X;

import X.X.*;

import X.X.*;

public class X {
    private static final X X;
    private X X;
    private X X;
    private X X;
    private X X;

    static {
        X = new X ();
    }

    static X X (X X, X X, X X, X X, X X) {
        X X = 0;
        synchronized (X) {
            if (X != 0) {
                X X = X.X ();
                if (X > 0) {
                    X = (X) X.X (X - 0);
                }
            }
        }
        if (X == 0) {
            try {
            } catch (X X) {
            } catch (X X) {
            }
        }
        X.X (X, X, X, X);
        return X;
    }

    static X X (X X) {
        synchronized (X) {
            X.X.X X = (X.X.X) X.X (X.X ());
            if (X == 0) {
                X = new X (0);
            }
        }
    }

    X () {
    }

    public X (X X, X X, X X, X X) {
        if (X == 0 || X == 0 || X == 0) {
            throw new X (0);
        }
    }

    public X X () {
        return X;
    }

    public X X () {
        return X;
    }

    X X () {
        return X ().X ();
    }

    X X (X X) {
        X.X = X;
    }

    public X X () {
        return X;
    }

    X X (X X) {
        X.X = X;
    }

    public X X () {
        return X;
    }

    X X (X X, X X, X X, X X) {
        X.X = X;
        X.X = X;
        X.X = X;
    }

    X X () {
        X.X = 0;
        X.X = 0;
        X (X);
    }

    X X () {
        X X = X ().X (X);
        if (X != 0) {
            return X;
        }
        return X.X;
    }

}

