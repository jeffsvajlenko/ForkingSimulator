package javax.management.modelmbean;

import java.io.IOException;

import java.io.ObjectInputStream;

import java.io.ObjectOutputStream;

import java.io.ObjectStreamField;

import java.security.AccessController;

import java.security.PrivilegedAction;

import javax.management.Descriptor;

import javax.management.DescriptorAccess;

import javax.management.*;

import java.lang.reflect.*;

import com.sun.jmx.mbeanserver.GetPropertyAction;

import com.sun.jmx.trace.Trace;

public class ModelMBeanOperationInfo extends MBeanOperationInfo implements DescriptorAccess {
    private static final long oldSerialVersionUID = 9087646304346171239L;
    private static final long newSerialVersionUID = 6532732096650090465L;
    private static final ObjectStreamField [] oldSerialPersistentFields = {new ObjectStreamField ("operationDescriptor", Descriptor.class), new ObjectStreamField ("currClass", String.class)};
    private static final ObjectStreamField [] newSerialPersistentFields = {new ObjectStreamField ("operationDescriptor", Descriptor.class)};
    private static final long serialVersionUID;
    private static final ObjectStreamField [] serialPersistentFields;
    private static boolean compat = false;

    static {
        try {
            GetPropertyAction act = new GetPropertyAction ("jmx.serial.form");
            String form = AccessController.doPrivileged (act);
            compat = (form != null && form.equals ("1.0"));
        } catch (Exception e) {
        }
        if (compat) {
            serialPersistentFields = oldSerialPersistentFields;
            serialVersionUID = oldSerialVersionUID;
        } else {
            serialPersistentFields = newSerialPersistentFields;
            serialVersionUID = newSerialVersionUID;
        }
    }

    private Descriptor operationDescriptor = createDefaultDescriptor ();
    private static final String currClass = "ModelMBeanOperationInfo";

    public ModelMBeanOperationInfo (String description, Method operationMethod) {
        super (description, operationMethod);
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo(String,Method)", "Executed");
        }
        operationDescriptor = createDefaultDescriptor ();
    }

    public ModelMBeanOperationInfo (String description, Method operationMethod, Descriptor descriptor) {
        super (description, operationMethod);
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo(String,Method,Descriptor)", "Executed");
        }
        if (descriptor == null) {
            if (tracing ()) {
                trace ("ModelMBeanOperationInfo()", "Received null for new descriptor value, setting descriptor to default values");
            }
            operationDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (descriptor)) {
                operationDescriptor = (Descriptor) descriptor.clone ();
            } else {
                operationDescriptor = createDefaultDescriptor ();
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanOperationInfo constructor"));
            }
        }
    }

    public ModelMBeanOperationInfo (String name, String description, MBeanParameterInfo [] signature, String type, int impact) {
        super (name, description, signature, type, impact);
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo(String,String,MBeanParameterInfo[],String,int)", "Executed");
        }
        operationDescriptor = createDefaultDescriptor ();
    }

    public ModelMBeanOperationInfo (String name, String description, MBeanParameterInfo [] signature, String type, int impact, Descriptor descriptor) {
        super (name, description, signature, type, impact);
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo(String,String,MBeanParameterInfo[],String,int,Descriptor)", "Executed");
        }
        if (descriptor == null) {
            if (tracing ()) {
                trace ("ModelMBeanOperationInfo()", "Received null for new descriptor value, setting descriptor to default values");
            }
            operationDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (descriptor)) {
                operationDescriptor = (Descriptor) descriptor.clone ();
            } else {
                operationDescriptor = createDefaultDescriptor ();
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanOperationInfo constructor"));
            }
        }
    }

    public ModelMBeanOperationInfo (ModelMBeanOperationInfo inInfo) {
        super (inInfo.getName (), inInfo.getDescription (), inInfo.getSignature (), inInfo.getReturnType (), inInfo.getImpact ());
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo(ModelMBeanOperationInfo)", "Executed");
        }
        Descriptor newDesc = inInfo.getDescriptor ();
        if (newDesc == null) {
            operationDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (newDesc)) {
                operationDescriptor = (Descriptor) newDesc.clone ();
            } else {
                operationDescriptor = createDefaultDescriptor ();
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanOperationInfo constructor"));
            }
        }
    }

    public Object clone () {
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo.clone()", "Executed");
        }
        return (new ModelMBeanOperationInfo (this));
    }

    public Descriptor getDescriptor () {
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo.getDescriptor()", "Executed");
        }
        if (operationDescriptor == null) {
            operationDescriptor = createDefaultDescriptor ();
        }
        return ((Descriptor) operationDescriptor.clone ());
    }

    public void setDescriptor (Descriptor inDescriptor) {
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo.setDescriptor(Descriptor)", "Executed");
        }
        if (inDescriptor == null) {
            if (tracing ()) {
                trace ("ModelMBeanOperationInfo.setDescriptor()", "Received null for new descriptor value, setting descriptor to default values");
            }
            operationDescriptor = createDefaultDescriptor ();
        } else {
            if (isValid (inDescriptor)) {
                operationDescriptor = (Descriptor) inDescriptor.clone ();
            } else {
                throw new RuntimeOperationsException (new IllegalArgumentException ("Invalid descriptor passed in parameter"), ("Exception occurred in ModelMBeanOperationInfo setDescriptor"));
            }
        }
    }

    public String toString () {
        if (tracing ()) {
            trace ("ModelMBeanConstructorInfo.toString()", "Executed");
        }
        String retStr = "ModelMBeanOperationInfo: " + this.getName () + " ; Description: " + this.getDescription () + " ; Descriptor: " + this.getDescriptor () + " ; ReturnType: " + this.getReturnType () + " ; Signature: ";
        MBeanParameterInfo [] pTypes = this.getSignature ();
        for (int i = 0;
        i < pTypes.length; i ++) {
            retStr = retStr.concat ((pTypes [i]).getType () + ", ");
        }
        return retStr;
    }

    private Descriptor createDefaultDescriptor () {
        if (tracing ()) {
            trace ("ModelMBeanOperationInfo.createDefaultDescriptor()", "Executed");
        }
        return new DescriptorSupport (new String [] {"descriptorType=operation", ("name=" + this.getName ()), "role=operation", ("displayname=" + this.getName ())});
    }

    private boolean isValid (Descriptor inDesc) {
        boolean results = true;
        String badField = "none";
        if (inDesc == null) {
            results = false;
        } else if (! inDesc.isValid ()) {
            results = false;
        } else {
            if (! ((String) inDesc.getFieldValue ("name")).equalsIgnoreCase (this.getName ())) {
                results = false;
            }
            if (! ((String) inDesc.getFieldValue ("descriptorType")).equalsIgnoreCase ("operation")) {
                results = false;
            }
            Object roleValue = inDesc.getFieldValue ("role");
            if (roleValue == null) {
                inDesc.setField ("role", "operation");
            } else {
                final String role = (String) roleValue;
                if (! (role.equalsIgnoreCase ("operation") || role.equalsIgnoreCase ("setter") || role.equalsIgnoreCase ("getter"))) {
                    results = false;
                    badField = "role";
                }
            }
            Object targetValue = inDesc.getFieldValue ("targetType");
            if (targetValue != null) {
                if (! (targetValue instanceof java.lang.String)) {
                    results = false;
                    badField = "targetType";
                }
            }
            if ((inDesc.getFieldValue ("displayName")) == null) {
                inDesc.setField ("displayName", this.getName ());
            }
        }

        if (tracing ()) trace ("isValid()", ("Returning " + results + ": Invalid field is " + badField));

        return results;
    }

    private boolean tracing () {
        return Trace.isSelected (Trace.LEVEL_TRACE, Trace.INFO_MODELMBEAN);
    }

    private void trace (String inClass, String inMethod, String inText) {
        Trace.send (Trace.LEVEL_TRACE, Trace.INFO_MODELMBEAN, inClass, inMethod, Integer.toHexString (this.hashCode ()) + " " + inText);
    }

    private void trace (String inMethod, String inText) {
        trace (currClass, inMethod, inText);
    }

    private void readObject (ObjectInputStream in) throws IOException, ClassNotFoundException {
        in.defaultReadObject ();
    }

    private void writeObject (ObjectOutputStream out) throws IOException {
        if (compat) {
            ObjectOutputStream.PutField fields = out.putFields ();
            fields.put ("operationDescriptor", operationDescriptor);
            fields.put ("currClass", currClass);
            out.writeFields ();
        } else {
            out.defaultWriteObject ();
        }
    }

}

