package X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X;

class X extends X {

    public X (X X, X X) {
        X (X, X);
    }

    X X (X X, X X, X X, X [] X) {
        X X = X.X (X);
        if (X == 0) {
            X (0, new X [] {0, 0}, X);
            return;
        }
        if (X.X (X).X (X.X)) {
            X.X (X (X, X, 0, X));
            X = X.X (X);
            if (X == 0) {
                X (0, new X [] {0, 0}, X);
                return;
            }
        } else {
            X X = X.X (X);
            if (X != 0) {
                X.X (X (X, X, X, 0, X));
            }
        }
        X [] X = X.X (X, 0, X);
        if (! X.X (X).X (X.X)) {
            X (0, new X [] {0, 0, X.X}, X);
        }
        X X = X.X (X);
        if (X != 0) {
            if (X.X (X).X (X.X)) {
                X.X (X (X, X, 0, X));
                X = X.X (X);
            } else {
                X (0, new X [] {X.X, 0, X.X (X)}, X);
            }
            if (X != 0) {
                X (0, new X [] {X.X, 0, X.X (X)}, X);
            }
        } else {
            X X = X.X (X);
            if (X != 0) {
                X.X (X (X, X, X, 0, X));
            }
        }
        X X = ((X) X [X.X]);
        if (X == 0) {
            X (0, new X [] {X.X, X.X}, X);
            return;
        }
        X = X.X ();
        X.X X = 0;
        try {
            X = new X.X (X, X, X.X);
            X X = new X (X, X);
            X.X (X);
        } catch (X X) {
            X (X.X (), new X [] {X}, X);
            X.X (X, X);
            return;
        }
        X.X (X, X);
        X X = X.X (X);
        if (X == 0) {
            X (0, new X [] {0, 0}, X);
        }
        while (X != 0) {
            X = X.X (X, 0, X);
            if (! X.X (X).X (X.X)) X (0, new X [] {0, 0, X.X}, X);

            X X = X.X (X);
            if (X != 0) {
                if (X.X (X).X (X.X)) {
                    X.X (X (X, X, 0, X));
                    X = X.X (X);
                }
            }
            if (X != 0) {
                X (0, new X [] {X.X, 0, X.X (X)}, X);
            } else {
                X X = X.X (X);
                if (X != 0) {
                    X.X (X (X, X, X, 0, X));
                }
            }
            X X = ((X) X [X.X]);
            if (X == 0) {
                X (0, new X [] {X.X, X.X}, X);
                return;
            }
            X = X.X ();
            try {
                X.X X = new X.X (X, X, X.X);
                X X = new X (X, X);
                X.X (X);
            } catch (X X) {
                X (X.X (), new X [] {X}, X);
                X.X (X, X);
                return;
            }
            X = X.X (X);
            X.X (X, X);
        }
    }

}

