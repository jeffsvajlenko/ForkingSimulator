package X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X.X;

import X.X.X.X;

public abstract class X extends X implements X {
    private static final X X = - 0;
    private transient X X, X;

    protected X () {
        X (0);
    }

    public abstract X X () throws X, X;

    public abstract X X (X X) throws X, X;

    public abstract X X ();

    public abstract X X ();

    public abstract X X ();

    public X X () {
        if (X == 0) {
            X = X.X (X);
        }
        return X;
    }

    public abstract X X ();

    public X X () {
        if (X == 0) {
            X = X.X (X);
        }
        return X;
    }

    public abstract X X ();

    public abstract X X ();

    public abstract X [] X () throws X;

    public abstract X [] X ();

    public abstract X X ();

    public abstract X X ();

    public abstract X [] X ();

    public abstract X [] X ();

    public abstract X [] X ();

    public abstract X [] X ();

    public X < X > X () throws X {
        return X.X (X);
    }

    public abstract X X ();

    public X < X < ? > > X () throws X {
        return X.X (X);
    }

    public X < X < ? > > X () throws X {
        return X.X (X);
    }

}

