package X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X;

class X extends X {
    private final static X X = 0;
    private X X = 0;
    private X X = 0;
    private X X = X.X;
    private X X = X.X;
    private X X = X.X;
    private X X = X.X;
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private X X = 0;
    private X [] X = 0;
    private X X = 0;
    private X [] X = 0;
    private X X = 0;

    X (X X, X X) {
        X (X, X);
    }

    private static final X X = 0;
    private X X = X.X ();
    private class X extends X {
        private static final X X = 0;
        X [] X = 0;
        X X = 0;

        X () {
            X ();
        }

        X (X X, X [] X, X X) {
            X (X);
            X = X;
            X = X;
        }

    }

    X X (X X, X X, X X) {
        X [] X = X.X (X, 0, X);
        X X = X (X);
        X ();
        X X = X (X, X, X, X, X);
        X ();
        X.X (X, X.X (X));
        X.X ();
        X.X (X, X);
        return X;
    }

    X X (X X, X X, X X) {
        X [] X = X.X (X, 0, X);
        X X = (X) X [X.X];
        X ();
        X X = X (X, X, X, X, X);
        X ();
        if (X == 0) {
            X (X, 0, new X [] {X.X, X.X}, X);
        } else {
            X.X (X);
        }
        X.X (X, X, X.X (X));
        X.X (X, X);
        return X;
    }

    private X X (X X, X X, X [] X, X X, X X) {
        X = new X ();
        X = new X ();
        X X = (X) X [X.X];
        X X = (X) X [X.X];
        X X = (X) X [X.X];
        X X = (X) X [X.X];
        X = X;
        X.X (X);
        X = X.X;
        X = X == 0 ? X.X : X.X ();
        X = X == 0 ? X.X : X.X ();
        X &= (X.X | X.X);
        X &= (X.X | X.X);
        X = (X != 0 && X.X ());
        X X = 0;
        try {
            X = X.X (X, X);
            if (X != 0) {
                if (X.X (X).X (X.X)) {
                    X (X (X, X, 0, X));
                    X = X.X (X);
                } else {
                    X X = X.X (X);
                    if (X != 0) {
                        X (X (X, X, X, 0, X), X);
                    }
                }
                if (X != 0 && X.X (X).X (X, X.X)) {
                    throw new X (0, new X [] {X, X.X}, X);
                }
            } else {
                X X = X.X (X);
                if (X != 0) {
                    X (X (X, X, X, 0, X));
                }
            }
            if (X == 0) {
                X = X.X;
                X (X, X, X.X (), 0, X, X);
            } else if (X.X (X).X (X.X)) {
                X (X, X, X, X, X);
                X X = X.X (X);
                if (X != 0) {
                    X X = X.X (X);
                    throw new X (0, new X [] {X, X}, X);
                }
            } else if (X.X (X).X (X.X)) {
                X (X, X.X (), X, X);
                X X = X.X (X);
                if (X != 0) {
                    X X = X.X (X);
                    throw new X (0, new X [] {X, X}, X);
                }
            } else {
                X = X.X;
                X (X, X.X (), 0, X, X);
            }

        } catch (X X) {
            X (X, X.X (), X.X, X.X);
        }
        if (X) {
            X.X.X (X);
        }
        X.X (X, X, X, X, X, X, X, X, X, X, X, new X (X, X == 0 ? 0 : X.X));
        return X;
    }

    private X X (X X, X X, X X) throws X {
        X [] X = X.X (X, 0, X);
        X = X.X;
        X = 0;
        X X = X.X (X, X);
        if (X != 0 && X.X (X).X (X, X, X.X)) {
            X (X (X, X, 0, X, X, X));
            X = X.X (X, X);
        } else {
            X X = X.X (X);
            if (X != 0) {
                X (X (X, X, X, 0, X));
            }
        }
        if (X == 0) {
            X.X (X, X);
            throw new X (0, new X [] {X, X.X}, X);
        }
        X X = X.X (X);
        if (X.X (X.X)) X = X.X;
        else if (X.X (X.X)) X = X.X;
        else {
            X.X (X, X);
            throw new X (0, new X [] {X, X}, X);
        }

        X X = X.X (X);
        if (X != 0) {
            X.X (X, X);
            X X = X.X (X);
            throw new X (0, new X [] {X, X}, X);
        }
        X [] X = X.X (X, 0, X);
        X X = (X) X [X.X];
        if (X == 0) {
            X.X (X, X, X);
            X.X (X, X);
            throw new X (0, new X [] {X, 0}, X);
        }
        X X = (X) X.X (X, X.X, X, X);
        if (X == 0) {
            X.X (X, X);
            X.X (X, X);
            throw new X ();
        }
        X = X;
        X X = 0;
        X X = 0;
        X X = 0;
        if ((X.X () == X.X)) {
            X = (X) X;
            X = X.X ();
            if (X.X () == X.X) {
                X = (X) X.X ();
            } else if (X == X.X && X.X () == X.X && ((X) X.X ()).X ()) {
            } else {
                X.X (X, X, X);
                X.X (X, X, X);
                throw new X (0, new X [] {X, X.X ()}, X);
            }

        } else {
            X = (X) X;
            if (X == X.X) {
                X.X (X, X);
                X.X (X, X, X);
                throw new X (0, new X [] {X, X.X (X)}, X);
            }
            X = X.X ();
        }
        if ((X & X) != 0) {
            X.X (X, X);
            X.X (X, X);
            X X = (X == X.X) ? 0 : 0;
            throw new X (X, new X [] {X, X.X ()}, X);
        }
        X X = X;
        X = X.X (X, X);
        if (X != 0) {
            if (X.X (X, X).X (X, X.X)) {
                X (X (X, X, X, X, 0, X, X));
                X = X.X (X);
            } else {
                X X = X.X (X);
                if (X != 0) {
                    X (X (X, X, X, 0, X));
                }
            }
            if (X != 0 && X.X (X).X (X.X)) {
                X.X (X, X);
                X.X (X, X, X, X);
                throw new X (0, new X [] {X, X.X}, X);
            }
        } else {
            X X = X.X (X);
            if (X != 0) {
                X (X (X, X, X, X, 0, X));
            }
        }
        if (X == X.X) {
            if (X != 0 && X.X (X).X (X.X)) {
                X X = X.X.X (X, X, X);
                if (X == 0) {
                    X.X (X, X);
                    X.X (X, X);
                    throw new X ();
                }
                if (X != 0 && ! X.X (X, X, X.X ())) {
                    X.X (X, X);
                    X.X (X, X);
                    throw new X (0, new X [] {X, X.X (), X.X ()}, X);
                }
                X = X;
                X = X.X (X);
            }
            if (X == 0) {
                X.X (X, X);
                X.X (X, X);
                throw new X (0, new X [] {X}, X);
            }
            X X = 0;
            X X = 0;
            X X = 0;
            X X = 0;
            if (X != 0) {
                X X = X (X, X, X);
                X = X.X;
                X = X.X;
                X = X.X;
                X = X.X;
            }
            X = X.X (0, X.X, (X) 0, X, 0);
            try {
                X.X (X.X);
                X.X (X, X, X, X);
            } catch (X X) {
                X (X.X (), X.X (), X);
            }
            if (X != 0) {
                if (! X (X)) {
                    X.X (X, X, X);
                    X.X (X, X, X, X);
                    throw new X (0, new X [] {X, X.X (X)}, X);
                }
                X X = X (X, X, X, X, X);
                if (X != 0) {
                    X.X (X, X);
                    X.X (X, X);
                    throw new X (0, new X [] {X, X.X (X)}, X);
                }
            }
            try {
                X (X.X (), X, X, 0, X, X);
            } catch (X X) {
                X.X (X, X, X, X);
                X.X (X, X, X);
                throw X;
            }
            X.X ();
            X [] X = X.X (X, X.X ());
            if (X != 0) {
                X.X (X, X);
                X.X (X, X);
                throw new X ((X) X [X.X - 0], X, X);
            }
        } else {
            X = X;
            if (X != 0) {
                X X = X;
                if (! X (X, X)) {
                    X.X (X, X);
                    X.X (X, X);
                    throw new X (0, new X [] {X, X.X (X)}, X);
                }
                X X = X (X, X, X, X, X);
                if (X != 0) {
                    X.X (X, X);
                    X.X (X, X);
                    throw new X (0, new X [] {X, X.X (X)}, X);
                }
                X.X ();
            }
            if (X != 0) {
                try {
                    X (X, X.X (), X, X, 0, X);
                } catch (X X) {
                    X.X (X, X, X);
                    X.X (X, X);
                    throw X;
                }
            }
        }
        X.X (X, X);
        X.X (X, X);
    }

    private X X (X X, X X, X X, X X) throws X {
        X [] X = X.X (X, 0, X);
        X X = X;
        X X = (X) X [X.X];
        if (X != 0) {
            X = X.X ();
        }
        X = 0;
        X X = X.X (X);
        if (X != 0 && X.X (X).X (X.X)) {
            X (X (X, X, 0, X));
            X = X.X (X);
        } else {
            X X = X.X (X);
            if (X != 0) {
                X (X (X, X, X, 0, X));
            }
        }
        if (X == 0) {
            X.X (X, X);
            throw new X (0, new X [] {X, X.X}, X);
        }
        X X = X.X (X, X);
        if (X.X (X.X)) X = X.X;
        else if (X.X (X.X)) X = X.X;
        else {
            X.X (X, X, X);
            throw new X (0, new X [] {X, X}, X);
        }

        X X = X.X (X);
        if (X != 0) {
            X.X (X, X);
            X X = X.X (X);
            throw new X (0, new X [] {X, X}, X);
        }
        X [] X = X.X (X, 0, X);
        X X = (X) X [X.X];
        if (X == 0) {
            X.X (X, X, X);
            X.X (X, X);
            throw new X (0, new X [] {X, 0}, X);
        }
        X X = (X) X.X (X, X.X, X, X);
        if (X == 0) {
            X.X (X, X);
            X.X (X, X);
            throw new X ();
        }
        if (! (X instanceof X)) {
            X.X (X, X);
            X.X (X, X);
            throw new X (0, new X [] {X, X.X ()}, X);
        }
        X X = (X) X;
        X = X;
        if ((X.X () & X) != 0) {
            X.X (X, X, X);
            X.X (X, X, X, X);
            X X = (X == X.X) ? 0 : 0;
            throw new X (X, new X [] {X, X.X ()}, X);
        }
        X = X.X (X);
        if (X != 0) {
            if (X.X (X).X (X.X)) {
                X (X (X, X, 0, X));
                X = X.X (X);
            } else {
                X X = X.X (X, X);
                if (X != 0) {
                    X (X (X, X, X, 0, X));
                }
            }
            if (X != 0 && X.X (X).X (X.X)) {
                X.X (X, X);
                X.X (X, X);
                throw new X (0, new X [] {X, X.X}, X);
            }
        } else {
            X X = X.X (X);
            if (X != 0) {
                X (X (X, X, X, 0, X), X);
            }
        }
        try {
            X (X, X, 0, X, X);
        } catch (X X) {
            X.X (X, X);
            X.X (X, X);
            throw X;
        }
        X X = (X) X.X ();
        if (X == X.X) {
            if (X == X.X && X.X () != X.X) {
                X.X (X, X);
                X.X (X, X, X);
                throw new X (0, new X [] {X, X.X ()}, X);
            }
            try {
                X (X.X (), X, X, X, 0, X);
            } catch (X X) {
                X.X (X, X, X);
                X.X (X, X);
                throw X;
            }
            X.X ();
            if (X != X.X) {
                X [] X = X.X (X, X.X ());
                if (X != 0) {
                    X.X (X, X);
                    X.X (X, X, X);
                    throw new X ((X) X [X.X - 0], X, X);
                }
            }
        } else {
            if (X == 0) {
                X = X.X ();
                X = (X) X.X ();
                X = X;
            } else if (X.X (X) == X.X) {
            } else {
                if (X == X.X && X.X (X, X) != X.X) {
                    X.X (X, X, X, X);
                    X.X (X, X);
                    throw new X (0, new X [] {X}, X);
                } else if (X == X.X && X.X () != X.X) {
                    X.X (X, X);
                    X.X (X, X, X);
                    throw new X (0, new X [] {X}, X);
                }

                if (X.X == X.X && ((X) X.X).X == X.X || ((X) X.X ()).X == X.X && ((X) (((X) X.X ())).X).X == X.X) {
                    X.X (X, X, X);
                    X.X (X, X, X);
                    throw new X (0, new X [] {}, X);
                }
                X X = new X ();
                X.X = X.X;
                X.X = 0;
                X.X = new X [0];
                X.X [0] = (X) X.X ();
                X.X [0] = X;
                X X = new X ();
                X.X = X.X;
                X.X = X;
                X = X;
            }

            X.X ();
            try {
                X (X.X (), X, X, X, 0, X);
            } catch (X X) {
                X.X (X, X, X);
                X.X (X, X, X);
                throw X;
            }
        }
        X.X (X, X);
        X.X (X, X);
    }

    private X X (X X, X X, X X, X X, X X) throws X {
        X X = X.X ();
        X X = 0, X = 0;
        X X = X.X (X);
        for (X X = 0;
        X < X; X ++) {
            X = (X) X.X (X);
            X X = X.X (X.X.X (), X.X.X ());
            if (X == 0) {
                X X = X.X (X);
                if (X != 0) {
                    throw new X (0, new X [] {X, X, X.X.X ()}, X);
                }
            } else {
                if (X) {
                    throw new X (0, new X [] {X, X.X.X ()}, X);
                }
            }
        }
        if (X) {
            if (X.X == 0) {
                X.X = X.X;
            } else if (X.X != 0) {
                X.X = X.X.X (X.X, X.X.X);
            }

        }
    }

    private X X (X X, X X, X X, X X, X X) throws X {
        X X = 0;
        X X = 0;
        X X = 0;
        if (X != 0) {
            X X = X.X (X);
            if (X.X (X.X, X)) {
                X = X.X.X (X, X, X);
                X = X.X (X);
            } else if (X.X (X.X)) {
                X = X (X, X, X, X, X);
                if (X != 0) {
                    X X = (X) X.X;
                    if (X.X == 0) X = 0;

                }
                X = X.X (X, X);
            } else if (X.X (X.X)) {
                X = X (X, X, X, X, X);
                if (X != 0 && X.X == 0) {
                    X X = (X) X.X;
                    if (X.X == 0) X = 0;

                }
                X = X.X (X);
            } else if (X.X (X.X)) {
                X = X (X, X, X, X, X);
                if (X != 0) {
                    X X = (X) X.X;
                    if (X.X == 0) X = 0;

                }
                X = X.X (X);
            } else {
                X = X;
            }

        }
        if (X) {
            X X = X.X (X, X);
            if (X != 0) {
                if (X.X (X, X, X).X (X.X, X)) {
                    X = X.X (X);
                }
            }
            if (X == 0) X = 0;

        }
        if (X == 0 && X) {
            if (X == 0) {
                X X = new X ();
                X.X = X.X;
                X.X = 0;
                X.X = 0;
                X = new X ();
                X.X = X.X;
                X.X = X;
            }
            X = X;
        }
        X = X;
        if (X == 0) X = X.X;
        else if (X) X = X.X;
        else X = X.X;

        if (X != 0) {
            if (! X (X, X)) {
                throw new X (0, new X [] {X, X.X (X, X)}, X);
            }
            X X = X (X, X, X, X, X, X);
            if (X != 0) {
                throw new X (0, new X [] {X, X.X (X)}, X);
            }
            if (! X) {
                X.X ();
            }
        }
    }

    private X X (X X) {
        X X = X.X (X, X);
        if (X.X (X.X) || X.X (X, X.X) || X.X (X.X)) return 0;
        else return 0;

    }

    private X X (X X) {
    }

    private X X (X X, X X) {
    }

    private X X (X X) {
        X X = new X (0);
        X X = X.X (X);
        while (X != 0 && (X != X.X (X.X (X)))) {
            X.X (X.X (X, X.X));
            X = X.X (X);
        }
        return X.X ();
    }

    private X X (X X, X [] X, X X) {
        if (X != 0) {
            X (X, X, X);
        }
        X = X.X;
        X = X.X;
        X = X ();
        X.X = X ();
        return;
    }

    private X X () {
        X X = new X ();
        X.X = X.X;
        X.X = X ();
        X.X = 0;
        X.X = X.X;
        X X = new X ();
        X.X = X.X;
        X.X = 0;
        X.X = new X [0];
        X.X [0] = X;
        X X = new X ();
        X.X = X.X;
        X.X = X;
        return X;
    }

    private X X () {
        X X = new X ();
        X.X = X.X;
        return X;
    }

    private X X () {
        if (X == 0) {
            X = new X [X];
            X = 0;
        }
        if (X == X.X) {
            X [] X = new X [X + X];
            X.X (X, 0, X, 0, X);
            X = X;
        }
        X [X ++] = X;
        X [X ++] = X ? X.X : X.X;
        X [X ++] = X;
        X [X ++] = X;
        X [X ++] = new X ((X << 0) + X);
        X [X ++] = new X ((X << 0) + X, X);
        X [X ++] = X;
        X [X ++] = X;
        X [X ++] = X;
        X [X ++] = X;
        X [X ++] = X;
    }

    private X X () {
        X = (X []) X [-- X];
        X = (X) X [-- X];
        X = (X) X [-- X];
        X = (X) X [-- X];
        X = (X) X [-- X];
        X X = ((X) (X [-- X])).X ();
        X = (X) (X>> 0);
        X = (X) X;
        X = ((X) (X [-- X])).X ();
        X = (X) (X>> 0);
        X = (X) X;
        X = (X) X [-- X];
        X = (X) X [-- X];
        X = ((X) X [-- X]).X ();
        X = (X) X [-- X];
    }

    private X X (X X) {
        if (X == 0) return;

        if (X == 0) {
            X = new X [0];
        } else {
            X [] X = new X [X.X + 0];
            X.X (X, 0, X, 0, X.X);
            X = X;
        }
        X [X.X - 0] = X;
    }

}

