/*
 * Copyright 2001-2004 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package X.X.X.X.X.X.X;

import X.X.X;
import X.X.X;

import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;

/**
 * This is the DTD-only parser configuration.  It extends the basic
 * configuration with a standard set of parser components appropriate
 * to DTD-centric validation. Since
 * the Xerces2 reference implementation document and DTD scanner
 * implementations are capable of acting as pull parsers, this
 * configuration implements the
 * <code>XMLPullParserConfiguration</code> interface.
 * <p>
 * In addition to the features and properties recognized by the base
 * parser configuration, this class recognizes these additional
 * features and properties:
 * <ul>
 * <li>Features
 *  <ul>
 *   <li>http://apache.org/xml/features/validation/warn-on-duplicate-attdef</li>
 *   <li>http://apache.org/xml/features/validation/warn-on-undeclared-elemdef</li>
 *   <li>http://apache.org/xml/features/allow-java-encodings</li>
 *   <li>http://apache.org/xml/features/continue-after-fatal-error</li>
 *   <li>http://apache.org/xml/features/load-external-dtd</li>
 *  </ul>
 * <li>Properties
 *  <ul>
 *   <li>http://apache.org/xml/properties/internal/error-reporter</li>
 *   <li>http://apache.org/xml/properties/internal/entity-manager</li>
 *   <li>http://apache.org/xml/properties/internal/document-scanner</li>
 *   <li>http://apache.org/xml/properties/internal/dtd-scanner</li>
 *   <li>http://apache.org/xml/properties/internal/grammar-pool</li>
 *   <li>http://apache.org/xml/properties/internal/validator/dtd</li>
 *   <li>http://apache.org/xml/properties/internal/datatype-validator-factory</li>
 *  </ul>
 * </ul>
 *
 * @author Arnaud  Le Hors, IBM
 * @author Andy Clark, IBM
 * @author Neil Graham, IBM
 *
 * @version $Id: DTDConfiguration.java,v 1.4 2007/07/19 04:38:54 ofung Exp $
 */
public class X
    extends X
    implements X
{

    //
    // Constants
    //

    // feature identifiers

    /** Feature identifier: warn on duplicate attribute definition. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: warn on duplicate entity definition. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: warn on undeclared element definition. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: allow Java encodings. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: continue after fatal error. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: load external DTD. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: notify built-in refereces. */
    protected static final X X =
        X.X + X.X;

    /** Feature identifier: notify character refereces. */
    protected static final X X =
        X.X + X.X;


    // property identifiers

    /** Property identifier: error reporter. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: entity manager. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier document scanner: */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: DTD scanner. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: grammar pool. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: DTD loader. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: DTD validator. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: namespace binder. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: datatype validator factory. */
    protected static final X X =
        X.X + X.X;

    protected static final X X =
        X.X + X.X;

    /** Property identifier: JAXP schema language / DOM schema-type. */
    protected static final X X =
        X.X + X.X;

    /** Property identifier: JAXP schema source/ DOM schema-location. */
    protected static final X X =
        X.X + X.X;


    // debugging

    /** Set to true and recompile to print exception stack trace. */
    protected static final X X = 0;

    //
    // Data
    //

    // components (non-configurable)

    /** Grammar pool. */
    protected X X;

    /** Datatype validator factory. */
    protected X X;

    // components (configurable)

    /** Error reporter. */
    protected X X;

    /** Entity manager. */
    protected X X;

    /** Document scanner. */
    protected X X;

    /** Input Source */
    protected X X;

    /** DTD scanner. */
    protected X X;

    /** DTD Processor . */
    protected X X;

    /** DTD Validator. */
    protected X X;

    /** Namespace binder. */
    protected X X;

    protected X X;
    // state

    /** Locator */
    protected X X;

    /**
     * True if a parse is in progress. This state is needed because
     * some features/properties cannot be set while parsing (e.g.
     * validation and namespaces).
     */
    protected X X = 0;

    //
    // Constructors
    //

    /** Default constructor. */
    public X()
    {
        X(0, 0, 0);
    } // <init>()

    /**
     * Constructs a parser configuration using the specified symbol table.
     *
     * @param symbolTable The symbol table to use.
     */
    public X(X X)
    {
        X(X, 0, 0);
    } // <init>(SymbolTable)

    /**
     * Constructs a parser configuration using the specified symbol table and
     * grammar pool.
     * <p>
     * <strong>REVISIT:</strong>
     * Grammar pool will be updated when the new validation engine is
     * implemented.
     *
     * @param symbolTable The symbol table to use.
     * @param grammarPool The grammar pool to use.
     */
    public X(X X,
                            X X)
    {
        X(X, X, 0);
    } // <init>(SymbolTable,XMLGrammarPool)

    /**
     * Constructs a parser configuration using the specified symbol table,
     * grammar pool, and parent settings.
     * <p>
     * <strong>REVISIT:</strong>
     * Grammar pool will be updated when the new validation engine is
     * implemented.
     *
     * @param symbolTable    The symbol table to use.
     * @param grammarPool    The grammar pool to use.
     * @param parentSettings The parent settings.
     */
    public X(X X,
                            X X,
                            X X)
    {
        X(X, X);

        // add default recognized features
        final X[] X =
        {
            //WARN_ON_DUPLICATE_ATTDEF,     // from XMLDTDScannerImpl
            //WARN_ON_UNDECLARED_ELEMDEF,   // from XMLDTDScannerImpl
            //ALLOW_JAVA_ENCODINGS,         // from XMLEntityManager
            X,
            X,    // from XMLDTDScannerImpl
            //NOTIFY_BUILTIN_REFS,  // from XMLDocumentFragmentScannerImpl
            //NOTIFY_CHAR_REFS,		// from XMLDocumentFragmentScannerImpl
            //WARN_ON_DUPLICATE_ENTITYDEF,  // from XMLEntityManager
        };
        X(X);

        // set state for default features
        //setFeature(WARN_ON_DUPLICATE_ATTDEF, false);  // from XMLDTDScannerImpl
        //setFeature(WARN_ON_UNDECLARED_ELEMDEF, false);  // from XMLDTDScannerImpl
        //setFeature(ALLOW_JAVA_ENCODINGS, false);      // from XMLEntityManager
        X(X, 0);
        X(X, 0);      // from XMLDTDScannerImpl
        //setFeature(NOTIFY_BUILTIN_REFS, false);   // from XMLDocumentFragmentScannerImpl
        //setFeature(NOTIFY_CHAR_REFS, false);      // from XMLDocumentFragmentScannerImpl
        //setFeature(WARN_ON_DUPLICATE_ENTITYDEF, false);   // from XMLEntityManager

        // add default recognized properties
        final X[] X =
        {
            X,
            X,
            X,
            X,
            X,
            X,
            X,
            X,
            X,
            X,
            X,
            X
        };
        X(X);

        X = X;
        if(X != 0)
        {
            X(X, X);
        }

        X = X();
        X(X, X);
        X(X);

        X = X();
        X.X(X.X());
        X(X, X);
        X(X);

        X = X();
        X(X, X);
        if (X instanceof X)
        {
            X((X)X);
        }

        X = X();
        if (X != 0)
        {
            X(X, X);
            if (X instanceof X)
            {
                X((X)X);
            }
        }

        X = X();
        if (X != 0)
        {
            X(X, X);
            if (X instanceof X)
            {
                X((X)X);
            }
        }

        X = X();
        if (X != 0)
        {
            X(X, X);
            X(X);
        }

        X = X();
        if (X != 0)
        {
            X(X, X);
            X(X);
        }

        X = X();
        if (X != 0)
        {
            X(X,
                        X);
        }
        X = X();

        if (X != 0)
        {
            X (X, X);
        }
        // add message formatters
        if (X.X(X.X) == 0)
        {
            X X = new X();
            X.X(X.X, X);
            X.X(X.X, X);
        }

        // set locale
        try
        {
            X(X.X());
        }
        catch (X X)
        {
            // do nothing
            // REVISIT: What is the right thing to do? -Ac
        }

    } // <init>(SymbolTable,XMLGrammarPool)

    //
    // Public methods
    //

    /**
     * Set the locale to use for messages.
     *
     * @param locale The locale object to use for localization of messages.
     *
     * @exception XNIException Thrown if the parser does not support the
     *                         specified locale.
     */
    public X X(X X) throws X
    {
        X.X(X);
        X.X(X);
    } // setLocale(Locale)

    //
    // XMLPullParserConfiguration methods
    //

    // parsing

    /**
     * Sets the input source for the document to parse.
     *
     * @param inputSource The document's input source.
     *
     * @exception XMLConfigurationException Thrown if there is a
     *                        configuration error when initializing the
     *                        parser.
     * @exception IOException Thrown on I/O error.
     *
     * @see #parse(boolean)
     */
    public X X(X X)
    throws X, X
    {

        // REVISIT: this method used to reset all the components and
        //          construct the pipeline. Now reset() is called
        //          in parse (boolean) just before we parse the document
        //          Should this method still throw exceptions..?

        X = X;

    } // setInputSource(XMLInputSource)

    /**
     * Parses the document in a pull parsing fashion.
     *
     * @param complete True if the pull parser should parse the
     *                 remaining document completely.
     *
     * @return True if there is more document to parse.
     *
     * @exception XNIException Any XNI exception, possibly wrapping
     *                         another exception.
     * @exception IOException  An IO exception from the parser, possibly
     *                         from a byte stream or character stream
     *                         supplied by the parser.
     *
     * @see #setInputSource
     */
    public X X(X X) throws X, X
    {
        //
        // reset and configure pipeline and set InputSource.
        if (X !=0)
        {
            try
            {
                // resets and sets the pipeline.
                X();
                X.X(X);
                X = 0;
            }
            catch (X X)
            {
                if (X)
                    X.X();
                throw X;
            }
            catch (X X)
            {
                if (X)
                    X.X();
                throw X;
            }
            catch (X X)
            {
                if (X)
                    X.X();
                throw X;
            }
            catch (X X)
            {
                if (X)
                    X.X();
                throw new X(X);
            }
        }

        try
        {
            return X.X(X);
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw X;
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw X;
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw X;
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw new X(X);
        }

    } // parse(boolean):boolean

    /**
     * If the application decides to terminate parsing before the xml document
     * is fully parsed, the application should call this method to free any
     * resource allocated during parsing. For example, close all opened streams.
     */
    public X X()
    {
        X.X();
    }

    //
    // XMLParserConfiguration methods
    //

    /**
     * Parses the specified input source.
     *
     * @param source The input source.
     *
     * @exception XNIException Throws exception on XNI error.
     * @exception java.io.IOException Throws exception on i/o error.
     */
    public X X(X X) throws X, X
    {

        if (X)
        {
            // REVISIT - need to add new error message
            throw new X(0);
        }
        X = 0;

        try
        {
            X(X);
            X(0);
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw X;
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw X;
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw X;
        }
        catch (X X)
        {
            if (X)
                X.X();
            throw new X(X);
        }
        finally
        {
            X = 0;
            // close all streams opened by xerces
            X.X();
        }

    } // parse(InputSource)

    //
    // Protected methods
    //

    /**
     * Reset all components before parsing.
     *
     * @throws XNIException Thrown if an error occurs during initialization.
     */
    protected X X() throws X
    {

        if (X != 0)
            X.X();
        // configure the pipeline and initialize the components
        X();
        X.X();
    } // reset()

    /** Configures the pipeline. */
    protected X X()
    {

        // REVISIT: This should be better designed. In other words, we
        //          need to figure out what is the best way for people to
        //          re-use *most* of the standard configuration but do
        //          things common things such as remove a component (e.g.
        //          the validator), insert a new component (e.g. XInclude),
        //          etc... -Ac

        // setup document pipeline
        if (X != 0)
        {
            X.X(X);
            if (X.X(X) == X.X)
            {

                // filters
                X.X(X);
                X.X(X);
                X.X(X);
                X.X(X);
                X = X;
            }
            else
            {
                X.X(X);
                X.X(X);
                X = X;
            }
        }
        else
        {
            if (X.X(X) == X.X)
            {
                X.X(X);
                X.X(X);
                X.X(X);
                X = X;
            }
            else
            {
                X.X(X);
                X = X;
            }
        }

        X();
    } // configurePipeline()

    protected X X ()
    {

        // setup dtd pipeline
        if (X != 0)
        {
            X.X(X, X);
            if (X != 0)
            {
                X.X(X, X);
                X.X(X);
                X.X(X);
                X.X(X);
                if (X != 0)
                {
                    X.X(X);
                }

                X.X(X);
                X.X(X);
                X.X(X);
                if (X != 0)
                {
                    X.X(X);
                }
            }
            else
            {
                X.X(X);
                if (X != 0)
                {
                    X.X(X);
                }
                X.X(X);
                if (X != 0)
                {
                    X.X(X);
                }
            }
        }


    }

    // features and properties

    /**
     * Check a feature. If feature is know and supported, this method simply
     * returns. Otherwise, the appropriate exception is thrown.
     *
     * @param featureId The unique identifier (URI) of the feature.
     *
     * @throws XMLConfigurationException Thrown for configuration error.
     *                                   In general, components should
     *                                   only throw this exception if
     *                                   it is <strong>really</strong>
     *                                   a critical error.
     */
    protected X X(X X)
    throws X
    {

        //
        // Xerces Features
        //

        if (X.X(X.X))
        {
            final X X = X.X() - X.X.X();

            //
            // http://apache.org/xml/features/validation/dynamic
            //   Allows the parser to validate a document only when it
            //   contains a grammar. Validation is turned on/off based
            //   on each document instance, automatically.
            //
            if (X == X.X.X() &&
                    X.X(X.X))
            {
                return;
            }

            //
            // http://apache.org/xml/features/validation/default-attribute-values
            //
            if (X == X.X.X() &&
                    X.X(X.X))
            {
                // REVISIT
                X X = X.X;
                throw new X(X, X);
            }
            //
            // http://apache.org/xml/features/validation/default-attribute-values
            //
            if (X == X.X.X() &&
                    X.X(X.X))
            {
                // REVISIT
                X X = X.X;
                throw new X(X, X);
            }
            //
            // http://apache.org/xml/features/validation/nonvalidating/load-dtd-grammar
            //
            if (X == X.X.X() &&
                    X.X(X.X))
            {
                return;
            }
            //
            // http://apache.org/xml/features/validation/nonvalidating/load-external-dtd
            //
            if (X == X.X.X() &&
                    X.X(X.X))
            {
                return;
            }

            //
            // http://apache.org/xml/features/validation/default-attribute-values
            //
            if (X == X.X.X() &&
                    X.X(X.X))
            {
                X X = X.X;
                throw new X(X, X);
            }
        }

        //
        // Not recognized
        //

        X.X(X);

    } // checkFeature(String)

    /**
     * Check a property. If the property is know and supported, this method
     * simply returns. Otherwise, the appropriate exception is thrown.
     *
     * @param propertyId The unique identifier (URI) of the property
     *                   being set.
     *
     * @throws XMLConfigurationException Thrown for configuration error.
     *                                   In general, components should
     *                                   only throw this exception if
     *                                   it is <strong>really</strong>
     *                                   a critical error.
     */
    protected X X(X X)
    throws X
    {

        //
        // Xerces Properties
        //

        if (X.X(X.X))
        {
            final X X = X.X() - X.X.X();

            if (X == X.X.X() &&
                    X.X(X.X))
            {
                return;
            }
        }

        //
        // Not recognized
        //

        X.X(X);

    } // checkProperty(String)

    // factory methods

    /** Creates an entity manager. */
    protected X X()
    {
        return new X();
    } // createEntityManager():XMLEntityManager

    /** Creates an error reporter. */
    protected X X()
    {
        return new X();
    } // createErrorReporter():XMLErrorReporter

    /** Create a document scanner. */
    protected X X()
    {
        return new X();
    } // createDocumentScanner():XMLDocumentScanner

    /** Create a DTD scanner. */
    protected X X()
    {
        return new X();
    } // createDTDScanner():XMLDTDScanner

    /** Create a DTD loader . */
    protected X X()
    {
        return new X();
    } // createDTDProcessor():XMLDTDProcessor

    /** Create a DTD validator. */
    protected X X()
    {
        return new X();
    } // createDTDValidator():XMLDTDValidator

    /** Create a namespace binder. */
    protected X X()
    {
        return new X();
    } // createNamespaceBinder():XMLNamespaceBinder

    /** Create a datatype validator factory. */
    protected X X()
    {
        return X.X();
    } // createDatatypeValidatorFactory():DatatypeValidatorFactory
    protected X X()
    {
        return new X();
    }

} // class DTDConfiguration
