package X.X.X.X;

import X.X.*;

import X.X.X.*;

import X.X.X;

import X.X.*;

import X.X.X.*;

import X.X.X.*;

import X.X.X.X.X;

import X.X.X.*;

import X.X.*;

import X.X.*;

import X.X.*;

import X.X.X.X.X;

class X extends X implements X, X {
    private X X;
    private X X = new X ();

    public static X X (X X) {
        return new X ();
    }

    protected X X () {
        X.X ();
        X.X (X);
        X X = X.X ();
        if (X instanceof X.X) {
            X X = ((X.X) X).X ();
            if (X != 0) {
                X.X (X);
            }
        }
    }

    protected X X () {
        X.X ();
        X.X (X);
        X X = X.X ();
        if (X instanceof X.X) {
            X X = ((X.X) X).X ();
            if (X != 0) {
                X.X (X);
            }
        }
    }

    protected X X () {
        X X = X.X ();
        if (X == 0 || X instanceof X) {
            X.X (X ());
        }
        X (X);
    }

    private X X (X X) {
        X X = X (X, X);
        X X = X;
        X = X.X (X, X);
        if (X != X) {
            if (X != 0) {
                X ();
            }
        }
        X.X ();
    }

    protected X X () {
        if (X.X () instanceof X) {
            X.X (0);
        }
        X X = X (X, X);
        X.X (X);
        X.X ();
        X = 0;
    }

    protected X X () {
        return new X ();
    }

    protected X X () {
        X X = new X (X.X);
        X.X (0);
        X (X);
        return X;
    }

    protected X X () {
        X X = new X (X.X);
        X.X (0);
        X (X);
        return X;
    }

    protected X X () {
        X X = X.X ();
        X.X (0);
        X (X);
        return X;
    }

    protected X X (X X, X X) {
        X.X (X);
        X (X);
        X.X (X, 0);
        if (X instanceof X.X) {
            X X = ((X.X) X).X ();
            if (X != 0) {
                X.X (X);
            }
        }
        if (X instanceof X.X) {
            X X = ((X.X) X).X ();
            if (X != 0) {
                X.X (X);
            }
        }
    }

    private X X (X X) {
        if (X instanceof X.X) {
            X X = X (X);
            X X = (X) X.X ().X (X, 0);
            X X = ((X.X) X).X ();
            if (X != 0) {
                X.X (X);
            }
            X.X (0, X.X (0));
        }
    }

    public X X (X X) {
        return X (X, X (X));
    }

    private X X (X X, X X) {
        return X.X (X.class, X, X.X (X), X, X);
    }

    private X X (X X) {
        return X.X (X);
    }

    private X X (X X) {
        return X.X (X);
    }

    public X X (X X, X X) {
        X X = X (X);
        X.X (X, X);
        X.X ().X (X, X, 0, 0, X.X (), X.X ());
        X (X, X);
        X.X ();
    }

    public X X (X X, X X) {
        X X = X (X);
        X (X, X);
        X.X ();
    }

    protected X X (X X, X X) {
    }

    public X X (X X, X X, X X, X X, X X, X X) {
        X.X ().X (X, X, X, X, X, X);
    }

    private static class X implements X, X {
        private X X = 0;
        private X X = 0;
        private X X = 0;

        public X X (X X, X X) {
            if (0.X (X)) {
                X = X;
            } else if (0.X (X)) {
                X = X;
            } else if (0.X (X)) {
                X = X;
            }

        }

        public X X (X X) {
            if (X == X) {
                X = 0;
            } else if (X == X) {
                X = 0;
            } else if (X == X) {
                X = 0;
            }

        }

        private X X (X X) {
            return (X == 0) ? new X (0, 0) : X.X ();
        }

        public X X (X X) {
            X X = X (X);
            X X = X (X);
            X X = X (X);
            X.X = ((X.X + 0) / 0) * 0;
            X X = new X (X.X, X.X);
            X.X += X.X (X.X, X.X);
            X X = X.X ();
            X.X += X.X + X.X;
            X.X += X.X + X.X;
            return X;
        }

        public X X (X X) {
            return X (X);
        }

        private X X (X X, X X, X X, X X, X X) {
            if (X != 0) {
                X.X (X, X, X, X);
            }
        }

        public X X (X X) {
            X X = X.X ();
            X X = X.X () - (X.X + X.X);
            X X = X.X () - (X.X + X.X);
            X X = X (X);
            X X = X (X);
            X X = X / 0;
            X X = X - X;
            X X = X.X (X.X, X.X);
            X X = X - X;
            X X, X;
            if (X.X ().X ()) {
                X = X.X;
                X = X + X;
            } else {
                X = X.X;
                X = X + X;
            }
            X X = X.X + X;
            X (X, X, X.X, X, X);
            X (X, X, X.X, X, X);
            X (X, X, X, X, X);
        }

    }

    public X X (X X) {
        X X = X.X ();
        X X = (X) (X.X ());
        X X = X.X ();
        if (X instanceof X) {
            X X = (X) X;
            if (X.X (X)) {
                X.X (X);
            }
        }
    }

    private class X implements X {

        public X X (X X) {
            X.X ();
        }

        public X X (X X) {
            X.X ();
        }

    }

    private class X extends X {

        public X (X X) {
            X (X);
        }

        @X
        public X X () {
            if (X == 0) {
                return X.X ();
            } else if (X.X () instanceof X.X) {
                return ((X.X) X.X ()).X ().X ();
            } else if (X.X () != 0) {
                return X.X ().X ();
            } else {
                return X.X ();
            }

        }

    }

}

