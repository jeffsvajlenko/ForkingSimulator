<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="40" endline="55">
public JDOStorageFormat () {
    super ();
    pms = CollectionsFactory.current ().createMap ();
    Runtime.getRuntime ().addShutdownHook (new Thread () {
        public void run () {
            Iterator iter = pms.values ().iterator ();
        }}

    );
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="47" endline="53">
public void run () {
    Iterator iter = pms.values ().iterator ();
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="64" endline="67">
protected String createFileExtension () {
    return "j2";
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="75" endline="78">
public String createFileDescription () {
    return "Database (" + getFileExtension () + ")";
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="87" endline="116">
public String store (String fileName, Drawing storeDrawing) throws IOException {
    PersistenceManager pm = getPersistenceManager (fileName);
    String drawingName = null;
    Drawing txnDrawing = crossTxnBoundaries (storeDrawing);
    endTransaction (pm, false);
    startTransaction (pm);
    try {
        Extent extent = pm.getExtent (StandardDrawing.class, true);
        DrawingListModel listModel = new DrawingListModel (extent.iterator ());
        drawingName = showStoreDialog (listModel, storeDrawing);
        if (drawingName != null) {
            storeDrawing.setTitle (drawingName);
            txnDrawing.setTitle (drawingName);
            pm.makePersistent (txnDrawing);
        }
    } finally {
        endTransaction (pm, (drawingName != null));
    }
    startTransaction (pm);
    return drawingName;
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="125" endline="154">
public synchronized Drawing restore (String fileName) throws IOException {
    PersistenceManager pm = getPersistenceManager (fileName);
    endTransaction (pm, false);
    startTransaction (pm);
    Drawing restoredDrawing = null;
    try {
        Extent extent = pm.getExtent (StandardDrawing.class, true);
        DrawingListModel listModel = new DrawingListModel (extent.iterator ());
        Drawing txnDrawing = showRestoreDialog (listModel);
        if (txnDrawing != null) {
            restoredDrawing = txnDrawing;
        }
    } finally {
        endTransaction (pm, false);
    }
    startTransaction (pm);
    return restoredDrawing;
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="156" endline="164">
private void retrieveAll (PersistenceManager pm, Figure figure) {
    pm.retrieve (figure);
    FigureEnumeration fe = figure.figures ();
    while (fe.hasNextFigure ()) {
        retrieveAll (pm, fe.nextFigure ());
    }
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="166" endline="170">
private Drawing crossTxnBoundaries (Drawing originalDrawing) {
    return (Drawing) ((StandardDrawing) originalDrawing).clone ();
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="172" endline="181">
private synchronized PersistenceManager getPersistenceManager (String fileName) {
    PersistenceManager pm = (PersistenceManager) pms.get (fileName);
    if (pm == null) {
        pm = createPersistenceManagerFactory (fileName).getPersistenceManager ();
        pms.put (fileName, pm);
    }
    return pm;
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="183" endline="197">
private PersistenceManagerFactory createPersistenceManagerFactory (String dbFileName) {
    Properties pmfProps = new Properties ();
    pmfProps.put ("javax.jdo.PersistenceManagerFactoryClass", "com.poet.jdo.PersistenceManagerFactories");
    pmfProps.put ("javax.jdo.option.ConnectionURL", "fastobjects://LOCAL/MyBase.j1");
    final PersistenceManagerFactory pmf = JDOHelper.getPersistenceManagerFactory (pmfProps);
    return pmf;
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="199" endline="205">
private static void startTransaction (PersistenceManager pm) {
    if (! pm.currentTransaction ().isActive ()) {
        pm.currentTransaction ().begin ();
    }
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="207" endline="220">
private static void endTransaction (PersistenceManager pm, boolean doCommit) {
    if (pm.currentTransaction ().isActive ()) {
        if (doCommit) {
            pm.currentTransaction ().commit ();
        } else {
            pm.currentTransaction ().rollback ();
        }
    }
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="222" endline="262">
private String showStoreDialog (ListModel listModel, Drawing storeDrawing) {
    final String msgString = "Specify a name for the drawing";
    final JTextField nameTextField = new JTextField (storeDrawing.getTitle ());
    final JList dataList = new JList (listModel);
    final JScrollPane dbContentScrollPane = new JScrollPane (dataList);
    Object [] guiComponents = {msgString, dbContentScrollPane, nameTextField};
    dataList.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);
    dataList.setValueIsAdjusting (true);
    dataList.addListSelectionListener (new ListSelectionListener () {
        public void valueChanged (ListSelectionEvent e) {
            nameTextField.setText (dataList.getSelectedValue ().toString ());
        }}

    );
    final JOptionPane optionPane = new JOptionPane (guiComponents, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
    final JDialog dialog = optionPane.createDialog (null, "Restore a drawing from the database");
    dialog.setVisible (true);
    if ((optionPane.getValue () != null) && (optionPane.getValue ().equals (new Integer (JOptionPane.OK_OPTION)))) {
        return nameTextField.getText ();
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="235" endline="238">
public void valueChanged (ListSelectionEvent e) {
    nameTextField.setText (dataList.getSelectedValue ().toString ());
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="264" endline="293">
private Drawing showRestoreDialog (DrawingListModel listModel) {
    final String msgString = "Select a drawing";
    final JList dataList = new JList (listModel);
    final JScrollPane dbContentScrollPane = new JScrollPane (dataList);
    Object [] guiComponents = {msgString, dbContentScrollPane};
    dataList.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);
    dataList.setValueIsAdjusting (true);
    final JOptionPane optionPane = new JOptionPane (guiComponents, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
    final JDialog dialog = optionPane.createDialog (null, "Restore a drawing from the database");
    dialog.setVisible (true);
    if ((optionPane.getValue () != null) && (optionPane.getValue ().equals (new Integer (JOptionPane.OK_OPTION))) && (dataList.getSelectedIndex () >= 0) && (dataList.getSelectedIndex () < dataList.getModel ().getSize ())) {
        return listModel.getDrawingAt (dataList.getSelectedIndex ());
    } else {
        return null;
    }
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="299" endline="308">
DrawingListModel (Iterator iter) {
    myList = CollectionsFactory.current ().createList ();
    while (iter.hasNext ()) {
        Object o = iter.next ();
        System.out.println ("extent: " + o + " .. " + ((Drawing) o).getTitle ());
        myList.add (o);
    }
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="310" endline="313">
public Object getElementAt (int index) {
    return getDrawingAt (index).getTitle ();
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="315" endline="318">
protected Drawing getDrawingAt (int index) {
    return ((Drawing) myList.get (index));
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="320" endline="323">
public int getSize () {
    return myList.size ();
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="328" endline="331">
DrawingSelector () {
    init ();
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="333" endline="339">
private void init () {
    setTitle ("Select Drawing");
    getContentPane ().setLayout (new BorderLayout ());
    getContentPane ().add (new JLabel ("Database content"), BorderLayout.NORTH);
    setSize (200, 200);
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="340" endline="364">
static private Throwable dispatchAndCatchException (Throwable ex, Component comp, FocusEvent event) {
    Throwable retEx = null;
    try {
        comp.dispatchEvent (event);
    } catch (RuntimeException re) {
        retEx = re;
    } catch (Error er) {
        retEx = er;
    }
    if (retEx != null) {
        if (ex != null) {
            handleException (ex);
        }
        return retEx;
    }
    return ex;
}
</source>
<source file="/home/jeff/git/ForkingSimulator/tmp/ForkSim_3188792047532117883/JDOStorageFormat.java" startline="367" endline="382">
public static void main (String [] args) {
    DrawingSelector frame = new DrawingSelector ();
    try {
        Drawing newDrawing = new StandardDrawing ();
        newDrawing.setTitle ("TestDrawingName" + new Random (System.currentTimeMillis ()).nextLong ());
        new JDOStorageFormat ().store ("base.j2", newDrawing);
        System.exit (0);
    } catch (IOException e) {
        e.printStackTrace ();
    }
}
</source>
