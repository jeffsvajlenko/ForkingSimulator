package X.X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.*;

import X.X.*;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

public class X extends X.X.X.X.X {
    private X X;
    private X X;
    private X X;
    private X X;
    private X X = 0;
    private X X;
    private static X X = X.X (0);
    private static X X = X.X (0);

    public X () {
        try {
            X (X);
        } catch (X X) {
            throw (X) new X (X.X ()).X (X);
        }
    }

    public X (X X) {
        try {
            X (X);
        } catch (X X) {
            throw (X) new X (X.X ()).X (X);
        } catch (X X) {
            throw (X) new X (X.X ()).X (X);
        }
    }

    private X X (X X) throws X {
        X X = 0;
        X X = 0;
        X X = X.X;
        if (0.X (X.X (0))) {
            X = 0;
        }
        X X = new X ();
        if (X != 0) {
            if (X != 0) {
            }
            X = X;
            return;
        }
        X X = X.X.X.X (0);
        if (0.X (X)) {
            X X = X.X (0);
            if (X != 0) {
                X X = 0;
                if (X.X (0)) {
                    X = 0;
                }
                try {
                } catch (X.X X) {
                    X X = new X (X.X (0, 0));
                    X [] X = {X};
                    throw new X (X.X (X));
                }
                X X = 0;
                try {
                    X = new X (X);
                } catch (X.X.X X) {
                    X X = new X (X);
                    if (X.X ()) {
                        X = new X (0 + X.X ());
                    } else {
                        X X = new X (X.X (0, 0));
                        X [] X = {X};
                        throw new X (X.X (X));
                    }
                }
                if (X != 0) {
                }
                X (X, X);
                X = 0;
                if (X) {
                    if (X != 0) {
                        X.X (0);
                    }
                    return;
                }
            }
        }
        X X = 0;
        X X;
        while ((X = X.X.X.X (0 + X)) != 0) {
            try {
                X = X.X (X).X (X.X, 0);
                if (X != 0) {
                }
                X (new X (X), X);
                X = 0;
            } catch (X.X X) {
                X X = new X (X.X (0, 0));
                X [] X = {X};
                throw new X (X.X (X));
            }
            X ++;
        }
        if (X == 0 && X == 0 && X == 0) {
            if (X != 0) {
                X.X (0 + 0);
            }
            X = X.X (0);
            try {
                X (new X (0 + X + X.X + 0), X);
            } catch (X X) {
                throw new X (X.X (0, 0));
            }
        }
        X = X;
    }

    private X X (X X, X X) throws X {
        X X = new X (X (X), 0);
        X (X, X);
    }

    public X [] X (X X) {
        X X = 0;
        synchronized (X) {
            X = (X) X.X (X);
        }
        if (X == 0 || X.X () == 0) return 0;

        X [] X = new X [X.X ()];
        for (X X = 0;
        X.X (); X ++) {
            X [X] = new X (X.X (), X.X (), X.X ());
        }
        return X;
    }

    public synchronized X X () {
        if (X != 0) X.X (new X (0));

        X.X.X.X (new X.X.X () {

            public X X () {
                try {
                } catch (X.X.X X) {
                    throw (X) new X (X.X ()).X (X);
                }
                return 0;
            }

        }

        );
    }

    private X X (X X, X X) throws X {
        X X = 0;
        if (! (X instanceof X)) X = new X (X);

        X = new X (X);
        X.X (0, 0);
        X.X (0, 0);
        X.X (0);
        X.X (0);
        X = X ();
        while (X != X.X) {
            X (X);
        }
    }

    private X X (X X) throws X {
        X X;
        X X = new X ();
        X = X ();
        if (X != 0) {
        }
        X (0);
        while (X (0) == 0) {
            X X = new X ();
            X = X (0);
            if (X.X (0)) X = X.X.X;
            else if (X.X (0)) X = X.X.X;
            else if (X.X (0)) X = X.X.X;
            else if (X.X (0)) X = X.X.X;
            else {
                X X = new X (X.X (0, 0));
                X [] X = {X};
                throw new X (X.X (X));
            }

            X X = new X ();
            X X;
            X X;
            while (X (0) == 0) {
                X = X (0);
                X (0);
                try {
                } catch (X.X X) {
                    throw new X (X.X ());
                }
                X.X (X, X);
            }
            X = X ();
            if (X != 0) {
                X.X (0 + X + 0 + X);
                while (X.X ()) {
                    X.X (0 + X + 0 + (X) X.X (X));
                }
            }
            X X = new X (X, X, X);
        }
        X (0);
        X (0);
        if (X.X (X)) {
            X X = new X (X.X (0 + 0, 0));
            X [] X = {X};
            throw new X (X.X (X));
        }
    }

    private X X (X X) throws X {
        X X = 0;
        switch (X) {
            case X.X :
                X X = new X (X.X (0 + 0, 0));
                X [] X = {X};
                throw new X (X.X (X));
            case 0 :
            case X.X :
                if (X.X (0) || X.X (0) || X.X (0) || X.X (0)) {
                    X = X.X;
                } else {
                    X X = new X (X.X (0 + 0, 0));
                    X [] X = {new X (X), X, X.X};
                    throw new X (X.X (X));
                }
                break;
            case 0 :
                if (X.X (0)) {
                } else {
                    X X = new X (X.X (0, 0));
                    X [] X = {new X (X), X, X.X};
                    throw new X (X.X (X));
                }
                break;
            case 0 :
                if (X.X (0)) {
                } else {
                    X X = new X (X.X (0, 0));
                    X [] X = {new X (X), X, X.X};
                    throw new X (X.X (X));
                }
                break;
            case 0 :
                if (X.X (0)) {
                    X = X ();
                } else {
                    X X = new X (X.X (0, 0));
                    X [] X = {new X (X), X, X.X};
                    throw new X (X.X (X));
                }
                break;
            case 0 :
                if (X.X (0)) {
                    X = X ();
                } else {
                    X X = new X (X.X (0, 0));
                    X [] X = {new X (X), X, X.X};
                    throw new X (X.X (X));
                }
                break;
            default :
                X X = new X (X.X (0 + 0, 0));
                X [] X = {new X (X), X, X.X};
                throw new X (X.X (X));
        }
        return X;
    }

    private X X (X X) {
        X X = 0;
        switch (X) {
            case 0 :
                if (X.X (0)) X = 0;

                break;
            case 0 :
                if (X.X (0)) X = 0;

                break;
            case 0 :
                if (X.X (0)) X = 0;

                break;
            case 0 :
                if (X.X (0)) X = 0;

                break;
            default :
        }
        return X;
    }

    private X X () throws X {
        X X;
        while ((X = X.X ()) == X.X) {
            X ++;
        }
        return X;
    }

    private X X (X X) throws X {
        if (0.X (X.X ())) {
            X X = X.X ().X (0, X.X);
            return new X (X);
        } else {
            return X.X ();
        }
    }

    private X X (X X) throws X.X, X {
        if (0.X (X)) {
            return X;
        }
        if (X) {
            if (X == 0 || X.X () == 0) {
                X X = new X (X.X (0 + 0, 0));
                X [] X = {new X (X), X};
                throw new X (X.X (X));
            }
            return X;
        } else {
            return X;
        }
    }

}

