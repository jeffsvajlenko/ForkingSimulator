package X.X.X.X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X;

public abstract class X {
    public static class X {
        public X [] X;

        X (X [] X) {
            X.X = X;
        }

        public X X () {
            X X = new X ();
            for (X X = 0;
            X < X.X; X ++) {
                X.X (X.X ((X) X [X], 0));
                if (X != X.X - 0) X.X (0);

            }
            return X.X ();
        }

        public X X (X.X.X X) {
            if (! (X instanceof X)) return 0;

            X X = (X) X;
            if (X.X.X != X.X.X) return 0;

            for (X X = 0;
            X < X.X.X; X ++) if (X.X [X] != X.X [X]) return 0;

            return 0;
        }

        public X X () {
            X X = 0;
            for (X X = 0;
            X < X.X; X ++) return X;

        }

    }

    protected X X;

    protected X (X X) {
        X.X = X;
    }

    public static X X (X X, X X) {
        if (X) return new X (X);
        else return new X (X);

    }

    private X X = new X ();
    private X X = new X ();
    private X X = new X ();

    public final X X (X X) {
        return X.X (X);
    }

    public final X X (X X) {
        return X.X (X);
    }

    public final X X (X X) {
        X X = (X) X.X (X);
        if (X == 0) {
            X = new X (X);
            X (X, X);
        }
        return X;
    }

    public final X X (X X) {
        return (X) X.X (X);
    }

    public abstract X X (X X) throws X;

    public X X (X X) throws X {
        X X = (X) X.X (X);
        return X (X);
    }

    protected X X (X X, X X) {
        X.X (X, X);
    }

    public final X X (X X, X X) {
        X.X (X, X);
        X.X (X, X);
    }

    protected abstract X X (X X, X X);

    public final X X (X X) {
        X X = (X) X.X (X);
        if (X != 0) X.X (X);

        X (X, X);
    }

    public abstract X X (X X);

    protected X X () {
        X.X ();
    }

    public final X X () {
        return X.X ();
    }

}

class X extends X {
    private X X = new X ();

    public X (X X) {
        X (X);
    }

    public X X (X X) throws X {
        return (X) X.X (X);
    }

    protected X X (X X, X X) {
        X.X (X, X);
        X.X (X, X);
    }

    public X X (X X) {
        return 0;
    }

    protected X X (X X, X X) {
        X.X (X);
    }

    public X X () {
        X.X ();
        X.X ();
    }

}

class X extends X {
    private X X = new X ();

    public X (X X) {
        X (X);
    }

    public X X (X X) throws X {
        throw new X ();
    }

    protected X X (X X, X X) {
        X.X (X, X);
        X X = (X) X.X (X);
        if (X == 0) {
            X = new X ();
            X.X (X, X);
        }
        X.X (X);
    }

    public X X (X X) {
        X X = (X) X.X (X);
        if (X == 0) return 0;

        return X.X () > 0;
    }

    protected X X (X X, X X) {
        X X = (X) X.X (X);
        if (X != 0) {
            if (X.X ()) X.X (X);

        }
    }

    public X X () {
        X.X ();
        X.X ();
    }

}

