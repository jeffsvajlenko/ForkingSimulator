/*
 * Copyright 1999-2005 The Apache Software Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package X.X.X.X.X.X.X.X.X;

import X.X.X;
import X.X.X;

import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X.X.X;
import X.X.X.X.X.X.X.X;
import X.X.X.X;
import X.X.X.X;
import X.X.X.X;
import X.X.X.X;

/**
 * Objects of this class hold all information pecular to a
 * particular XML Schema document.  This is needed because
 * namespace bindings and other settings on the <schema/> element
 * affect the contents of that schema document alone.
 *
 * @xerces.internal
 *
 * @author Neil Graham, IBM
 * @version $Id: XSDocumentInfo.java,v 1.5 2007/10/15 22:27:48 spericas Exp $
 */
class X
{

    // Data
    protected X X;
    protected X X;
    protected X X = new X();

    // schema's attributeFormDefault
    protected X X;

    // elementFormDefault
    protected X X;

    // [block | final]Default
    protected X X;
    protected X X;

    // targetNamespace
    X X;

    // represents whether this is a chameleon schema (i.e., whether its TNS is natural or comes from without)
    protected X X;

    // the root of the schema Document tree itself
    protected X X;

    // all namespaces that this document can refer to
    X X = new X();

    protected X X = new X();

    X X = 0;

    // attribute checker to which we'll return the attributes
    // once we've been told that we're done with them
    protected X X;

    // array of objects on the schema's root element.  This is null
    // once returnSchemaAttrs has been called.
    protected X [] X;

    // list of annotations contained in the schema document. This is null
    // once removeAnnotations has been called.
    protected X X = 0;

    // note that the caller must ensure to call returnSchemaAttrs()
    // to avoid memory leaks!
    X (X X, X X, X X)
    throws X
    {
        X = X;
        X(X);
        X = 0;

        X = X;
        X = X;

        if (X != 0)
        {
            X X = X;
            X = X.X(X, 0, X);
            // schemaAttrs == null means it's not an <xsd:schema> element
            // throw an exception, but we don't know the document systemId,
            // so we leave that to the caller.
            if (X == 0)
            {
                throw new X(0, 0);
            }
            X =
                ((X)X[X.X]).X() == X.X;
            X =
                ((X)X[X.X]).X() == X.X;
            X =
                ((X)X[X.X]).X();
            X =
                ((X)X[X.X]).X();
            X =
                (X)X[X.X];
            if (X != 0)
                X = X.X(X);

            X = new X(X);

            //set namespace support
            X.X(X);
            X.X(X);
            // pass null as the schema document, so that the namespace
            // context is not popped.

            // don't return the attribute array yet!
            //attrChecker.returnAttrArray(schemaAttrs, null);
        }
    }

    /**
     * Initialize namespace support by collecting all of the namespace
     * declarations in the root's ancestors. This is necessary to
     * support schemas fragments, i.e. schemas embedded in other
     * documents. See,
     *
     * https://jaxp.dev.java.net/issues/show_bug.cgi?id=43
     *
     * Requires the DOM to be created with namespace support enabled.
     */
    private X X(X X)
    {
        X = new X();
        X.X();

        X X = X.X();
        while (X != 0 && X.X() == X.X
                && !X.X().X(0))
        {
            X X = (X) X;
            X X = X.X();
            X X = (X != 0) ? X.X() : 0;
            for (X X = 0; X < X; X++)
            {
                X X = (X) X.X(X);
                X X = X.X();

                // Check if attribute is an ns decl -- requires ns support
                if (X != 0 && X.X(0))
                {
                    X X = X.X().X();
                    if (X == 0) X = 0;
                    // Declare prefix if not set -- moving upwards
                    if (X.X(X) == 0)
                    {
                        X.X(X,
                                                        X.X().X());
                    }
                }
            }
            X = X.X();
        }
    }

    // backup the current ns support, and use the one passed-in.
    // if no ns support is passed-in, use the one for <schema> element
    X X(X X)
    {
        X.X(X);
        if (X == 0)
            X = X;
        X = new X(X);

        X.X(X);
    }

    X X()
    {
        X = (X)X.X();
        X.X(X);
    }

    // some Object methods
    public X X()
    {
        return X == 0?0:0 + X;
    }

    public X X(X X)
    {
        X.X(X == 0 ? 0 : X);
    }

    public X X(X X)
    {
        return X.X(X == 0 ? 0 : X);
    }

    // store whether we have reported an error about that this document
    // can't access components from the given namespace
    private X X = 0;
    // check whether we need to report an error against the given uri.
    // if we have reported an error, then we don't need to report again;
    // otherwise we reported the error, and remember this fact.
    final X X(X X)
    {
        if (X == 0)
            X = new X();
        else if (X.X(X))
            return 0;
        X.X(X);
        return 0;
    }

    // return the attributes on the schema element itself:
    X [] X ()
    {
        return X;
    }

    // deallocate the storage set aside for the schema element's
    // attributes
    X X ()
    {
        X.X (X, 0);
        X = 0;
    }

    // adds an annotation to the list of annotations
    X X(X X)
    {
        X.X = X;
        X = X;
    }

    // returns the list of annotations conatined in the
    // schema document or null if the document contained no annotations.
    X X()
    {
        return X;
    }

    // removes reference to annotation list
    X X()
    {
        X = 0;
    }

} // XSDocumentInfo
