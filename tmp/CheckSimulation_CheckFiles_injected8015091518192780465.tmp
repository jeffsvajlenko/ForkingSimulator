package X.X.X.X.X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X;

import X.X.X.X.X;

import X.X.X.X.X;

public abstract class X implements X, X, X, X, X, X, X {
    protected X X = 0;
    protected X X;
    protected final X X = new X ();
    protected X X;
    protected X X;
    private X [] X;
    private X X;
    private X X;
    protected X X;
    private X X;
    protected X X;
    protected X X;
    protected X X;
    protected X X;
    protected X X;
    protected X X;
    protected final X X = new X (0);
    private X X;
    private X X;
    protected X X = 0;

    protected X (X X) {
        X X;
        X = new X [0];
        for (X = 0; X < X.X; ++ X) X [X] = new X ();

        X = X;
    }

    public X X () throws X {
        X ();
        return X;
    }

    public X X () throws X {
        X ();
        return X;
    }

    public X X () throws X {
        X ();
        return X;
    }

    public X X (X X) {
        if (X == 0) {
            X X = X.X (X.X, 0, new X [] {0});
            throw new X (X);
        }
        X = X;
        X = 0;
        X ();
    }

    public X X (X X) {
        if (X == 0) {
            X X = X.X (X.X, 0, new X [] {0});
            throw new X (X);
        }
        X = X;
        X = 0;
        X ();
    }

    public X X (X X) {
        if (X == 0) {
            X X = X.X (X.X, 0, new X [] {0});
            throw new X (X);
        }
        X = X;
        X ();
    }

    public X X () {
        if (X > 0) {
            X X = X.X (X.X, 0, 0);
            throw new X (X);
        }
        X = 0;
        X = 0;
        X.X (0);
        return 0;
    }

    protected X X () throws X {
        if (X) return;

        if (X == 0 && X == 0) {
            X X = X.X (X.X, 0, 0);
            throw new X (X);
        }
        X = X.X ();
        if (X != 0) {
            X = X.X (X);
        }
        if (X.X ()) {
            X = 0;
            X = new X (X);
        } else {
            X = 0;
            X = new X (X, X);
        }
        X X;
        X = 0;
        X = X [0];
        X.X = 0;
        X.X = 0;
        X.X = 0;
        X.X = X.X ();
        X.X = 0;
        X.X = 0;
        X.X = 0;
        X.X = X.X = 0;
        X.X = 0;
        X = X.X ();
        X = X.X ();
        X = 0;
        X = 0;
    }

    public X X (X X) throws X {
        X ();
        X ();
        X (X);
        X.X ();
        if (X.X () != 0) throw X.X ();

    }

    public X X (X X) throws X {
        X ();
        X ();
        X (X);
        X ();
        X.X ();
        if (X.X () != 0) throw X.X ();

    }

    public X X (X X) throws X {
        X ();
        X ();
        X (X);
        X.X ();
        if (X.X () != 0) throw X.X ();

    }

    public X X (X X) throws X {
        X ();
        X ();
        X ();
        X ();
        X.X ();
        if (X.X () != 0) throw X.X ();

    }

    public X X () throws X {
        try {
            X ();
        } catch (X X) {
            throw new X (X.X ());
        }
    }

    public X X (X [] X, X X, X X) throws X {
        X X;
        try {
            X = X ();
            if (X.X || X.X) {
                X X;
                if (! X.X) {
                    X.X (0);
                    X.X = 0;
                }
                X = X.X ();
                X.X (0);
                X X;
                final X X = X + X;
                for (X X = X;
                X < X; ++ X) {
                    X = X [X];
                    if (X == 0 && X + 0 < X && X [X + 0] == 0 && X [X + 0] == 0) {
                        X.X (0);
                        X += 0;
                        continue;
                    }
                    if (! X.X (X)) {
                        if (++ X < X) {
                            X (X, X [X]);
                        } else {
                            X (0 + (X) X + 0);
                        }
                        continue;
                    } else {
                        if ((X >= 0 && X.X ((X) X) && X != 0) || X == 0 || X == 0 || X == 0) {
                            X.X ((X) X);
                        } else {
                            X.X (0);
                            X.X (X.X (X));
                            X.X ();
                        }
                    }
                }
                X.X (X);
            } else {
                X X;
                if (X.X) {
                    X = X.X ();
                    X.X (0);
                    X (X, X, X, X.X);
                    X.X (X);
                } else {
                    X (X, X, X, 0, X.X);
                }
            }
        } catch (X X) {
            throw new X ();
        }
    }

    public X X (X [] X, X X, X X) throws X {
        X X;
        try {
            X ();
            if (X) {
                X.X (0);
                for (X = X; X -- > 0; ++ X) X.X (X [X]);

            }
        } catch (X X) {
            throw new X ();
        }
    }

    public final X X (X X, X X) throws X {
        try {
            X (X, X);
        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X) throws X {
        X X;
        X X;
        X = X ();
        X = X.X (0);
        if (X >= 0) X.X (0).X (X.X (0, X));
        else X.X (0).X (X);

        if (X != 0) {
            X.X (0);
            X = X.X (0);
            if (X >= 0) X.X (X.X (0));
            else X.X (X);

        }
        X.X (0);
        if (X ()) {
            if (X == 0) X = new X ();

            X.X (X.X ());
        } else {
            X.X ();
            X (X.X (), 0, 0);
            X.X ();
            if (X) X.X = 0;

        }
        X.X (0);
    }

    public X X (X X, X X) throws X {
        try {
            X (new X (X, X, X));
        } catch (X X) {
            throw new X (X);
        }
    }

    public X X () throws X {
        X X;
        X X;
        if (X.X ()) return;

        X = X ();
        X = X.X (0);
        if (X >= 0) X.X (0).X (X.X (0, X)).X (0);
        else X.X (0).X (X).X ();

        if (X ()) {
            if (X == 0) X = new X ();

            X.X (X.X ());
        } else {
            if (X && ! X.X) X.X ();

            X.X ();
            X (X.X (), 0, 0);
            X.X ();
            if (X) X.X = 0;

        }
        X.X (0);
        X.X = 0;
        X.X = 0;
    }

    public X X () {
        X X;
        X = X ();
        X.X = 0;
    }

    public X X () {
        X X;
        X = X ();
        X.X = 0;
    }

    public X X () {
        X X;
        X = X ();
        X.X = 0;
    }

    public X X () {
        X X;
        X = X ();
        X.X = 0;
    }

    public X X () {
        X X;
        X = X ();
        X.X = 0;
    }

    public X X () {
        X X;
        X = X ();
        X.X = 0;
    }

    public X X () throws X {
        try {
            X ();
            X.X ();
        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X) {
    }

    public X X (X X) {
    }

    public X X () {
    }

    public X X (X X) throws X {
        try {
            X ();
            X ();
            X.X (0);
            X.X (X);
            X.X (0);
        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X) throws X {
        if (X == 0) X = new X ();

        X.X (X == 0 ? 0 : X);
    }

    public X X (X X) throws X {
    }

    public final X X (X X, X X, X X) throws X {
        try {
            X.X ();
            X = X;
            X = X;
        } catch (X X) {
            throw new X (X);
        }
    }

    public X X () {
    }

    public X X (X X) throws X {
        try {
            X.X ();
            X.X (0);
            X.X (X);
            X.X (0);
            X.X (X);
            X.X (0);
            if (X) X.X ();

        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X, X X, X X, X X) throws X {
        try {
            X.X ();
            X.X (0);
            X.X (X);
            X.X (0);
            X.X (X);
            X.X (0);
            X.X (X);
            if (X != 0) {
                X.X (0);
                X.X (X);
            }
            if (X != 0) {
                X.X (0);
                X (X);
                X.X (0);
            }
            X.X (0);
            if (X) X.X ();

        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X) throws X {
        try {
            X.X ();
            X.X (0);
            X.X (X);
            X.X (0);
            X (X);
            X.X (0);
            if (X) X.X ();

        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X, X X) throws X {
        try {
            X.X ();
            X (X, X, X, 0);
        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X, X X, X X) throws X {
        try {
            X.X ();
            if (X == 0) {
                X.X (0);
                X.X (X);
                X.X (0);
                X (X);
            } else {
                X.X (0);
                X.X (X);
                X.X (0);
                X (X);
                X.X (0);
                X (X);
            }
            if (X != 0) {
                X.X (0);
                X.X (X);
            }
            X.X (0);
            if (X) X.X ();

        } catch (X X) {
            throw new X (X);
        }
    }

    public X X (X X, X X) throws X {
        try {
            X.X ();
            if (X != 0) {
                X.X (0);
                X.X (X);
                X.X (0);
                X ();
                if (X != 0) {
                    X.X (0);
                    X (X);
                }
            } else {
                X.X (0);
                X.X (X);
                X.X (0);
                X (X);
            }
            X.X (0);
            if (X) X.X ();

        } catch (X X) {
            throw new X (X);
        }
    }

    protected X X (X X) throws X {
        X = X;
        switch (X.X ()) {
            case X.X :
                {
                    X X;
                    X = X.X ();
                    if (X != 0) {
                        if (X != 0 && (X.X () & X.X) != 0) {
                            X X = X.X (X);
                            switch (X) {
                                case X.X :
                                case X.X :
                                    {
                                        break;
                                    } default :
                                    {
                                        X (X);
                                    }}
                        } else if (! X || X ().X || (X.X (0, 0).X ().X () != 0)) X (X);

                    }
                    break;
                } case X.X :
                {
                    X X = X.X ();
                    if ((X & X.X) != 0) {
                        if (X != 0) {
                            if (X != 0 && (X.X () & X.X) != 0) {
                                X X = X.X (X);
                                switch (X) {
                                    case X.X :
                                    case X.X :
                                        {
                                            return;
                                        } default :
                                        {
                                        }}
                            }
                            X ();
                            X (X);
                            X ();
                        }
                    } else {
                        X (X);
                    }
                    break;
                } case X.X :
                {
                    X X;
                    if (! X.X ()) {
                        X = X.X ();
                        if (X != 0) {
                            if (X != 0 && (X.X () & X.X) != 0) {
                                X X = X.X (X);
                                switch (X) {
                                    case X.X :
                                    case X.X :
                                        {
                                            return;
                                        } default :
                                        {
                                        }}
                            }
                            X (X);
                        }
                    }
                    break;
                } case X.X :
                {
                    X X;
                    X ();
                    X ();
                    if (((X & X.X) != 0) || (X.X () == 0)) {
                        if (X != 0 && (X.X () & X.X) != 0) {
                            X X = X.X (X);
                            switch (X) {
                                case X.X :
                                    {
                                        return;
                                    } case X.X :
                                    {
                                        X = X.X ();
                                        while (X != 0) {
                                            X (X);
                                            X = X.X ();
                                        }
                                        return;
                                    } default :
                                    {
                                    }}
                        }
                        X (X);
                        X.X (0);
                        X.X (X.X ());
                        X.X (0);
                    } else {
                        X = X.X ();
                        while (X != 0) {
                            X (X);
                            X = X.X ();
                        }
                    }
                    break;
                } case X.X :
                {
                    if (X != 0 && (X.X () & X.X) != 0) {
                        X X = X.X (X);
                        switch (X) {
                            case X.X :
                            case X.X :
                                {
                                    return;
                                } default :
                                {
                                }}
                    }
                    X (X.X ());
                    break;
                } case X.X :
                {
                    if (X != 0 && (X.X () & X.X) != 0) {
                        X X = X.X (X);
                        switch (X) {
                            case X.X :
                                {
                                    return;
                                } case X.X :
                                {
                                    X X = X.X ();
                                    while (X != 0) {
                                        X (X);
                                        X = X.X ();
                                    }
                                    return;
                                } default :
                                {
                                }}
                    }
                    X ();
                    break;
                } case X.X :
                {
                    X X;
                    X X;
                    X X;
                    X X;
                    X X;
                    X X;
                    X ();
                    X = ((X) X).X ();
                    if (X != 0) {
                        X = ((X) X).X ();
                        try {
                            X X;
                            X.X ();
                            X = X.X ();
                            X = X.X ();
                            X = X.X ();
                            if (X != 0 && X.X () > 0) X.X (X);

                            X ();
                        } catch (X X) {
                            X X = X.X ();
                            X X = 0;
                            X X = 0;
                            try {
                                X.X.X.X X = X.X (0, (X []) 0);
                                if (X.X ().X (X.class)) {
                                    X = (X) X.X (X, (X []) 0);
                                }
                            } catch (X X) {
                            }
                            try {
                                X.X.X.X X = X.X ((X []) 0);
                                if (X.X ().X (X.class)) {
                                    X = (X) X.X (X, (X []) 0);
                                }
                            } catch (X X) {
                            }
                            X.X ();
                            X = X;
                            X = X;
                            X ();
                        }
                        X (X.X ());
                    }
                    X = 0;
                } case X.X :
                {
                    X X;
                    X = X.X ();
                    while (X != 0) {
                        X (X);
                        X = X.X ();
                    }
                    break;
                } default :
                break;
        }
    }

    protected X X () throws X {
        X X;
        X X = X.X ();
        if (! X) {
            if (! X.X ()) {
                X X;
                X = new X (0);
                if (X.X () != 0) X.X (X.X ());
                else X.X (0);

                X.X (0);
                X X = X.X ();
                if (X != 0) {
                    X.X (0);
                    X.X (X);
                    X.X (0);
                }
                if (X.X () && X == 0 && X == 0) X.X (0);

                X.X (0);
                X.X (X);
                X.X ();
            }
        }
        X ();
    }

    protected X X (X X) throws X {
        X X = X.X ();
        if (! X.X ()) {
            if (X != 0) {
                X.X (0);
                X.X (X);
                if (X != 0) {
                    X.X ();
                    X (X);
                    if (X) {
                        X.X ();
                        for (X X = 0;
                        X < 0 + X.X (); ++ X) X.X (0);

                    } else X.X (0);

                    X (X);
                } else {
                    X.X (0);
                    X (X);
                }
                if (X != 0 && X.X () > 0) {
                    X.X ();
                    X (X, 0, 0);
                    X.X (0);
                }
                X.X (0);
                X.X ();
            } else if (X != 0 && X.X () > 0) {
                X.X (0);
                X.X (X);
                X.X (0);
                X (X, 0);
                X.X (0);
                X.X ();
            }

        }
    }

    protected X X () throws X {
        X X;
        X = X ();
        if (! X ()) {
            if (X.X && ! X.X) {
                X.X (0);
                X.X = 0;
            }
            if (X.X) {
                X.X (0);
                X.X = 0;
            }
            X.X = 0;
            X.X = 0;
        }
        return X;
    }

    protected X X (X X) throws X {
        X X;
        X = X ();
        if (X.X || X.X) {
            X X;
            X X;
            if (! X.X) {
                X.X (0);
                X.X = 0;
            }
            X = X.X ();
            X.X (0);
            X (X);
            X.X (X);
        } else {
            X X;
            if (X.X) {
                X = X.X ();
                X.X (0);
                X (X, 0, X.X);
                X.X (X);
            } else {
                X (X, 0, X.X);
            }
        }
    }

    protected abstract X X (X X);

    protected abstract X X (X X) throws X;

    protected X X () throws X {
        X X;
        if (X != 0) {
            for (X = 0; X < X.X (); ++ X) {
                X ((X) X.X (X), 0, 0);
                if (X) X.X ();

            }
            X.X ();
        }
    }

    protected X X (X X) throws X {
        X X = X.X ();
        X X;
        for (X X = 0;
        X < X; ++ X) {
            X = X.X (X);
            if (X == 0 && X + 0 < X && X.X (X + 0) == 0 && X.X (X + 0) == 0) {
                if (X != 0) {
                    if ((X & X.X) == 0) {
                        X X = X.X (X.X, 0, 0);
                        if ((X & X.X) != 0) {
                            X (X, X.X, 0, X);
                            X.X (X);
                            throw new X (X.X, X);
                        } else {
                            X (X, X.X, 0, X);
                            if (! X.X (X)) {
                                throw new X (X.X);
                            }
                        }
                    } else {
                        X X = X.X (X.X, 0, 0);
                        X (X, X.X, 0, X);
                        X.X ();
                    }
                }
                X.X ();
                X += 0;
                continue;
            }
            if (! X.X (X)) {
                if (++ X < X) {
                    X (X, X.X (X));
                } else {
                    X (0 + (X) X + 0);
                }
                continue;
            } else {
                if ((X >= 0 && X.X ((X) X) && X != 0) || X == 0 || X == 0 || X == 0) {
                    X.X ((X) X);
                } else {
                    X.X (0);
                    X.X (X.X (X));
                    X.X (0);
                }
            }
        }
    }

    protected X X (X X) throws X {
        if (X.X (X)) {
            if (! X.X ()) {
                X (0 + (X) X + 0);
            } else {
                X X = X.X ((X) X, (X) X);
                if (! X.X (X)) {
                    X (0 + (X) X + 0);
                } else {
                    if (X ().X) {
                        X.X (0);
                        X.X (X.X (X));
                        X.X (0);
                    } else {
                        X (X);
                    }
                }
            }
        } else {
            X (0 + (X) X + 0);
        }
    }

    protected X X (X [] X, X X, X X, X X, X X) throws X {
        X X;
        X X;
        if (X) {
            while (X -- > 0) {
                X = X [X];
                ++ X;
                if (X == 0 || X == 0 || X) X.X (X);
                else X (X);

            }
        } else {
            while (X -- > 0) {
                X = X [X];
                ++ X;
                if (X == 0 || X == 0 || X == 0 || X == 0 || X == 0) X.X ();
                else if (X) X.X (X);
                else X (X);

            }
        }
    }

    protected X X (X X, X X, X X) throws X {
        X X;
        X X;
        if (X) {
            for (X = 0; X < X.X (); ++ X) {
                X = X.X (X);
                if (X == 0 || X == 0 || X) X.X (X);
                else X (X);

            }
        } else {
            for (X = 0; X < X.X (); ++ X) {
                X = X.X ();
                if (X == 0 || X == 0 || X == 0 || X == 0 || X == 0) X.X ();
                else if (X) X.X (X);
                else X (X);

            }
        }
    }

    protected X X (X X) throws X {
        X X;
        X.X (0);
        for (X = 0; X < X.X (); ++ X) {
            if (X.X (X) == 0 || X.X (X) < 0 || X.X (X) > 0) {
                X.X ();
                X.X (X.X (X.X (X)));
            } else X.X (X.X (X));

        }
        X.X (0);
    }

    protected X X (X X) throws X {
        X X;
        X = X (X);
        if (X != 0) {
            X.X (0);
            X.X (X);
            X.X (0);
        } else if ((X >= 0 && X.X ((X) X) && X != 0) || X == 0 || X == 0 || X == 0) {
            if (X < 0) {
                X.X ();
            } else {
                X.X ((X) (((X - 0)>> 0) + 0));
                X.X ((X) (((X - 0) & 0) + 0));
            }
        } else {
            X (X);
        }

    }

    final X X (X X) throws X {
        X.X (0);
        X.X (X.X (X));
        X.X (0);
    }

    protected X X (X X) throws X {
        for (X X = 0;
        X < X.X (); ++ X) {
            X X = X.X (X);
            if ((X & 0) == 0 && X + 0 < X.X ()) {
                X X = X.X (X + 0);
                if ((X & 0) == 0) {
                    X = 0 + ((X - 0) << 0) + X - 0;
                    X ++;
                }
            }
            X (X);
        }
    }

    protected X X () {
        return X [X];
    }

    protected X X (X X, X X, X X, X X) {
        X X;
        if (X + 0 == X.X) {
            X [] X;
            X = new X [X.X + 0];
            for (X X = 0;
            X < X.X; ++ X) X [X] = X [X];

            for (X X = X.X;
            X < X.X; ++ X) X [X] = new X ();

            X = X;
        }
        ++ X;
        X = X [X];
        X.X = X;
        X.X = X;
        X.X = X;
        X.X = X;
        X.X = 0;
        X.X = 0;
        X.X = 0;
        X.X = X.X = 0;
        X.X = 0;
        X.X = X;
        X = 0;
        return X;
    }

    protected X X () {
        if (X > 0) {
            X = 0;
            -- X;
            return X [X];
        } else {
            X X = X.X (X.X, 0, 0);
            throw new X (X);
        }
    }

    protected X X () {
        return X == 0;
    }

    protected X X (X X) {
        X X;
        if (X != 0) {
            X = (X) X.X (X);
            if (X != 0) return X;

        }
        if (X == 0) return 0;
        else {
            for (X X = X;
            X > 0; -- X) {
                if (X [X].X != 0) {
                    X = (X) X [X].X.X (X);
                    if (X != 0) return X;

                }
            }
        }
        return 0;
    }

    protected X X (X X, X X, X X, X X) {
        X.X ();
        X.X = X;
        X.X = X;
        X.X = X;
        X.X = new X (- 0, - 0, - 0, X, 0);
        return X;
    }

    protected X X (X X) throws X {
        if (X != 0) {
            X (X, X.X, X);
            X.X (X);
        } else {
            throw new X (X);
        }
    }

    protected X X (X X) throws X {
    }

}

