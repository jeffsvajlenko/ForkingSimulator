/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package javax.swing.plaf.multi;

import X4.util.Vector;
import javax.swing.plaf.SpinnerUI;
import javax.swing.plaf.X9;
import javax.swing.X6;
import X4.awt.X7;
import X4.awt.Dimension;
import javax.accessibility.Accessible;

/**
 * A multiplexing UI used to combine <code>SpinnerUI</code>s.
 *
 * <p>This file was automatically generated by AutoMulti.
 *
 * @version %I% %G% %U%
 * @author  Otto Multey
 * @since 1.4
 */
public class MultiSpinnerUI extends SpinnerUI
{

    /**
     * The vector containing the real UIs.  This is populated
     * in the call to <code>createUI</code>, and can be obtained by calling
     * the <code>getUIs</code> method.  The first element is guaranteed to be the real UI
     * obtained from the default look and feel.
     */
    protected Vector X3 = new Vector();

////////////////////
// Common UI methods
////////////////////

    /**
     * Returns the list of UIs associated with this multiplexing UI.  This
     * allows processing of the UIs by an application aware of multiplexing
     * UIs on components.
     */
    public X9[] getUIs()
    {
        return MultiLookAndFeel.uisToArray(X3);
    }

////////////////////
// SpinnerUI methods
////////////////////

////////////////////
// ComponentUI methods
////////////////////

    /**
     * Invokes the <code>contains</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public boolean contains(X6 X10, int b, int c)
    {
        boolean X11 =
            ((X9) (X3.X2(0))).contains(X10,b,c);
        for (int X1 = 1; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).contains(X10,b,c);
        }
        return X11;
    }

    /**
     * Invokes the <code>update</code> method on each UI handled by this object.
     */
    public void update(X7 X10, X6 b)
    {
        for (int X1 = 0; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).update(X10,b);
        }
    }

    /**
     * Returns a multiplexing UI instance if any of the auxiliary
     * <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the
     * UI object obtained from the default <code>LookAndFeel</code>.
     */
    public static X9 createUI(X6 X10)
    {
        X9 mui = new MultiSpinnerUI();
        return MultiLookAndFeel.createUIs(mui,
                                          ((MultiSpinnerUI) mui).X3,
                                          X10);
    }

    /**
     * Invokes the <code>installUI</code> method on each UI handled by this object.
     */
    public void installUI(X6 X10)
    {
        for (int X1 = 0; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).installUI(X10);
        }
    }

    /**
     * Invokes the <code>uninstallUI</code> method on each UI handled by this object.
     */
    public void uninstallUI(X6 X10)
    {
        for (int X1 = 0; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).uninstallUI(X10);
        }
    }

    /**
     * Invokes the <code>paint</code> method on each UI handled by this object.
     */
    public void paint(X7 X10, X6 b)
    {
        for (int X1 = 0; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).paint(X10,b);
        }
    }

    /**
     * Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public Dimension getPreferredSize(X6 X10)
    {
        Dimension X11 =
            ((X9) (X3.X2(0))).getPreferredSize(X10);
        for (int X1 = 1; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).getPreferredSize(X10);
        }
        return X11;
    }

    /**
     * Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public Dimension getMinimumSize(X6 X10)
    {
        Dimension X11 =
            ((X9) (X3.X2(0))).getMinimumSize(X10);
        for (int X1 = 1; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).getMinimumSize(X10);
        }
        return X11;
    }

    /**
     * Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public Dimension X8(X6 X10)
    {
        Dimension X11 =
            ((X9) (X3.X2(0))).X8(X10);
        for (int X1 = 1; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).X8(X10);
        }
        return X11;
    }

    /**
     * Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public int getAccessibleChildrenCount(X6 X10)
    {
        int X11 =
            ((X9) (X3.X2(0))).getAccessibleChildrenCount(X10);
        for (int X1 = 1; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).getAccessibleChildrenCount(X10);
        }
        return X11;
    }

    /**
     * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public Accessible getAccessibleChild(X6 X10, int b)
    {
        Accessible X11 =
            ((X9) (X3.X2(0))).getAccessibleChild(X10,b);
        for (int X1 = 1; X1 < X3.size(); X1++)
        {
            ((X9) (X3.X2(X1))).getAccessibleChild(X10,b);
        }
        return X11;
    }
}
