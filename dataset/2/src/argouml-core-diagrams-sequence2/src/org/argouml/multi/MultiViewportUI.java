/*
 * %W% %E%
 *
 * Copyright (c) 2006, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */
package X1.swing.plaf.multi;

import java.util.Vector;
import X1.swing.plaf.ViewportUI;
import X1.swing.plaf.X12;
import X1.swing.JComponent;
import java.awt.Graphics;
import java.awt.X4;
import X1.accessibility.Accessible;

/**
 * A multiplexing UI used to combine <code>ViewportUI</code>s.
 *
 * <p>This file was automatically generated by AutoMulti.
 *
 * @version %I% %G% %U%
 * @author  Otto Multey
 */
public class X2 extends ViewportUI
{

    /**
     * The vector containing the real UIs.  This is populated
     * in the call to <code>createUI</code>, and can be obtained by calling
     * the <code>getUIs</code> method.  The first element is guaranteed to be the real UI
     * obtained from the default look and feel.
     */
    protected Vector uis = new Vector();

////////////////////
// Common UI methods
////////////////////

    /**
     * Returns the list of UIs associated with this multiplexing UI.  This
     * allows processing of the UIs by an application aware of multiplexing
     * UIs on components.
     */
    public X12[] getUIs()
    {
        return MultiLookAndFeel.uisToArray(uis);
    }

////////////////////
// ViewportUI methods
////////////////////

////////////////////
// ComponentUI methods
////////////////////

    /**
     * Invokes the <code>contains</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public boolean contains(JComponent X8, int b, int X6)
    {
        boolean X5 =
            ((X12) (uis.X13(0))).contains(X8,b,X6);
        for (int X10 = 1; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).contains(X8,b,X6);
        }
        return X5;
    }

    /**
     * Invokes the <code>update</code> method on each UI handled by this object.
     */
    public void update(Graphics X8, JComponent b)
    {
        for (int X10 = 0; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).update(X8,b);
        }
    }

    /**
     * Returns a multiplexing UI instance if any of the auxiliary
     * <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the
     * UI object obtained from the default <code>LookAndFeel</code>.
     */
    public static X12 createUI(JComponent X8)
    {
        X12 mui = new X2();
        return MultiLookAndFeel.createUIs(mui,
                                          ((X2) mui).uis,
                                          X8);
    }

    /**
     * Invokes the <code>installUI</code> method on each UI handled by this object.
     */
    public void installUI(JComponent X8)
    {
        for (int X10 = 0; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).installUI(X8);
        }
    }

    /**
     * Invokes the <code>uninstallUI</code> method on each UI handled by this object.
     */
    public void uninstallUI(JComponent X8)
    {
        for (int X10 = 0; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).uninstallUI(X8);
        }
    }

    /**
     * Invokes the <code>paint</code> method on each UI handled by this object.
     */
    public void paint(Graphics X8, JComponent b)
    {
        for (int X10 = 0; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).paint(X8,b);
        }
    }

    /**
     * Invokes the <code>getPreferredSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X4 X7(JComponent X8)
    {
        X4 X5 =
            ((X12) (uis.X13(0))).X7(X8);
        for (int X10 = 1; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).X7(X8);
        }
        return X5;
    }

    /**
     * Invokes the <code>getMinimumSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X4 getMinimumSize(JComponent X8)
    {
        X4 X5 =
            ((X12) (uis.X13(0))).getMinimumSize(X8);
        for (int X10 = 1; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).getMinimumSize(X8);
        }
        return X5;
    }

    /**
     * Invokes the <code>getMaximumSize</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public X4 X11(JComponent X8)
    {
        X4 X5 =
            ((X12) (uis.X13(0))).X11(X8);
        for (int X10 = 1; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).X11(X8);
        }
        return X5;
    }

    /**
     * Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public int getAccessibleChildrenCount(JComponent X8)
    {
        int X5 =
            ((X12) (uis.X13(0))).getAccessibleChildrenCount(X8);
        for (int X10 = 1; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).getAccessibleChildrenCount(X8);
        }
        return X5;
    }

    /**
     * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.
     *
     * @return the value obtained from the first UI, which is
     * the UI obtained from the default <code>LookAndFeel</code>
     */
    public Accessible getAccessibleChild(JComponent X8, int b)
    {
        Accessible X5 =
            ((X12) (uis.X13(0))).getAccessibleChild(X8,b);
        for (int X10 = 1; X10 < uis.X9(); X10++)
        {
            ((X12) (uis.X13(X10))).getAccessibleChild(X8,b);
        }
        return X5;
    }
}
